# .github/workflows/miro-deploy.yml
name: Miro - Test & Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo, session, simplexml, tokenizer, xml, ctype, fileinfo, openssl, pdo_mysql
        coverage: none
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress
    
    - name: Install NPM dependencies
      run: npm ci
    
    - name: Copy environment file
      run: cp .env.example .env
    
    - name: Generate application key
      run: php artisan key:generate
    
    - name: Run PHP tests
      run: php artisan test
    
    - name: Run NPM tests
      run: npm test
    
    - name: Build assets
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to TimeWeb.Cloud server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TIMEWEB_HOST }}
        username: ${{ secrets.TIMEWEB_USERNAME }}
        key: ${{ secrets.TIMEWEB_SSH_KEY }}
        script: |
          echo "🚀 Starting Miro deployment..."
          
          # Создаем директории если их нет
          sudo mkdir -p /var/www/miro
          sudo mkdir -p /var/www/backups
          sudo mkdir -p /var/log/miro
          sudo chown -R www-data:www-data /var/www/miro
          sudo chown -R www-data:www-data /var/www/backups
          sudo chown -R www-data:www-data /var/log/miro
          
          # Останавливаем приложение если запущено
          if pm2 list | grep -q "miro"; then
            echo "⏹️ Stopping Miro application..."
            pm2 stop miro
          fi
          
          # Создаем бэкап текущей версии
          if [ -d "/var/www/miro/app" ]; then
            echo "💾 Creating backup..."
            cd /var/www/backups
            sudo tar -czf "miro_backup_$(date +%Y%m%d_%H%M%S).tar.gz" -C /var/www/miro .
          fi
          
          # Переходим в директорию проекта
          cd /var/www/miro
          
          # Получаем последние изменения
          echo "📥 Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          
          # Устанавливаем PHP зависимости
          echo "📦 Installing PHP dependencies..."
          composer install --no-dev --optimize-autoloader
          
          # Устанавливаем Node.js зависимости
          echo "📦 Installing Node.js dependencies..."
          npm ci --only=production
          
          # Собираем assets
          echo "🔨 Building assets..."
          npm run build
          
          # Настройка Laravel
          echo "⚙️ Configuring Laravel..."
          cp .env.example .env
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          
          # Миграции (если нужно)
          if [ -f "artisan" ]; then
            echo "🗄️ Running migrations..."
            php artisan migrate --force
          fi
          
          # Устанавливаем права
          echo "🔐 Setting permissions..."
          sudo chown -R www-data:www-data storage bootstrap/cache
          sudo chmod -R 775 storage bootstrap/cache
          
          # Запускаем приложение
          echo "▶️ Starting application..."
          pm2 start ecosystem-laravel.config.js --env production
          pm2 save
          
          # Проверяем статус
          echo "📊 Application status:"
          pm2 status miro
          
          # Проверяем доступность
          echo "🔍 Checking availability..."
          sleep 10
          if curl -f http://localhost:8000 > /dev/null 2>&1; then
            echo "✅ Application is running successfully!"
          else
            echo "❌ Application failed to start!"
            exit 1
          fi
          
          echo "🎉 Miro deployment completed successfully!"
