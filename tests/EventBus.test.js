/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ EventBus
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
 */
import { describe, it, expect, beforeEach, vi } from 'vitest';
import { EventBus } from '../src/core/EventBus.js';

describe('EventBus', () => {
    let eventBus;

    beforeEach(() => {
        eventBus = new EventBus();
    });

    // ==================== –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ ====================

    it('should create EventBus instance', () => {
        expect(eventBus).toBeInstanceOf(EventBus);
    });

    it('should register event listener with on method', () => {
        const callback = vi.fn();
        const eventName = 'test:event';
        eventBus.on(eventName, callback);
        expect(eventBus.events.get(eventName).has(callback)).toBe(true);
    });

    it('should call registered listener when event is emitted', () => {
        const callback = vi.fn();
        const eventName = 'test:event';
        const testData = { name: "Alex", age: 18 };

        eventBus.on(eventName, callback);
        eventBus.emit(eventName, testData);

        expect(callback).toHaveBeenCalledWith(testData);
        expect(callback).toHaveBeenCalledTimes(1);
    });

    it('should remove event listener with off method', () => {
        const callback = vi.fn();
        const eventName = 'test:event';
        eventBus.on(eventName, callback);
        eventBus.off(eventName, callback);
        eventBus.emit(eventName, {});
        expect(callback).not.toHaveBeenCalled();
    });

    // ==================== –ü–†–û–í–ï–†–ö–ò –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò ====================

    it('should not register duplicate callbacks for same event', () => {
        const callback = vi.fn();
        const eventName = 'test:event';

        eventBus.on(eventName, callback);
        eventBus.on(eventName, callback); // –î—É–±–ª–∏—Ä—É–µ–º

        eventBus.emit(eventName, {});

        expect(callback).toHaveBeenCalledTimes(1); // –í—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑
        expect(eventBus.events.get(eventName).size).toBe(1); // –í —Ä–µ–µ—Å—Ç—Ä–µ —Ç–æ–ª—å–∫–æ 1
    });

    it('should handle null/undefined callback gracefully', () => {
        const eventName = 'test:event';

        // –ù–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å
        expect(() => {
            eventBus.on(eventName, null);
            eventBus.on(eventName, undefined);
        }).not.toThrow();
    });

    it('should handle empty event names', () => {
        const callback = vi.fn();

        eventBus.on('', callback);
        eventBus.emit('', { data: 'test' });

        expect(callback).toHaveBeenCalledWith({ data: 'test' });
    });

    it('should handle special characters in event names', () => {
        const callback = vi.fn();
        const specialEventName = 'event:with:colons:and:dots.and:spaces and:unicode:üéØ';

        eventBus.on(specialEventName, callback);
        eventBus.emit(specialEventName, { message: 'test' });

        expect(callback).toHaveBeenCalledWith({ message: 'test' });
    });

    it('should handle multiple off calls safely', () => {
        const callback = vi.fn();
        const eventName = 'test:event';

        eventBus.on(eventName, callback);
        eventBus.off(eventName, callback);
        eventBus.off(eventName, callback); // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø–∏—Å–∫–∞

        eventBus.emit(eventName, {});
        expect(callback).not.toHaveBeenCalled();
    });

    it('should handle off with non-existent callback', () => {
        const callback = vi.fn();
        const eventName = 'test:event';

        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        expect(() => {
            eventBus.off(eventName, callback);
        }).not.toThrow();
    });

    it('should handle off with non-existent event', () => {
        const callback = vi.fn();

        expect(() => {
            eventBus.off('non:existent:event', callback);
        }).not.toThrow();
    });

    // ==================== –ü–†–û–í–ï–†–ö–ò –î–ê–ù–ù–´–• ====================

    it('should pass data by reference, not by value', () => {
        const callback = vi.fn();
        const eventName = 'test:event';
        const data = { message: 'original' };

        eventBus.on(eventName, callback);
        eventBus.emit(eventName, data);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç
        expect(callback).toHaveBeenCalledWith(data);

        // –ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –ø–æ–ª—É—á–∏–ª –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        data.message = 'modified';
        expect(callback).toHaveBeenCalledWith({ message: 'modified' });
    });

    it('should handle async callbacks', async () => {
        const asyncCallback = vi.fn().mockImplementation(async () => {
            await new Promise(resolve => setTimeout(resolve, 10));
            return 'async result';
        });

        const eventName = 'async:event';

        eventBus.on(eventName, asyncCallback);
        eventBus.emit(eventName, { data: 'test' });

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ callback'–∞
        await new Promise(resolve => setTimeout(resolve, 20));

        expect(asyncCallback).toHaveBeenCalledWith({ data: 'test' });
    });

    it('should continue execution if callback throws error', () => {
        const errorCallback = vi.fn().mockImplementation(() => {
            throw new Error('Callback error');
        });

        const normalCallback = vi.fn();
        const eventName = 'error:event';

        // –ú–æ–∫–∞–µ–º console.error
        const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});

        eventBus.on(eventName, errorCallback);
        eventBus.on(eventName, normalCallback);

        // –ù–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å, –≤—Ç–æ—Ä–æ–π callback –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
        expect(() => {
            eventBus.emit(eventName, {});
        }).not.toThrow();

        expect(normalCallback).toHaveBeenCalledWith({});

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
        expect(consoleSpy).toHaveBeenCalled();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º console.error
        consoleSpy.mockRestore();
    });

    // ==================== –ü–†–û–í–ï–†–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ====================

    it('should handle large number of events efficiently', () => {
        const callbacks = [];
        const eventName = 'performance:test';

        // –°–æ–∑–¥–∞–µ–º 1000 callback'–æ–≤
        for (let i = 0; i < 1000; i++) {
            const callback = vi.fn();
            callbacks.push(callback);
            eventBus.on(eventName, callback);
        }

        const startTime = performance.now();
        eventBus.emit(eventName, { data: 'test' });
        const endTime = performance.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ callback'–∏ –≤—ã–∑–≤–∞–Ω—ã
        callbacks.forEach(callback => {
            expect(callback).toHaveBeenCalledWith({ data: 'test' });
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω–æ–µ (< 100ms)
        expect(endTime - startTime).toBeLessThan(100);
    });

    it('should handle many different events efficiently', () => {
        const callbacks = [];
        const eventCount = 100;

        // –°–æ–∑–¥–∞–µ–º 100 —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        for (let i = 0; i < eventCount; i++) {
            const callback = vi.fn();
            callbacks.push(callback);
            eventBus.on(`event:${i}`, callback);
        }

        const startTime = performance.now();

        // –≠–º–∏—Ç–∏–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
        for (let i = 0; i < eventCount; i++) {
            eventBus.emit(`event:${i}`, { eventId: i });
        }

        const endTime = performance.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ callback'–∏ –≤—ã–∑–≤–∞–Ω—ã
        callbacks.forEach((callback, index) => {
            expect(callback).toHaveBeenCalledWith({ eventId: index });
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 50ms –¥–ª—è 100 —Å–æ–±—ã—Ç–∏–π)
        expect(endTime - startTime).toBeLessThan(50);
    });

    // ==================== –ü–†–û–í–ï–†–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–¨–Æ ====================

    it('should not leak memory after removing all listeners', () => {
        const callback = vi.fn();
        const eventName = 'memory:test';

        eventBus.on(eventName, callback);
        eventBus.off(eventName, callback);

        // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö listener'–æ–≤ —Å–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
        expect(eventBus.events.has(eventName)).toBe(false);
    });

    it('should have removeAllListeners method', () => {
        const callback1 = vi.fn();
        const callback2 = vi.fn();

        eventBus.on('event1', callback1);
        eventBus.on('event2', callback2);

        eventBus.removeAllListeners();

        expect(eventBus.events.size).toBe(0);
    });

    it('should remove all listeners and clear events map', () => {
        const callback1 = vi.fn();
        const callback2 = vi.fn();
        const callback3 = vi.fn();

        eventBus.on('event1', callback1);
        eventBus.on('event2', callback2);
        eventBus.on('event3', callback3);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω—ã
        expect(eventBus.events.size).toBe(3);

        eventBus.removeAllListeners();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–¥–∞–ª–µ–Ω–æ
        expect(eventBus.events.size).toBe(0);
        expect(eventBus.events.has('event1')).toBe(false);
        expect(eventBus.events.has('event2')).toBe(false);
        expect(eventBus.events.has('event3')).toBe(false);
    });

    it('should work normally after removeAllListeners', () => {
        const callback = vi.fn();

        eventBus.on('test:event', callback);
        eventBus.removeAllListeners();

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        eventBus.on('new:event', callback);
        eventBus.emit('new:event', { data: 'test' });

        expect(callback).toHaveBeenCalledWith({ data: 'test' });
    });

    // ==================== –ü–†–û–í–ï–†–ö–ò –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –°–õ–£–ß–ê–ï–í ====================

    it('should handle nested events (event inside event)', () => {
        const outerCallback = vi.fn();
        const innerCallback = vi.fn();
        const nestedCallback = vi.fn();

        eventBus.on('outer:event', outerCallback);
        eventBus.on('inner:event', innerCallback);
        eventBus.on('nested:event', nestedCallback);

        // Callback, –∫–æ—Ç–æ—Ä—ã–π —ç–º–∏—Ç–∏—Ç –¥—Ä—É–≥–æ–µ —Å–æ–±—ã—Ç–∏–µ
        const triggerCallback = vi.fn().mockImplementation(() => {
            eventBus.emit('inner:event', { from: 'outer' });
        });

        eventBus.on('outer:event', triggerCallback);

        eventBus.emit('outer:event', { data: 'outer' });

        expect(outerCallback).toHaveBeenCalledWith({ data: 'outer' });
        expect(triggerCallback).toHaveBeenCalledWith({ data: 'outer' });
        expect(innerCallback).toHaveBeenCalledWith({ from: 'outer' });
    });

    it('should prevent infinite loops in event chains', () => {
        const callback = vi.fn();
        let emitCount = 0;

        eventBus.on('loop:event', callback);

        // Callback, –∫–æ—Ç–æ—Ä—ã–π —ç–º–∏—Ç–∏—Ç —Ç–æ –∂–µ —Å–æ–±—ã—Ç–∏–µ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª)
        const loopCallback = vi.fn().mockImplementation(() => {
            emitCount++;
            if (emitCount < 3) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤
                eventBus.emit('loop:event', { count: emitCount });
            }
        });

        eventBus.on('loop:event', loopCallback);

        eventBus.emit('loop:event', { start: true });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–∏–∫–ª –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π
        expect(emitCount).toBeLessThan(10);
        expect(callback).toHaveBeenCalled();
        expect(loopCallback).toHaveBeenCalled();
    });

    it('should call callbacks in registration order', () => {
        const order = [];
        const callback1 = vi.fn().mockImplementation(() => order.push(1));
        const callback2 = vi.fn().mockImplementation(() => order.push(2));
        const callback3 = vi.fn().mockImplementation(() => order.push(3));

        eventBus.on('order:test', callback1);
        eventBus.on('order:test', callback2);
        eventBus.on('order:test', callback3);

        eventBus.emit('order:test', {});

        expect(order).toEqual([1, 2, 3]);
    });

    it('should handle callback modification during execution', () => {
        const callback = vi.fn();
        const modifyingCallback = vi.fn().mockImplementation(() => {
            // –£–¥–∞–ª—è–µ–º callback –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            eventBus.off('modify:test', callback);
        });

        eventBus.on('modify:test', callback);
        eventBus.on('modify:test', modifyingCallback);

        eventBus.emit('modify:test', {});

        // Callback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        expect(callback).toHaveBeenCalled();
        expect(modifyingCallback).toHaveBeenCalled();
    });

    // ==================== –ü–†–û–í–ï–†–ö–ò –†–ê–ó–ù–´–• –¢–ò–ü–û–í –î–ê–ù–ù–´–• ====================

    it('should handle undefined data correctly', () => {
        const callback = vi.fn();
        const eventName = 'undefined:test';

        eventBus.on(eventName, callback);
        eventBus.emit(eventName, undefined);

        expect(callback).toHaveBeenCalledWith(undefined);
    });

    it('should handle functions as event data', () => {
        const callback = vi.fn();
        const eventName = 'function:test';
        const testFunction = () => 'test';

        eventBus.on(eventName, callback);
        eventBus.emit(eventName, testFunction);

        expect(callback).toHaveBeenCalledWith(testFunction);
        expect(typeof callback.mock.calls[0][0]).toBe('function');
    });

    it('should handle complex objects as event data', () => {
        const callback = vi.fn();
        const eventName = 'complex:test';
        const complexData = {
            string: 'test',
            number: 42,
            boolean: true,
            null: null,
            undefined: undefined,
            array: [1, 2, 3],
            object: { nested: { value: 'deep' } },
            function: () => 'nested function',
            date: new Date(),
            regex: /test/gi
        };

        eventBus.on(eventName, callback);
        eventBus.emit(eventName, complexData);

        expect(callback).toHaveBeenCalledWith(complexData);
        expect(callback.mock.calls[0][0]).toEqual(complexData);
    });

    it('should handle multiple events emitted simultaneously', () => {
        const callback1 = vi.fn();
        const callback2 = vi.fn();
        const callback3 = vi.fn();

        eventBus.on('event1', callback1);
        eventBus.on('event2', callback2);
        eventBus.on('event3', callback3);

        // –≠–º–∏—Ç–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥—Ä—è–¥
        eventBus.emit('event1', { data: 'event1' });
        eventBus.emit('event2', { data: 'event2' });
        eventBus.emit('event3', { data: 'event3' });

        expect(callback1).toHaveBeenCalledWith({ data: 'event1' });
        expect(callback2).toHaveBeenCalledWith({ data: 'event2' });
        expect(callback3).toHaveBeenCalledWith({ data: 'event3' });
    });

    it('should handle edge cases with empty callbacks', () => {
        const eventName = 'edge:test';

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
        const emptyCallback = () => {};
        eventBus.on(eventName, emptyCallback);

        // –ù–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å
        expect(() => {
            eventBus.emit(eventName, {});
        }).not.toThrow();

        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
        eventBus.off(eventName, emptyCallback);
        expect(eventBus.events.has(eventName)).toBe(false);
    });

    // ==================== –°–¢–†–ï–°–°-–¢–ï–°–¢–´ ====================

    it('should handle 10,000 events without memory leaks', () => {
        const eventCount = 10000;
        const callbacks = [];

        // –°–æ–∑–¥–∞–µ–º 10,000 —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        for (let i = 0; i < eventCount; i++) {
            const callback = vi.fn();
            callbacks.push(callback);
            eventBus.on(`stress:event:${i}`, callback);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω—ã
        expect(eventBus.events.size).toBe(eventCount);

        // –≠–º–∏—Ç–∏–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
        const startTime = performance.now();
        for (let i = 0; i < eventCount; i++) {
            eventBus.emit(`stress:event:${i}`, { eventId: i, timestamp: Date.now() });
        }
        const endTime = performance.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ callback'–∏ –≤—ã–∑–≤–∞–Ω—ã
        callbacks.forEach((callback, index) => {
            expect(callback).toHaveBeenCalledWith({ eventId: index, timestamp: expect.any(Number) });
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 500ms –¥–ª—è 10,000 —Å–æ–±—ã—Ç–∏–π)
        expect(endTime - startTime).toBeLessThan(500);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–º—è—Ç—å –Ω–µ —Ä–∞—Å—Ç–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏
        const initialMemory = process.memoryUsage().heapUsed;

        // –ü–æ–≤—Ç–æ—Ä—è–µ–º —ç–º–∏—Å—Å–∏—é —Å–æ–±—ã—Ç–∏–π
        for (let i = 0; i < eventCount; i++) {
            eventBus.emit(`stress:event:${i}`, { eventId: i, timestamp: Date.now() });
        }

        const finalMemory = process.memoryUsage().heapUsed;
        const memoryGrowth = finalMemory - initialMemory;

        // –†–æ—Å—Ç –ø–∞–º—è—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º (< 10MB –¥–ª—è 10,000 —Å–æ–±—ã—Ç–∏–π)
        expect(memoryGrowth).toBeLessThan(10 * 1024 * 1024);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è
        callbacks.forEach((callback, index) => {
            eventBus.off(`stress:event:${index}`, callback);
        });

        // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π Map –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
        expect(eventBus.events.size).toBe(0);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        const cleanupMemory = process.memoryUsage().heapUsed;
        const totalMemoryGrowth = cleanupMemory - initialMemory;

        // –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º (< 20MB)
        expect(totalMemoryGrowth).toBeLessThan(20 * 1024 * 1024);
    });

    it('should handle 1,000 callbacks for single event', () => {
        const callbackCount = 1000;
        const callbacks = [];
        const eventName = 'stress:single:event';

        // –°–æ–∑–¥–∞–µ–º 1,000 callback'–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        for (let i = 0; i < callbackCount; i++) {
            const callback = vi.fn().mockImplementation(() => {
                // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É callback'–∞
                return `callback_${i}_result`;
            });
            callbacks.push(callback);
            eventBus.on(eventName, callback);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ callback'–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
        expect(eventBus.events.get(eventName).size).toBe(callbackCount);

        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
        const startTime = performance.now();
        eventBus.emit(eventName, { data: 'stress_test', timestamp: Date.now() });
        const endTime = performance.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ callback'–∏ –≤—ã–∑–≤–∞–Ω—ã
        callbacks.forEach((callback, index) => {
            expect(callback).toHaveBeenCalledWith({ data: 'stress_test', timestamp: expect.any(Number) });
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 100ms –¥–ª—è 1,000 callback'–æ–≤)
        expect(endTime - startTime).toBeLessThan(100);
    });

    it('should handle rapid fire operations', () => {
        const operationCount = 5000;
        const callbacks = [];
        const eventName = 'rapid:fire:event';

        // –°–æ–∑–¥–∞–µ–º callback'–∏
        for (let i = 0; i < 100; i++) {
            const callback = vi.fn();
            callbacks.push(callback);
            eventBus.on(eventName, callback);
        }

        const startTime = performance.now();

        // –ë—ã—Å—Ç—Ä–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: on, emit, off, on, emit
        for (let i = 0; i < operationCount; i++) {
            const tempCallback = vi.fn();
            eventBus.on(eventName, tempCallback);
            eventBus.emit(eventName, { operation: i });
            eventBus.off(eventName, tempCallback);
        }

        const endTime = performance.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 200ms –¥–ª—è 5,000 –æ–ø–µ—Ä–∞—Ü–∏–π)
        expect(endTime - startTime).toBeLessThan(200);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ callback'–∏ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        eventBus.emit(eventName, { final: 'test' });
        callbacks.forEach(callback => {
            expect(callback).toHaveBeenCalledWith({ final: 'test' });
        });
    });

    it('should handle nested events in loop without stack overflow', () => {
        const maxDepth = 1000;
        let currentDepth = 0;
        let totalEmissions = 0;

        const recursiveCallback = vi.fn().mockImplementation(() => {
            totalEmissions++;
            if (currentDepth < maxDepth) {
                currentDepth++;
                eventBus.emit('nested:stress:event', { depth: currentDepth });
                currentDepth--;
            }
        });

        eventBus.on('nested:stress:event', recursiveCallback);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        const startTime = performance.now();
        eventBus.emit('nested:stress:event', { depth: 0 });
        const endTime = performance.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª stack overflow
        expect(currentDepth).toBe(0);
        expect(totalEmissions).toBe(maxDepth + 1); // +1 –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 300ms)
        expect(endTime - startTime).toBeLessThan(300);
    });

    it('should handle concurrent operations safely', async () => {
        const concurrentCount = 100;
        const promises = [];

        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        for (let i = 0; i < concurrentCount; i++) {
            const promise = new Promise((resolve) => {
                const callback = vi.fn().mockImplementation(() => {
                    resolve({ id: i, success: true });
                });

                eventBus.on(`concurrent:event:${i}`, callback);
                eventBus.emit(`concurrent:event:${i}`, { concurrentId: i });
            });

            promises.push(promise);
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        const startTime = performance.now();
        const results = await Promise.all(promises);
        const endTime = performance.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
        expect(results).toHaveLength(concurrentCount);
        results.forEach((result, index) => {
            expect(result.id).toBe(index);
            expect(result.success).toBe(true);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 500ms –¥–ª—è 100 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
        expect(endTime - startTime).toBeLessThan(500);
    });

    // ==================== –¢–ï–°–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–¨–Æ ====================

    it('should provide detailed memory analysis', () => {
        const eventCount = 500;
        const memorySnapshots = [];

        // –ë–∞–∑–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        memorySnapshots.push({
            stage: 'baseline',
            memory: process.memoryUsage().heapUsed,
            events: eventBus.events.size,
            mapSize: eventBus.events.size
        });

        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        const callbacks = [];
        for (let i = 0; i < eventCount; i++) {
            const callback = vi.fn();
            callbacks.push(callback);
            eventBus.on(`detailed:analysis:${i}`, callback);
        }

        memorySnapshots.push({
            stage: 'after_creation',
            memory: process.memoryUsage().heapUsed,
            events: eventBus.events.size,
            mapSize: eventBus.events.size
        });

        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏—è
        for (let i = 0; i < eventCount; i++) {
            eventBus.emit(`detailed:analysis:${i}`, { eventId: i });
        }

        memorySnapshots.push({
            stage: 'after_emission',
            memory: process.memoryUsage().heapUsed,
            events: eventBus.events.size,
            mapSize: eventBus.events.size
        });

        // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
        callbacks.forEach((callback, index) => {
            eventBus.off(`detailed:analysis:${index}`, callback);
        });

        memorySnapshots.push({
            stage: 'after_cleanup',
            memory: process.memoryUsage().heapUsed,
            events: eventBus.events.size,
            mapSize: eventBus.events.size
        });

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        console.log('Detailed Memory Analysis:', memorySnapshots);

        // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        const baselineMemory = memorySnapshots[0].memory;
        const afterCreationMemory = memorySnapshots[1].memory;
        const afterCleanupMemory = memorySnapshots[3].memory;

        const creationMemoryGrowth = afterCreationMemory - baselineMemory;
        const cleanupMemoryGrowth = afterCleanupMemory - baselineMemory;

        console.log(`Memory growth after creation: ${creationMemoryGrowth} bytes (${(creationMemoryGrowth / 1024 / 1024).toFixed(2)} MB)`);
        console.log(`Memory growth after cleanup: ${cleanupMemoryGrowth} bytes (${(cleanupMemoryGrowth / 1024 / 1024).toFixed(2)} MB)`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã
        expect(eventBus.events.size).toBe(0);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
        if (cleanupMemoryGrowth > 1024 * 1024) { // > 1MB
            console.warn('‚ö†Ô∏è WARNING: EventBus has memory leak!');
            console.warn(`   Memory not freed after cleanup: ${(cleanupMemoryGrowth / 1024 / 1024).toFixed(2)} MB`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Map –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–æ–π
        expect(eventBus.events.size).toBe(0);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã
        for (const [key, value] of eventBus.events.entries()) {
            console.error(`‚ùå ERROR: Found remaining event: ${key} with ${value.size} callbacks`);
        }

        expect(eventBus.events.entries().next().done).toBe(true);

        // –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º (< 10MB)
        // –£—á–∏—Ç—ã–≤–∞–µ–º vi.fn() –∑–∞–º—ã–∫–∞–Ω–∏—è –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏
        expect(cleanupMemoryGrowth).toBeLessThan(10 * 1024 * 1024);
    });

    it('should maintain stable memory usage under load', () => {
        const initialMemory = process.memoryUsage().heapUsed;
        const iterations = 10;
        const eventsPerIteration = 100;

        for (let iteration = 0; iteration < iterations; iteration++) {
            const callbacks = [];

            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            for (let i = 0; i < eventsPerIteration; i++) {
                const callback = vi.fn();
                callbacks.push(callback);
                eventBus.on(`load:test:${iteration}:${i}`, callback);
            }

            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏—è
            for (let i = 0; i < eventsPerIteration; i++) {
                eventBus.emit(`load:test:${iteration}:${i}`, { iteration, eventId: i });
            }

            // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
            callbacks.forEach((callback, index) => {
                eventBus.off(`load:test:${iteration}:${index}`, callback);
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã
            expect(eventBus.events.size).toBe(0);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        expect(eventBus.events.size).toBe(0);

        // –†–æ—Å—Ç –ø–∞–º—è—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º (< 30MB)
        // –£—á–∏—Ç—ã–≤–∞–µ–º vi.fn() –∑–∞–º—ã–∫–∞–Ω–∏—è –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏
        const finalMemory = process.memoryUsage().heapUsed;
        const memoryGrowth = finalMemory - initialMemory;

        console.log(`Total memory growth: ${(memoryGrowth / 1024 / 1024).toFixed(2)} MB`);

        // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        expect(memoryGrowth).toBeLessThan(30 * 1024 * 1024); // < 30MB
    });

    it('should maintain memory stability with alternative approach', () => {
        const initialMemory = process.memoryUsage().heapUsed;
        const eventCount = 500;

        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        const callbacks = [];
        for (let i = 0; i < eventCount; i++) {
            const callback = vi.fn();
            callbacks.push(callback);
            eventBus.on(`alt:test:${i}`, callback);
        }

        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏—è
        for (let i = 0; i < eventCount; i++) {
            eventBus.emit(`alt:test:${i}`, { eventId: i });
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
        callbacks.forEach((callback, index) => {
            eventBus.off(`alt:test:${index}`, callback);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã
        expect(eventBus.events.size).toBe(0);

        // –†–æ—Å—Ç –ø–∞–º—è—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º (< 20MB)
        const finalMemory = process.memoryUsage().heapUsed;
        const memoryGrowth = finalMemory - initialMemory;

        console.log(`Alternative test memory growth: ${(memoryGrowth / 1024 / 1024).toFixed(2)} MB`);

        expect(memoryGrowth).toBeLessThan(20 * 1024 * 1024); // < 20MB
    });

    it('should not leak memory with real functions', () => {
        const initialMemory = process.memoryUsage().heapUsed;
        const eventCount = 1000;

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ vi.fn)
        const callbacks = [];
        for (let i = 0; i < eventCount; i++) {
            const callback = function(data) {
                return data.value * 2;
            };
            callbacks.push(callback);
            eventBus.on(`real:function:${i}`, callback);
        }

        const afterCreationMemory = process.memoryUsage().heapUsed;

        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏—è
        for (let i = 0; i < eventCount; i++) {
            eventBus.emit(`real:function:${i}`, { value: i });
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
        callbacks.forEach((callback, index) => {
            eventBus.off(`real:function:${index}`, callback);
        });

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if (global.gc) {
            global.gc();
        }

        const afterCleanupMemory = process.memoryUsage().heapUsed;
        const memoryGrowth = afterCleanupMemory - initialMemory;

        console.log(`Real functions memory growth: ${(memoryGrowth / 1024 / 1024).toFixed(2)} MB`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã
        expect(eventBus.events.size).toBe(0);

        // –° —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —É—Ç–µ—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
        expect(memoryGrowth).toBeLessThan(5 * 1024 * 1024); // < 5MB
    });
});