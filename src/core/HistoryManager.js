/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏–µ–π –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ Undo/Redo
 */
export class HistoryManager {
    constructor(eventBus, options = {}) {
        this.eventBus = eventBus;
        this.options = {
            maxHistorySize: 50, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            mergeTimeout: 1000, // –í—Ä–µ–º—è –≤ –º—Å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–º–∞–Ω–¥
            ...options
        };

        // –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        this.history = [];
        // –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
        this.currentIndex = -1;
        // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è –ø—Ä–∏ undo/redo
        this.isExecutingCommand = false;

        this.initEventListeners();
    }

    initEventListeners() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        this.eventBus.on('keyboard:undo', () => {
            this.undo();
        });

        this.eventBus.on('keyboard:redo', () => {
            this.redo();
        });

        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.eventBus.on('history:debug', () => {
            this.debugHistory();
        });
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    executeCommand(command) {
        if (this.isExecutingCommand) {
            // –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ undo/redo, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            command.execute();
            return;
        }



        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥–æ–π
        const lastCommand = this.getLastCommand();
        if (lastCommand && 
            lastCommand.canMergeWith(command) && 
            (command.timestamp - lastCommand.timestamp) < this.options.mergeTimeout) {
            

            lastCommand.mergeWith(command);
            this.eventBus.emit('history:changed', {
                canUndo: this.canUndo(),
                canRedo: this.canRedo(),
                historySize: this.history.length
            });
            return;
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        command.execute();

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (this.currentIndex < this.history.length - 1) {
            this.history = this.history.slice(0, this.currentIndex + 1);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        this.history.push(command);
        this.currentIndex++;

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (this.history.length > this.options.maxHistorySize) {
            this.history.shift();
            this.currentIndex--;
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏
        this.eventBus.emit('history:changed', {
            canUndo: this.canUndo(),
            canRedo: this.canRedo(),
            historySize: this.history.length,
            currentCommand: command.toString()
        });


    }

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É
     */
    undo() {
        if (!this.canUndo()) {

            return false;
        }

        const command = this.history[this.currentIndex];


        this.isExecutingCommand = true;
        try {
            command.undo();
            this.currentIndex--;
            
            this.eventBus.emit('history:changed', {
                canUndo: this.canUndo(),
                canRedo: this.canRedo(),
                historySize: this.history.length,
                lastUndone: command.toString()
            });


            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–æ–º–∞–Ω–¥—ã:', error);
            return false;
        } finally {
            this.isExecutingCommand = false;
        }
    }

    /**
     * –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
     */
    redo() {
        if (!this.canRedo()) {

            return false;
        }

        this.currentIndex++;
        const command = this.history[this.currentIndex];


        this.isExecutingCommand = true;
        try {
            command.execute();
            
            this.eventBus.emit('history:changed', {
                canUndo: this.canUndo(),
                canRedo: this.canRedo(),
                historySize: this.history.length,
                lastRedone: command.toString()
            });


            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ –∫–æ–º–∞–Ω–¥—ã:', error);
            this.currentIndex--; // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return false;
        } finally {
            this.isExecutingCommand = false;
        }
    }

    /**
     * –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
     */
    canUndo() {
        return this.currentIndex >= 0;
    }

    /**
     * –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
     */
    canRedo() {
        return this.currentIndex < this.history.length - 1;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É
     */
    getLastCommand() {
        if (this.history.length === 0) return null;
        return this.history[this.history.length - 1];
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
     */
    clear() {
        this.history = [];
        this.currentIndex = -1;
        
        this.eventBus.emit('history:changed', {
            canUndo: false,
            canRedo: false,
            historySize: 0
        });


    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     */
    getHistoryInfo() {
        return {
            totalCommands: this.history.length,
            currentIndex: this.currentIndex,
            canUndo: this.canUndo(),
            canRedo: this.canRedo(),
            commands: this.history.map((cmd, index) => ({
                index,
                isCurrent: index === this.currentIndex,
                command: cmd.toString()
            }))
        };
    }

    /**
     * –í—ã–≤–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     */
    debugHistory() {
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
        const info = this.getHistoryInfo();
        console.group('üìö –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥');
        console.table(info.commands);
        console.log(`–ü–æ–∑–∏—Ü–∏—è: ${this.currentIndex + 1}/${this.history.length}`);
        console.log(`Undo: ${this.canUndo()}, Redo: ${this.canRedo()}`);
        console.groupEnd();
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
     */
    destroy() {
        this.clear();
        this.eventBus.removeAllListeners('keyboard:undo');
        this.eventBus.removeAllListeners('keyboard:redo');
        this.eventBus.removeAllListeners('history:debug');
    }
}
