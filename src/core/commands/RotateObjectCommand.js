/**
 * –ö–æ–º–∞–Ω–¥–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Undo/Redo
 */
import { BaseCommand } from './BaseCommand.js';

export class RotateObjectCommand extends BaseCommand {
    constructor(coreMoodboard, objectId, oldAngle, newAngle) {
        super();
        this.coreMoodboard = coreMoodboard;
        this.objectId = objectId;
        this.oldAngle = oldAngle;
        this.newAngle = newAngle;
    }

    execute() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        this._setRotation(this.newAngle);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
        this.emit('object:rotate', {
            objectId: this.objectId,
            angle: this.newAngle
        });
        console.log(`üîÑ –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç ${this.objectId} –Ω–∞ ${this.newAngle}¬∞`);
    }

    undo() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        this._setRotation(this.oldAngle);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
        this.emit('object:rotate', {
            objectId: this.objectId,
            angle: this.oldAngle
        });
        console.log(`‚Ü©Ô∏è –û—Ç–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –æ–±—ä–µ–∫—Ç–∞ ${this.objectId}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ${this.oldAngle}¬∞`);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
     * @private
     */
    _setRotation(angle) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
        const objects = this.coreMoodboard.state.state.objects;
        const object = objects.find(obj => obj.id === this.objectId);
        if (object) {
            if (!object.transform) {
                object.transform = {};
            }
            object.transform.rotation = angle;
            this.coreMoodboard.state.markDirty();
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–æ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É—á–µ–∫)
        if (this.eventBus) {
            this.eventBus.emit('object:transform:updated', {
                objectId: this.objectId,
                type: 'rotation',
                rotation: angle
            });
        }
    }

    getDescription() {
        const delta = this.newAngle - this.oldAngle;
        return `–ü–æ–≤–æ—Ä–æ—Ç –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ ${delta.toFixed(1)}¬∞`;
    }
}
