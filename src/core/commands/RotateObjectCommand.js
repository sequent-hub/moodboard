/**
 * –ö–æ–º–∞–Ω–¥–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Undo/Redo
 */
import { BaseCommand } from './BaseCommand.js';

export class RotateObjectCommand extends BaseCommand {
    constructor(objectId, oldAngle, newAngle) {
        super();
        this.objectId = objectId;
        this.oldAngle = oldAngle;
        this.newAngle = newAngle;
    }

    execute() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
        this.emit('object:rotate', {
            objectId: this.objectId,
            angle: this.newAngle
        });
        console.log(`üîÑ –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç ${this.objectId} –Ω–∞ ${this.newAngle}¬∞`);
    }

    undo() {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
        this.emit('object:rotate', {
            objectId: this.objectId,
            angle: this.oldAngle
        });
        console.log(`‚Ü©Ô∏è –û—Ç–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –æ–±—ä–µ–∫—Ç–∞ ${this.objectId}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ${this.oldAngle}¬∞`);
    }

    getDescription() {
        const delta = this.newAngle - this.oldAngle;
        return `–ü–æ–≤–æ—Ä–æ—Ç –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ ${delta.toFixed(1)}¬∞`;
    }
}
