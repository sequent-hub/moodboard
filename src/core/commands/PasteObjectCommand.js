import { BaseCommand } from './BaseCommand.js';

/**
 * –ö–æ–º–∞–Ω–¥–∞ –≤—Å—Ç–∞–≤–∫–∏ –æ–±—ä–µ–∫—Ç–∞
 */
export class PasteObjectCommand extends BaseCommand {
    constructor(coreMoodboard, pastePosition = null) {
        super();
        this.coreMoodboard = coreMoodboard;
        this.pastePosition = pastePosition;
        this.newObjectId = null;
        this.newObjectData = null;
    }

    execute() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞
        if (!this.coreMoodboard.clipboard || this.coreMoodboard.clipboard.type !== 'object') {
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        const originalData = this.coreMoodboard.clipboard.data;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
        this.newObjectData = JSON.parse(JSON.stringify(originalData));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
        this.newObjectId = 'obj_' + Date.now() + '_copy';
        this.newObjectData.id = this.newObjectId;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ø–∏–π
        this.newObjectData.originalId = originalData.id;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏
        if (this.pastePosition) {
            this.newObjectData.position = { ...this.pastePosition };
        } else {
            // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Å–º–µ—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–æ–ø–∏–π —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ
            const existingObjects = this.coreMoodboard.state.state.objects;
            const originalId = originalData.id;
            
            // –ò—â–µ–º –≤—Å–µ –∫–æ–ø–∏–∏ —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            const copies = existingObjects.filter(obj => 
                obj.originalId === originalId || // –ö–æ–ø–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                (obj.id === originalId && obj.originalId) // –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–∞–º —è–≤–ª—è–µ—Ç—Å—è –∫–æ–ø–∏–µ–π
            );
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
            const offsetMultiplier = copies.length + 1;
            const offsetStep = 25; // –®–∞–≥ —Å–º–µ—â–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            
            console.log(`üìã –í—Å—Ç–∞–≤–∫–∞ –∫–æ–ø–∏–∏ –æ–±—ä–µ–∫—Ç–∞ ${originalId}: –Ω–∞–π–¥–µ–Ω–æ ${copies.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ø–∏–π, —Å–º–µ—â–µ–Ω–∏–µ ${offsetStep * offsetMultiplier}px`);
            
            this.newObjectData.position = {
                x: originalData.position.x + (offsetStep * offsetMultiplier),
                y: originalData.position.y + (offsetStep * offsetMultiplier)
            };
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ pivot –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if (!this.newObjectData.transform) {
            this.newObjectData.transform = {};
        }
        this.newObjectData.transform.pivotCompensated = false;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.coreMoodboard.state.addObject(this.newObjectData);
        
        // –°–æ–∑–¥–∞–µ–º PIXI –æ–±—ä–µ–∫—Ç
        this.coreMoodboard.pixi.createObject(this.newObjectData);
        
        this.emit('object:pasted', {
            originalId: originalData.id,
            newId: this.newObjectId,
            objectData: this.newObjectData
        });
    }

    undo() {
        if (this.newObjectId) {
            // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            this.coreMoodboard.state.removeObject(this.newObjectId);
            this.coreMoodboard.pixi.removeObject(this.newObjectId);
            
            this.emit('object:removed', {
                objectId: this.newObjectId
            });
        }
    }

    getDescription() {
        return `–í—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç`;
    }
}
