import { PixiEngine } from './PixiEngine.js';
import * as PIXI from 'pixi.js';
import { StateManager } from './StateManager.js';
import { EventBus } from './EventBus.js';
import { KeyboardManager } from './KeyboardManager.js';
import { SaveManager } from './SaveManager.js';
import { HistoryManager } from './HistoryManager.js';
import { ApiClient } from './ApiClient.js';
import { ImageUploadService } from '../services/ImageUploadService.js';
import { FileUploadService } from '../services/FileUploadService.js';
import { ToolManager } from '../tools/ToolManager.js';
import { SelectTool } from '../tools/object-tools/SelectTool.js';
import { CreateObjectCommand, DeleteObjectCommand, MoveObjectCommand, ResizeObjectCommand, PasteObjectCommand, GroupMoveCommand, GroupRotateCommand, GroupResizeCommand, ReorderZCommand, GroupReorderZCommand, EditFileNameCommand } from './commands/index.js';
import { BoardService } from '../services/BoardService.js';
import { ZoomPanController } from '../services/ZoomPanController.js';
import { ZOrderManager } from '../services/ZOrderManager.js';
import { FrameService } from '../services/FrameService.js';
import { Events } from './events/Events.js';
import { generateObjectId } from '../utils/objectIdGenerator.js';

export class CoreMoodBoard {
    constructor(container, options = {}) {
        this.container = typeof container === 'string'
            ? document.querySelector(container)
            : container;

        if (!this.container) {
            throw new Error('Container not found');
        }

        this.options = {
            boardId: null,
            autoSave: false,
            width: this.container.clientWidth || 800,
            height: this.container.clientHeight || 600,
            backgroundColor: 0xF5F5F5,
            ...options
        };

        // –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        this.destroyed = false;

        this.eventBus = new EventBus();
        this.state = new StateManager(this.eventBus);
        
        // –≠–∫—Å–ø–æ–Ω–∏—Ä—É–µ–º EventBus –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ ApiClient)
        if (typeof window !== 'undefined') {
            window.moodboardEventBus = this.eventBus;
        }
        this.pixi = new PixiEngine(this.container, this.eventBus, this.options);
        this.keyboard = new KeyboardManager(this.eventBus, document, this);
        this.saveManager = new SaveManager(this.eventBus, this.options);
        this.history = new HistoryManager(this.eventBus);
        this.apiClient = new ApiClient();
        this.imageUploadService = new ImageUploadService(this.apiClient, {
            requireCsrf: this.options.requireCsrf !== false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—Ä–µ–±—É–µ–º CSRF
            csrfToken: this.options.csrfToken
        });
        this.fileUploadService = new FileUploadService(this.apiClient, {
            requireCsrf: this.options.requireCsrf !== false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—Ä–µ–±—É–µ–º CSRF
            csrfToken: this.options.csrfToken
        });
        
        // –°–≤—è–∑—ã–≤–∞–µ–º SaveManager —Å ApiClient –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        this.saveManager.setApiClient(this.apiClient);
        this.toolManager = null; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ init()
        
        // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.dragStartPosition = null;
        
        // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        this.resizeStartSize = null;
        
        // –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏
        this.clipboard = null;

        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ init() - –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é
    }

    async init() {
        try {
            await this.pixi.init();
            this.keyboard.startListening(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            await this.initTools();

            // –°–µ—Ä–≤–∏—Å—ã –¥–æ—Å–∫–∏: —Å–µ—Ç–∫–∞/–º–∏–Ω–∏–∫–æ–º–∞–ø–∞, –∑—É–º, –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ—ë–≤, –ª–æ–≥–∏–∫–∞ —Ñ—Ä–µ–π–º–æ–≤
            this.boardService = new BoardService(this.eventBus, this.pixi);
            await this.boardService.init(() => (this.workspaceSize?.() || { width: this.options.width, height: this.options.height }));
            this.zoomPan = new ZoomPanController(this.eventBus, this.pixi);
            this.zoomPan.attach();
            this.zOrder = new ZOrderManager(this.eventBus, this.pixi, this.state);
            this.zOrder.attach();
            this.frameService = new FrameService(this.eventBus, this.pixi, this.state);
            this.frameService.attach();

            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –¥–æ—Å–∫—É –¥–ª—è –¥–µ–º–æ
            this.state.loadBoard({
                id: this.options.boardId || 'demo',
                name: 'Demo Board',
                objects: [],
                viewport: { x: 0, y: 0, zoom: 1 }
            });


        } catch (error) {
            console.error('MoodBoard init failed:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    async initTools() {
        // –ü–æ–ª—É—á–∞–µ–º canvas —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const canvasElement = this.pixi.app.view;
        // –•–µ–ª–ø–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ init)
        this.workspaceSize = () => ({ width: canvasElement.clientWidth, height: canvasElement.clientHeight });
        
        // –°–æ–∑–¥–∞–µ–º ToolManager
        this.toolManager = new ToolManager(this.eventBus, canvasElement, this.pixi.app, this);
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        const selectTool = new SelectTool(this.eventBus);
        this.toolManager.registerTool(selectTool);
        // –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏
        const panToolModule = await import('../tools/board-tools/PanTool.js');
        const panTool = new panToolModule.PanTool(this.eventBus);
        this.toolManager.registerTool(panTool);

        // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è (–∫–∞—Ä–∞–Ω–¥–∞—à)
        const drawingToolModule = await import('../tools/object-tools/DrawingTool.js');
        const drawingTool = new drawingToolModule.DrawingTool(this.eventBus);
        this.toolManager.registerTool(drawingTool);

        // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫–ª–∏–∫—É (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
        const placementToolModule = await import('../tools/object-tools/PlacementTool.js');
        const placementTool = new placementToolModule.PlacementTool(this.eventBus, this);
        this.toolManager.registerTool(placementTool);

        // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞
        const textToolModule = await import('../tools/object-tools/TextTool.js');
        const textTool = new textToolModule.TextTool(this.eventBus);
        this.toolManager.registerTool(textTool);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ selectTool –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É—á–µ–∫
        this.selectTool = selectTool;
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º SelectTool –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        console.log('üîß –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º SelectTool —Å PIXI app:', !!this.pixi.app);
        this.toolManager.activateTool('select');
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        this.setupToolEvents();
            this.setupKeyboardEvents();
        this.setupSaveEvents();
        this.setupHistoryEvents();
        

    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    setupToolEvents() {
        // –°–æ–±—ã—Ç–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.eventBus.on(Events.Tool.SelectionAdd, (data) => {

        });

        this.eventBus.on(Events.Tool.SelectionClear, (data) => {

        });

        // –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ) ‚Äî –ø–µ—Ä–µ–¥–∞–µ–º –≤–≤–µ—Ä—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        this.eventBus.on(Events.Tool.ContextMenuShow, (data) => {
            // –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è UI
            this.eventBus.emit(Events.UI.ContextMenuShow, {
                x: data.x,
                y: data.y,
                context: data.context, // 'canvas' | 'object' | 'group'
                targetId: data.targetId || null,
                items: [] // –ø–æ–∫–∞ –ø—É—Å—Ç–æ
            });
        });

        // –î–µ–π—Å—Ç–≤–∏—è –∏–∑ UI –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        this.eventBus.on(Events.UI.CopyObject, ({ objectId }) => {
            if (!objectId) return;
            this.copyObject(objectId);
        });

        this.eventBus.on(Events.UI.CopyGroup, () => {
            if (this.toolManager.getActiveTool()?.name !== 'select') return;
            const selected = Array.from(this.toolManager.getActiveTool().selectedObjects || []);
            if (selected.length <= 1) return;
            const objects = this.state.state.objects || [];
            const groupData = selected
                .map(id => objects.find(o => o.id === id))
                .filter(Boolean)
                .map(o => JSON.parse(JSON.stringify(o)));
            if (groupData.length === 0) return;
            this.clipboard = {
                type: 'group',
                data: groupData,
                meta: { pasteCount: 0 }
            };
        });

        this.eventBus.on(Events.UI.PasteAt, ({ x, y }) => {
            if (!this.clipboard) return;
            if (this.clipboard.type === 'object') {
                this.pasteObject({ x, y });
            } else if (this.clipboard.type === 'group') {
                // –í—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∏–∫–∞
                const group = this.clipboard;
                const data = Array.isArray(group.data) ? group.data : [];
                if (data.length === 0) return;
                // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ–ø-–ª–µ–≤—Ç –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è –∫–ª–∏–∫-—Ç–æ—á–∫–∏
                let minX = Infinity, minY = Infinity;
                data.forEach(o => {
                    if (!o || !o.position) return;
                    minX = Math.min(minX, o.position.x);
                    minY = Math.min(minY, o.position.y);
                });
                if (!isFinite(minX) || !isFinite(minY)) return;
                const baseX = minX, baseY = minY;
                const newIds = [];
                let pending = data.length;
                const onPasted = (payload) => {
                    if (!payload || !payload.newId) return;
                    newIds.push(payload.newId);
                    pending -= 1;
                    if (pending === 0) {
                        this.eventBus.off(Events.Object.Pasted, onPasted);
                        requestAnimationFrame(() => {
                            if (this.selectTool && newIds.length > 0) {
                                this.selectTool.setSelection(newIds);
                                this.selectTool.updateResizeHandles();
                            }
                        });
                    }
                };
                this.eventBus.on(Events.Object.Pasted, onPasted);
                data.forEach(orig => {
                    const cloned = JSON.parse(JSON.stringify(orig));
                    const targetPos = {
                        x: x + (cloned.position.x - baseX),
                        y: y + (cloned.position.y - baseY)
                    };
                    this.clipboard = { type: 'object', data: cloned };
                    const cmd = new PasteObjectCommand(this, targetPos);
                    cmd.setEventBus(this.eventBus);
                    this.history.executeCommand(cmd);
                });
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º clipboard –∫ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—Å—Ç–∞–≤–æ–∫
                this.clipboard = group;
            }
        });

        // –¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —ç–∫—Ä–∞–Ω–∞ (CSS-–ø–∏–∫—Å–µ–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
        this._cursor = { x: null, y: null };
        this.eventBus.on(Events.UI.CursorMove, ({ x, y }) => {
            this._cursor.x = x;
            this._cursor.y = y;
        });

        // –í—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ ‚Äî –ø–æ –∫—É—Ä—Å–æ—Ä—É, –µ—Å–ª–∏ –æ–Ω –Ω–∞–¥ —Ö–æ–ª—Å—Ç–æ–º; –∏–Ω–∞—á–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        this.eventBus.on(Events.UI.PasteImage, ({ src, name, imageId }) => {
            if (!src) return;
            const view = this.pixi.app.view;
            const world = this.pixi.worldLayer || this.pixi.app.stage;
            const s = world?.scale?.x || 1;
            const hasCursor = Number.isFinite(this._cursor.x) && Number.isFinite(this._cursor.y);
            
            let screenX, screenY;
            if (hasCursor) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
                screenX = this._cursor.x;
                screenY = this._cursor.y;
            } else {
                // –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
                screenX = view.clientWidth / 2;
                screenY = view.clientHeight / 2;
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∏—Ä–æ–≤—ã–µ (—Å —É—á–µ—Ç–æ–º zoom –∏ pan)
            const worldX = (screenX - (world?.x || 0)) / s;
            const worldY = (screenY - (world?.y || 0)) / s;
            
            // –¶–µ–Ω—Ç—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏ –≤—Å—Ç–∞–≤–∫–∏
            const properties = { src, name, width: 300, height: 200 };
            const extraData = imageId ? { imageId } : {};
            this.createObject('image', { x: Math.round(worldX - 150), y: Math.round(worldY - 100) }, properties, extraData);
        });

        // –í—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –∫–ª–∏–∫—É (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ)
        this.eventBus.on(Events.UI.PasteImageAt, ({ x, y, src, name, imageId }) => {
            if (!src) return;
            const world = this.pixi.worldLayer || this.pixi.app.stage;
            const s = world?.scale?.x || 1;
            const worldX = (x - (world?.x || 0)) / s;
            const worldY = (y - (world?.y || 0)) / s;
            const properties = { src, name, width: 300, height: 200 };
            const extraData = imageId ? { imageId } : {};
            this.createObject('image', { x: Math.round(worldX - 150), y: Math.round(worldY - 100) }, properties, extraData);
        });

        // –°–ª–æ–π–Ω–æ—Å—Ç—å: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
        const applyZOrderFromState = () => {
            const arr = this.state.state.objects || [];
            this.pixi.app.stage.sortableChildren = true;
            for (let i = 0; i < arr.length; i++) {
                const id = arr[i]?.id;
                const pixi = id ? this.pixi.objects.get(id) : null;
                if (pixi) pixi.zIndex = i;
            }
        };

        const reorderInState = (id, mode) => {
            const arr = this.state.state.objects || [];
            const index = arr.findIndex(o => o.id === id);
            if (index === -1) return;
            const [item] = arr.splice(index, 1);
            switch (mode) {
                case 'front':
                    arr.push(item);
                    break;
                case 'back':
                    arr.unshift(item);
                    break;
                case 'forward':
                    arr.splice(Math.min(index + 1, arr.length), 0, item);
                    break;
                case 'backward':
                    arr.splice(Math.max(index - 1, 0), 0, item);
                    break;
            }
            applyZOrderFromState();
            this.state.markDirty();
        };

        const bringToFront = (id) => reorderInState(id, 'front');
        const sendToBack = (id) => reorderInState(id, 'back');
        const bringForward = (id) => reorderInState(id, 'forward');
        const sendBackward = (id) => reorderInState(id, 'backward');

        this.eventBus.on(Events.UI.LayerBringToFront, ({ objectId }) => {
            const arr = this.state.state.objects || [];
            const from = arr.findIndex(o => o.id === objectId);
            if (from === -1) return;
            const to = arr.length - 1;
            if (from === to) return;
            const cmd = new ReorderZCommand(this, objectId, from, to);
            cmd.setEventBus(this.eventBus);
            this.history.executeCommand(cmd);
        });
        this.eventBus.on(Events.UI.LayerBringForward, ({ objectId }) => {
            const arr = this.state.state.objects || [];
            const from = arr.findIndex(o => o.id === objectId);
            if (from === -1) return;
            const to = Math.min(from + 1, arr.length - 1);
            if (from === to) return;
            const cmd = new ReorderZCommand(this, objectId, from, to);
            cmd.setEventBus(this.eventBus);
            this.history.executeCommand(cmd);
        });
        this.eventBus.on(Events.UI.LayerSendBackward, ({ objectId }) => {
            const arr = this.state.state.objects || [];
            const from = arr.findIndex(o => o.id === objectId);
            if (from === -1) return;
            const to = Math.max(from - 1, 0);
            if (from === to) return;
            const cmd = new ReorderZCommand(this, objectId, from, to);
            cmd.setEventBus(this.eventBus);
            this.history.executeCommand(cmd);
        });
        this.eventBus.on(Events.UI.LayerSendToBack, ({ objectId }) => {
            const arr = this.state.state.objects || [];
            const from = arr.findIndex(o => o.id === objectId);
            if (from === -1) return;
            const to = 0;
            if (from === to) return;
            const cmd = new ReorderZCommand(this, objectId, from, to);
            cmd.setEventBus(this.eventBus);
            this.history.executeCommand(cmd);
        });

        // –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ—è: –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≥—Ä—É–ø–ø—É –∫–∞–∫ –µ–¥–∏–Ω—ã–π –±–ª–æ–∫, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫
        const getSelection = () => {
            const ids = this.toolManager.getActiveTool()?.name === 'select'
                ? Array.from(this.toolManager.getActiveTool().selectedObjects || [])
                : [];
            return ids;
        };
        const reorderGroupInState = (ids, mode) => {
            const arr = this.state.state.objects || [];
            if (ids.length === 0 || arr.length === 0) return;
            const selectedSet = new Set(ids);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            const selectedItems = arr.filter(o => selectedSet.has(o.id));
            const others = arr.filter(o => !selectedSet.has(o.id));
            // –ü–æ–∑–∏—Ü–∏—è –±–ª–æ–∫–∞ —Å—Ä–µ–¥–∏ "others" —Ä–∞–≤–Ω–∞ —á–∏—Å–ª—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            const indices = arr.map((o, i) => ({ id: o.id, i })).filter(p => selectedSet.has(p.id)).map(p => p.i).sort((a,b)=>a-b);
            const minIdx = indices[0];
            const othersBefore = arr.slice(0, minIdx).filter(o => !selectedSet.has(o.id)).length;
            let insertPos = othersBefore;
            switch (mode) {
                case 'front':
                    insertPos = others.length; // –≤ –∫–æ–Ω–µ—Ü
                    break;
                case 'back':
                    insertPos = 0; // –≤ –Ω–∞—á–∞–ª–æ
                    break;
                case 'forward':
                    insertPos = Math.min(othersBefore + 1, others.length);
                    break;
                case 'backward':
                    insertPos = Math.max(othersBefore - 1, 0);
                    break;
            }
            const newArr = [...others.slice(0, insertPos), ...selectedItems, ...others.slice(insertPos)];
            this.state.state.objects = newArr;
            applyZOrderFromState();
            this.state.markDirty();
        };
        this.eventBus.on(Events.UI.LayerGroupBringToFront, () => {
            const ids = getSelection();
            if (ids.length === 0) return;
            const cmd = new GroupReorderZCommand(this, ids, 'front');
            cmd.setEventBus(this.eventBus);
            this.history.executeCommand(cmd);
        });
        this.eventBus.on(Events.UI.LayerGroupBringForward, () => {
            const ids = getSelection();
            if (ids.length === 0) return;
            const cmd = new GroupReorderZCommand(this, ids, 'forward');
            cmd.setEventBus(this.eventBus);
            this.history.executeCommand(cmd);
        });
        this.eventBus.on(Events.UI.LayerGroupSendBackward, () => {
            const ids = getSelection();
            if (ids.length === 0) return;
            const cmd = new GroupReorderZCommand(this, ids, 'backward');
            cmd.setEventBus(this.eventBus);
            this.history.executeCommand(cmd);
        });
        this.eventBus.on(Events.UI.LayerGroupSendToBack, () => {
            const ids = getSelection();
            if (ids.length === 0) return;
            const cmd = new GroupReorderZCommand(this, ids, 'back');
            cmd.setEventBus(this.eventBus);
            this.history.executeCommand(cmd);
        });

        // –°–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.eventBus.on(Events.Tool.DragStart, (data) => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –ª–µ–≤—ã–π-–≤–µ—Ä—Ö, –ø–µ—Ä–µ–≤–æ–¥—è —Ü–µ–Ω—Ç—Ä PIXI –≤ state-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            const pixiObject = this.pixi.objects.get(data.object);
            if (pixiObject) {
                const halfW = (pixiObject.width || 0) / 2;
                const halfH = (pixiObject.height || 0) / 2;
                this.dragStartPosition = { x: pixiObject.x - halfW, y: pixiObject.y - halfH };
            }

            // –§—Ä–µ–π–º-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ FrameService
        });

        // –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞
        this.eventBus.on(Events.Tool.PanUpdate, ({ delta }) => {
            // –°–º–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ worldLayer, —Å–µ—Ç–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫ —ç–∫—Ä–∞–Ω—É
            if (this.pixi.worldLayer) {
                this.pixi.worldLayer.x += delta.x;
                this.pixi.worldLayer.y += delta.y;
            } else {
                const stage = this.pixi.app.stage;
                stage.x += delta.x;
                stage.y += delta.y;
            }
        });

        // –ú–∏–Ω–∏–∫–∞—Ä—Ç–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ BoardService

        // –ó—É–º –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ ZoomPanController

        // –ò–Ω–≤–∞—Ä–∏–∞–Ω—Ç —Å–ª–æ—ë–≤ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ ZOrderManager

        // –ö–Ω–æ–ø–∫–∏ –∑—É–º–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ ZoomPanController
        this.eventBus.on(Events.UI.ZoomSelection, () => {
            // Zoom to selection: –±–µ—Ä–µ–º bbox –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö
            const selected = this.selectTool ? Array.from(this.selectTool.selectedObjects || []) : [];
            if (!selected || selected.length === 0) return;
            const objs = this.state.state.objects || [];
            let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
            for (const o of objs) {
                if (!selected.includes(o.id)) continue;
                minX = Math.min(minX, o.position.x);
                minY = Math.min(minY, o.position.y);
                maxX = Math.max(maxX, o.position.x + (o.width || 0));
                maxY = Math.max(maxY, o.position.y + (o.height || 0));
            }
            if (!isFinite(minX)) return;
            const bboxW = Math.max(1, maxX - minX);
            const bboxH = Math.max(1, maxY - minY);
            const viewW = this.pixi.app.view.clientWidth;
            const viewH = this.pixi.app.view.clientHeight;
            const padding = 40;
            const scaleX = (viewW - padding) / bboxW;
            const scaleY = (viewH - padding) / bboxH;
            const newScale = Math.max(0.1, Math.min(5, Math.min(scaleX, scaleY)));
            const world = this.pixi.worldLayer || this.pixi.app.stage;
            const worldCenterX = minX + bboxW / 2;
            const worldCenterY = minY + bboxH / 2;
            world.scale.set(newScale);
            world.x = viewW / 2 - worldCenterX * newScale;
            world.y = viewH / 2 - worldCenterY * newScale;
            this.eventBus.emit(Events.UI.ZoomPercent, { percentage: Math.round(newScale * 100) });
        });

        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω–∏–∫–∞—Ä—Ç—ã (bbox –æ–±—ä–µ–∫—Ç–æ–≤, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∏—Ä–∞, —Ä–∞–∑–º–µ—Ä—ã –≤—å—é–ø–æ—Ä—Ç–∞)
        this.eventBus.on(Events.UI.MinimapGetData, (data) => {
            const world = this.pixi.worldLayer || this.pixi.app.stage;
            const view = this.pixi.app.view;
            const scale = world?.scale?.x || 1;

            // –û–±—ä–µ–∫—Ç—ã –±–µ—Ä—ë–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ª–µ–≤—ã–π-–≤–µ—Ä—Ö + —à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞) –∏ —É–≥–æ–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
            const objects = (this.state.state.objects || []).map((o) => ({
                id: o.id,
                x: o.position?.x ?? 0,
                y: o.position?.y ?? 0,
                width: o.width ?? 0,
                height: o.height ?? 0,
                rotation: o.rotation ?? (o.transform?.rotation ?? 0)
            }));

            data.world = { x: world.x || 0, y: world.y || 0, scale };
            data.view = { width: view.clientWidth, height: view.clientHeight };
            data.objects = objects;
        });

        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–∞ –Ω–∞ —Ç–æ—á–∫–µ –∏–∑ –º–∏–Ω–∏–∫–∞—Ä—Ç—ã (world coords)
        this.eventBus.on(Events.UI.MinimapCenterOn, ({ worldX, worldY }) => {
            const world = this.pixi.worldLayer || this.pixi.app.stage;
            const view = this.pixi.app.view;
            const s = world?.scale?.x || 1;
            world.x = view.clientWidth / 2 - worldX * s;
            world.y = view.clientHeight / 2 - worldY * s;
        });

        // === –ì–†–£–ü–ü–û–í–û–ï –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–ï ===
        this.eventBus.on(Events.Tool.GroupDragStart, (data) => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
            this._groupDragStart = new Map();
            for (const id of data.objects) {
                const pixiObject = this.pixi.objects.get(id);
                if (pixiObject) this._groupDragStart.set(id, { x: pixiObject.x, y: pixiObject.y });
            }
        });

        this.eventBus.on(Events.Tool.GroupDragUpdate, (data) => {
            const { dx, dy } = data.delta;
            for (const id of data.objects) {
                const pixiObject = this.pixi.objects.get(id);
                if (!pixiObject) continue;
                // –°–º–µ—â–∞–µ–º —Ü–µ–Ω—Ç—Ä (PIXI —Ö—Ä–∞–Ω–∏—Ç x/y –ø–æ —Ü–µ–Ω—Ç—Ä—É –ø—Ä–∏ pivot/anchor)
                const startCenter = this._groupDragStart.get(id) || { x: pixiObject.x, y: pixiObject.y };
                const newCenter = { x: startCenter.x + dx, y: startCenter.y + dy };
                pixiObject.x = newCenter.x;
                pixiObject.y = newCenter.y;
                // –û–±–Ω–æ–≤–ª—è–µ–º state –∫–∞–∫ –ª–µ–≤—ã–π-–≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                const obj = this.state.state.objects.find(o => o.id === id);
                if (obj) {
                    const halfW = (pixiObject.width || 0) / 2;
                    const halfH = (pixiObject.height || 0) / 2;
                    obj.position.x = newCenter.x - halfW;
                    obj.position.y = newCenter.y - halfH;
                }
            }
            this.state.markDirty();
        });

        this.eventBus.on(Events.Tool.GroupDragEnd, (data) => {
            // –°–æ–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω –±–∞—Ç—á –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            const moves = [];
            for (const id of data.objects) {
                const start = this._groupDragStart?.get(id);
                const pixiObject = this.pixi.objects.get(id);
                if (!start || !pixiObject) continue;
                const finalPosition = { x: pixiObject.x, y: pixiObject.y };
                if (start.x !== finalPosition.x || start.y !== finalPosition.y) {
                    moves.push({ id, from: start, to: finalPosition });
                }
            }
            if (moves.length > 0) {
                const cmd = new GroupMoveCommand(this, moves);
                cmd.setEventBus(this.eventBus);
                this.history.executeCommand(cmd);
            }
            this._groupDragStart = null;
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        this.eventBus.on(Events.Tool.ObjectsDelete, ({ objects }) => {
            const ids = Array.isArray(objects) ? objects : [];
            ids.forEach((id) => this.deleteObject(id));
        });

        this.eventBus.on(Events.Tool.DragUpdate, (data) => {
            // –í–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
            this.updateObjectPositionDirect(data.object, data.position);
            // Hover-–ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Ñ—Ä–µ–π–º–æ–≤ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ FrameService
        });

        this.eventBus.on(Events.Tool.DragEnd, (data) => {

            // –í –∫–æ–Ω—Ü–µ —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            if (this.dragStartPosition) {
                const pixiObject = this.pixi.objects.get(data.object);
                if (pixiObject) {
                    const finalPosition = { x: pixiObject.x - (pixiObject.width||0)/2, y: pixiObject.y - (pixiObject.height||0)/2 };
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                    if (this.dragStartPosition.x !== finalPosition.x || 
                        this.dragStartPosition.y !== finalPosition.y) {
                        
                        const moved = this.state.state.objects.find(o => o.id === data.object);
                        if (moved && moved.type === 'frame') {
                            // –ì—Ä—É–ø–ø–æ–≤–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–ª—è —Ñ—Ä–µ–π–º–∞ –∏ –µ–≥–æ –¥–µ—Ç–µ–π
                            const attachments = this._getFrameChildren(moved.id);
                            const moves = [];
                            // —Å–∞–º —Ñ—Ä–µ–π–º
                            moves.push({ id: moved.id, from: this.dragStartPosition, to: finalPosition });
                            // –¥–µ—Ç–∏
                            const dx = finalPosition.x - this.dragStartPosition.x;
                            const dy = finalPosition.y - this.dragStartPosition.y;
                            for (const childId of attachments) {
                                const child = this.state.state.objects.find(o => o.id === childId);
                                if (!child) continue;
                                const start = this._frameDragChildStart?.get(childId);
                                const from = start ? { x: start.x, y: start.y } : { x: (child.position.x - dx), y: (child.position.y - dy) };
                                const to = { x: child.position.x, y: child.position.y };
                                moves.push({ id: childId, from, to });
                            }
                            const cmd = new GroupMoveCommand(this, moves);
                            cmd.setEventBus(this.eventBus);
                            this.history.executeCommand(cmd);
                        } else {
                            const command = new MoveObjectCommand(
                                this, 
                                data.object, 
                                this.dragStartPosition, 
                                finalPosition
                            );
                            command.setEventBus(this.eventBus);
                            this.history.executeCommand(command);
                        }
                    }
                }
                this.dragStartPosition = null;
            }

            // –ü–æ—Å–ª–µ –ª—é–±–æ–≥–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è: –ª–æ–≥–∏–∫–∞ —Ñ—Ä–µ–π–º–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ FrameService
        });

        // === –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –ß–ï–†–ï–ó ALT-–ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–ï ===
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞ –æ—Ç SelectTool
        this.eventBus.on(Events.Tool.DuplicateRequest, (data) => {
            const { originalId, position } = data || {};
            if (!originalId) return;
            // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            const objects = this.state.state.objects;
            const original = objects.find(obj => obj.id === originalId);
            if (!original) return;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PasteObjectCommand
            this.clipboard = {
                type: 'object',
                data: JSON.parse(JSON.stringify(original))
            };

            // –í—ã–∑—ã–≤–∞–µ–º –≤—Å—Ç–∞–≤–∫—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π (—Ç–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è ID –∏ –ø—Ä.)
            this.pasteObject(position);
        });

        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        this.eventBus.on(Events.Tool.GroupDuplicateRequest, (data) => {
            const originals = (data.objects || []).filter((id) => this.state.state.objects.some(o => o.id === id));
            const total = originals.length;
            if (total === 0) {
                this.eventBus.emit(Events.Tool.GroupDuplicateReady, { map: {} });
                return;
            }
            const idMap = {};
            let remaining = total;
            const tempHandlers = new Map();
            const onPasted = (originalId) => (payload) => {
                if (payload.originalId !== originalId) return;
                idMap[originalId] = payload.newId;
                // –°–Ω—è—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è
                const h = tempHandlers.get(originalId);
                if (h) this.eventBus.off(Events.Object.Pasted, h);
                remaining -= 1;
                if (remaining === 0) {
                    this.eventBus.emit(Events.Tool.GroupDuplicateReady, { map: idMap });
                }
            };
            // –î—É–±–ª–∏—Ä—É–µ–º –ø–æ –æ–¥–Ω–æ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ
            for (const originalId of originals) {
                const obj = this.state.state.objects.find(o => o.id === originalId);
                if (!obj) continue;
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç –∏–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                const handler = onPasted(originalId);
                tempHandlers.set(originalId, handler);
                this.eventBus.on(Events.Object.Pasted, handler);
                // –ö–ª–∞–¥–µ–º –≤ clipboard –æ–±—ä–µ–∫—Ç, –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ–º PasteObjectCommand —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π
                this.clipboard = { type: 'object', data: JSON.parse(JSON.stringify(obj)) };
                const cmd = new PasteObjectCommand(this, { x: obj.position.x, y: obj.position.y });
                cmd.setEventBus(this.eventBus);
                this.history.executeCommand(cmd);
            }
        });

        // –ö–æ–≥–¥–∞ –æ–±—ä–µ–∫—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω (–∏–∑ PasteObjectCommand) ‚Äî —Å–æ–æ–±—â–∞–µ–º SelectTool
        this.eventBus.on(Events.Object.Pasted, ({ originalId, newId }) => {
            this.eventBus.emit(Events.Tool.DuplicateReady, { originalId, newId });
        });

        // –°–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        this.eventBus.on(Events.Tool.ResizeStart, (data) => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            const objects = this.state.getObjects();
            const object = objects.find(obj => obj.id === data.object);
            if (object) {
                this.resizeStartSize = { width: object.width, height: object.height };
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Å–∞–π–∑–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞
                this._activeResize = {
                    objectId: data.object,
                    handle: data.handle,
                    startSize: { width: object.width, height: object.height },
                    startPosition: { x: object.position.x, y: object.position.y }
                };
            }
        });

        // === –ì–†–£–ü–ü–û–í–û–ô RESIZE ===
        this.eventBus.on(Events.Tool.GroupResizeStart, (data) => {
            this._groupResizeStart = data.startBounds || null;
            // –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ end
            this._groupResizeSnapshot = new Map();
            for (const id of data.objects) {
                const obj = this.state.state.objects.find(o => o.id === id);
                const pixiObj = this.pixi.objects.get(id);
                if (!obj || !pixiObj) continue;
                this._groupResizeSnapshot.set(id, {
                    size: { width: obj.width, height: obj.height },
                    // –ü–æ–∑–∏—Ü–∏—é –±–µ—Ä–µ–º –∏–∑ PIXI (—Ü–µ–Ω—Ç—Ä —Å —É—á–µ—Ç–æ–º pivot), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–º–µ—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ—Å–∞–π–∑–µ
                    position: { x: pixiObj.x, y: pixiObj.y },
                    type: obj.type || null
                });
            }
        });

        this.eventBus.on(Events.Tool.GroupResizeUpdate, (data) => {
            const { startBounds, newBounds, scale } = data;
            const sx = scale?.x ?? (newBounds.width / startBounds.width);
            const sy = scale?.y ?? (newBounds.height / startBounds.height);
            const startLeft = startBounds.x;
            const startTop = startBounds.y;
            for (const id of data.objects) {
                const snap = this._groupResizeSnapshot?.get(id);
                if (!snap) continue;
                // –í—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π (snapshot), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
                const pixiAtStart = snap.position; // —Ü–µ–Ω—Ç—Ä —Å —É—á–µ—Ç–æ–º pivot
                // –ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–Ω—Ç—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ä–∞–º–∫–∏, –∞ –∑–∞—Ç–µ–º –Ω–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä
                const relCenterX = pixiAtStart.x - (startLeft + startBounds.width / 2);
                const relCenterY = pixiAtStart.y - (startTop + startBounds.height / 2);
                const newCenter = {
                    x: newBounds.x + newBounds.width / 2 + relCenterX * sx,
                    y: newBounds.y + newBounds.height / 2 + relCenterY * sy
                };
                const newSize = {
                    width: Math.max(10, snap.size.width * sx),
                    height: Math.max(10, snap.size.height * sy)
                };
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –≤ –ª–µ–≤—ã–π –≤–µ—Ä—Ö –¥–ª—è state/PIXI (–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º x/y –∫–∞–∫ –ª–µ–≤—ã–π –≤–µ—Ä—Ö)
                const newPos = { x: newCenter.x - newSize.width / 2, y: newCenter.y - newSize.height / 2 };
                this.updateObjectSizeAndPositionDirect(id, newSize, newPos, snap.type || null);
            }
        });

        this.eventBus.on(Events.Tool.GroupResizeEnd, (data) => {
            // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–∞—Ç—á-–∫–æ–º–∞–Ω–¥—É GroupResizeCommand
            const changes = [];
            for (const id of data.objects) {
                const before = this._groupResizeSnapshot?.get(id);
                const obj = this.state.state.objects.find(o => o.id === id);
                if (!before || !obj) continue;
                const afterSize = { width: obj.width, height: obj.height };
                const afterPos = { x: obj.position.x, y: obj.position.y };
                if (before.size.width !== afterSize.width || before.size.height !== afterSize.height || before.position.x !== afterPos.x || before.position.y !== afterPos.y) {
                    changes.push({ id, fromSize: before.size, toSize: afterSize, fromPos: before.position, toPos: afterPos, type: before.type });
                }
            }
            if (changes.length > 0) {
                const cmd = new GroupResizeCommand(this, changes);
                cmd.setEventBus(this.eventBus);
                this.history.executeCommand(cmd);
            }
            this._groupResizeStart = null;
            this._groupResizeSnapshot = null;
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ä–∞–º–∫–∏ —Å —Ä—É—á–∫–∞–º–∏
            if (this.selectTool && this.selectTool.selectedObjects.size > 1) {
                this.selectTool.updateResizeHandles();
            }
        });

        this.eventBus.on(Events.Tool.ResizeUpdate, (data) => {
            // –í–æ –≤—Ä–µ–º—è resize –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
            const objects = this.state.getObjects();
            const object = objects.find(obj => obj.id === data.object);
            const objectType = object ? object.type : null;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –¥–ª—è —Ñ—Ä–µ–π–º–æ–≤, –∫—Ä–æ–º–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö (lockedAspect=false)
            if (objectType === 'frame' && data.size) {
                const lockedAspect = !!(object?.properties && (object.properties.lockedAspect === true));
                if (!lockedAspect) {
                    // –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Ñ—Ä–µ–π–º—ã ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                } else {
                const start = this._activeResize?.startSize || { width: object.width, height: object.height };
                const aspect = (start.width > 0 && start.height > 0) ? (start.width / start.height) : (object.width / Math.max(1, object.height));
                let w = Math.max(1, data.size.width);
                let h = Math.max(1, data.size.height);
                // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –ø–æ –∏–∑–º–µ–Ω—è–µ–º–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
                // –û–ø—Ä–µ–¥–µ–ª–∏–º, –∫–∞–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å–∏–ª—å–Ω–µ–µ
                const dw = Math.abs(w - start.width);
                const dh = Math.abs(h - start.height);
                if (dw >= dh) {
                    h = Math.round(w / aspect);
                } else {
                    w = Math.round(h * aspect);
                }
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å —Ñ—Ä–µ–π–º–∞ ~1800px¬≤
                const minArea = 1800;
                const area = Math.max(1, w * h);
                if (area < minArea) {
                    const scale = Math.sqrt(minArea / area);
                    w = Math.round(w * scale);
                    h = Math.round(h * scale);
                }
                data.size = { width: w, height: h };

                // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–≤–µ—Å—Ç–Ω–∞ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞) ‚Äî –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ—ë
                if (!data.position && this._activeResize && this._activeResize.objectId === data.object) {
                    const hndl = (this._activeResize.handle || '').toLowerCase();
                    const startPos = this._activeResize.startPosition;
                    const sw = this._activeResize.startSize.width;
                    const sh = this._activeResize.startSize.height;
                    let x = startPos.x;
                    let y = startPos.y;
                    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                    if (hndl.includes('w')) { x = startPos.x + (sw - w); }
                    if (hndl.includes('n')) { y = startPos.y + (sh - h); }
                    // –°–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–æ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ–π –æ—Å–∏ –¥–ª—è edge-—Ö—ç–Ω–¥–ª–æ–≤
                    const isEdge = ['n','s','e','w'].includes(hndl);
                    if (isEdge) {
                        if (hndl === 'n' || hndl === 's') {
                            // –í–≤–µ—Ä—Ö/–≤–Ω–∏–∑: –≤–µ—Ä—Ö –∏–ª–∏ –Ω–∏–∑ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è, —à–∏—Ä–∏–Ω–∞ –º–µ–Ω—è–µ—Ç—Å—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
                            x = startPos.x + Math.round((sw - w) / 2);
                        } else if (hndl === 'e' || hndl === 'w') {
                            // –í–ø—Ä–∞–≤–æ/–≤–ª–µ–≤–æ: –ª–µ–≤–∞—è –∏–ª–∏ –ø—Ä–∞–≤–∞—è —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è, –≤—ã—Å–æ—Ç–∞ –º–µ–Ω—è–µ—Ç—Å—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
                            y = startPos.y + Math.round((sh - h) / 2);
                        }
                    }
                    data.position = { x: Math.round(x), y: Math.round(y) };
                }
                }
            }

            // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –ø—Ä–∏—à–ª–∞ –∏–∑ UI, –≤—ã—á–∏—Å–ª–∏–º –µ—ë –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä—É—á–∫–∏
            let position = data.position;
            if (!position && this._activeResize && this._activeResize.objectId === data.object) {
                const h = (this._activeResize.handle || '').toLowerCase();
                const start = this._activeResize.startPosition;
                const startSize = this._activeResize.startSize;
                const dw = (data.size?.width || startSize.width) - startSize.width;
                const dh = (data.size?.height || startSize.height) - startSize.height;
                let nx = start.x;
                let ny = start.y;
                // –î–ª—è –ª–µ–≤—ã—Ö/–≤–µ—Ä—Ö–Ω–∏—Ö —Ä—É—á–µ–∫ —Å–º–µ—â–∞–µ–º —Ç–æ–ø-–ª–µ–≤ –Ω–∞ –ø–æ–ª–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if (h.includes('w')) nx = start.x + dw;
                if (h.includes('n')) ny = start.y + dh;
                // –î–ª—è –ø—Ä–∞–≤—ã—Ö/–Ω–∏–∂–Ω–∏—Ö —Ä—É—á–µ–∫ —Ç–æ–ø-–ª–µ–≤ –æ—Å—Ç–∞—ë—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤—ã–º (nx, ny —É–∂–µ —Ä–∞–≤–Ω—ã start)
                position = { x: nx, y: ny };
            }

            // –î–ª—è —Ñ—Ä–µ–π–º–æ–≤ —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º –∞—Å–ø–µ–∫—Ç–æ–º —Ç–∞–∫–∂–µ –æ–±–µ—Å–ø–µ—á–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å
            if (objectType === 'frame' && data.size) {
                const minArea = 1800;
                const w0 = Math.max(1, data.size.width);
                const h0 = Math.max(1, data.size.height);
                const area0 = w0 * h0;
                if (area0 < minArea) {
                    const scale = Math.sqrt(minArea / Math.max(1, area0));
                    const w = Math.round(w0 * scale);
                    const h = Math.round(h0 * scale);
                    data.size = { width: w, height: h };
                    // –ø–æ–∑–∏—Ü–∏—è –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∏–∂–µ –æ–±—â–µ–π –ª–æ–≥–∏–∫–æ–π (—É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –≤—ã—à–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                }
            }

            this.updateObjectSizeAndPositionDirect(data.object, data.size, position, objectType);
        });

        this.eventBus.on(Events.Tool.ResizeEnd, (data) => {
            // –í –∫–æ–Ω—Ü–µ —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            if (this.resizeStartSize && data.oldSize && data.newSize) {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –¥–ª—è —Ñ—Ä–µ–π–º–æ–≤ (–µ—Å–ª–∏ lockedAspect=true)
                const objects = this.state.getObjects();
                const object = objects.find(obj => obj.id === data.object);
                const objectType = object ? object.type : null;
                if (objectType === 'frame' && !!(object?.properties && object.properties.lockedAspect === true)) {
                    const start = this._activeResize?.startSize || { width: object.width, height: object.height };
                    const aspect = (start.width > 0 && start.height > 0) ? (start.width / start.height) : (object.width / Math.max(1, object.height));
                    let w = Math.max(1, data.newSize.width);
                    let h = Math.max(1, data.newSize.height);
                    const dw = Math.abs(w - start.width);
                    const dh = Math.abs(h - start.height);
                    if (dw >= dh) { h = Math.round(w / aspect); } else { w = Math.round(h * aspect); }
                    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å —Ñ—Ä–µ–π–º–∞ ~1800px¬≤
                    const minArea = 1800;
                    const area = Math.max(1, w * h);
                    if (area < minArea) {
                        const scale = Math.sqrt(minArea / area);
                        w = Math.round(w * scale);
                        h = Math.round(h * scale);
                    }
                    data.newSize = { width: w, height: h };
                    if (!data.newPosition && this._activeResize && this._activeResize.objectId === data.object) {
                        const hndl = (this._activeResize.handle || '').toLowerCase();
                        const startPos = this._activeResize.startPosition;
                        const sw = this._activeResize.startSize.width;
                        const sh = this._activeResize.startSize.height;
                        let x = startPos.x;
                        let y = startPos.y;
                        if (hndl.includes('w')) { x = startPos.x + (sw - w); }
                        if (hndl.includes('n')) { y = startPos.y + (sh - h); }
                        const isEdge = ['n','s','e','w'].includes(hnl = hndl);
                        if (isEdge) {
                            if (hnl === 'n' || hnl === 's') {
                                x = startPos.x + Math.round((sw - w) / 2);
                            } else if (hnl === 'e' || hnl === 'w') {
                                y = startPos.y + Math.round((sh - h) / 2);
                            }
                        }
                        data.newPosition = { x: Math.round(x), y: Math.round(y) };
                    }
                }
                // –î–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤ —Ç–∞–∫–∂–µ –æ–±–µ—Å–ø–µ—á–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å
                if (objectType === 'frame' && data.newSize && !(object?.properties && object.properties.lockedAspect === true)) {
                    const minArea = 1800;
                    const w0 = Math.max(1, data.newSize.width);
                    const h0 = Math.max(1, data.newSize.height);
                    const area0 = w0 * h0;
                    if (area0 < minArea) {
                        const scale = Math.sqrt(minArea / Math.max(1, area0));
                        const w = Math.round(w0 * scale);
                        const h = Math.round(h0 * scale);
                        data.newSize = { width: w, height: h };
                        if (!data.newPosition && this._activeResize && this._activeResize.objectId === data.object) {
                            const hndl2 = (this._activeResize.handle || '').toLowerCase();
                            const startPos2 = this._activeResize.startPosition;
                            const sw2 = this._activeResize.startSize.width;
                            const sh2 = this._activeResize.startSize.height;
                            let x2 = startPos2.x;
                            let y2 = startPos2.y;
                            if (hndl2.includes('w')) { x2 = startPos2.x + (sw2 - w); }
                            if (hndl2.includes('n')) { y2 = startPos2.y + (sh2 - h); }
                            data.newPosition = { x: Math.round(x2), y: Math.round(y2) };
                        }
                    }
                }
                // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                if (data.oldSize.width !== data.newSize.width || 
                    data.oldSize.height !== data.newSize.height) {
                    
                    console.log(`üìù –°–æ–∑–¥–∞–µ–º ResizeObjectCommand:`, {
                        object: data.object,
                        oldSize: data.oldSize,
                        newSize: data.newSize,
                        oldPosition: data.oldPosition,
                        newPosition: data.newPosition
                    });
                    
                    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: –µ—Å–ª–∏ UI –Ω–µ –ø–µ—Ä–µ–¥–∞–ª, –≤—ã—á–∏—Å–ª–∏–º
                    let oldPos = data.oldPosition;
                    let newPos = data.newPosition;
                    if ((!oldPos || !newPos) && this._activeResize && this._activeResize.objectId === data.object) {
                        const h = (this._activeResize.handle || '').toLowerCase();
                        const start = this._activeResize.startPosition;
                        const startSize = this._activeResize.startSize;
                        const dw = (data.newSize?.width || startSize.width) - startSize.width;
                        const dh = (data.newSize?.height || startSize.height) - startSize.height;
                        const calcNew = { x: start.x + (h.includes('w') ? dw : 0), y: start.y + (h.includes('n') ? dh : 0) };
                        if (!oldPos) oldPos = { x: start.x, y: start.y };
                        if (!newPos) newPos = calcNew;
                    }
                    const command = new ResizeObjectCommand(
                        this, 
                        data.object, 
                        data.oldSize, 
                        data.newSize,
                        oldPos,
                        newPos
                    );
                    command.setEventBus(this.eventBus);
                    this.history.executeCommand(command);
                }
            }
            this.resizeStartSize = null;
            this._activeResize = null;
        });

        // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –í–†–ê–©–ï–ù–ò–Ø ===
        
        this.eventBus.on(Events.Tool.RotateUpdate, (data) => {
            // –í–æ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –Ω–∞–ø—Ä—è–º—É—é
            this.pixi.updateObjectRotation(data.object, data.angle);
        });

        this.eventBus.on(Events.Tool.RotateEnd, (data) => {
            // –í –∫–æ–Ω—Ü–µ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Ä–∞—â–µ–Ω–∏—è –¥–ª—è Undo/Redo
            if (data.oldAngle !== undefined && data.newAngle !== undefined) {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≥–æ–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                if (Math.abs(data.oldAngle - data.newAngle) > 0.1) {
                    
                    import('../core/commands/RotateObjectCommand.js').then(({ RotateObjectCommand }) => {
                        const command = new RotateObjectCommand(
                            this,
                            data.object,
                            data.oldAngle,
                            data.newAngle
                        );
                        command.setEventBus(this.eventBus);
                        this.history.executeCommand(command);
                    });
                }
            }
        });

        // === –ì–†–£–ü–ü–û–í–û–ô –ü–û–í–û–†–û–¢ ===
        this.eventBus.on(Events.Tool.GroupRotateStart, (data) => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —É–≥–ª—ã –∏ –ø–æ–∑–∏—Ü–∏–∏
            this._groupRotateStart = new Map();
            for (const id of data.objects) {
                const pixiObject = this.pixi.objects.get(id);
                const deg = pixiObject ? (pixiObject.rotation * 180 / Math.PI) : 0;
                const pos = pixiObject ? { x: pixiObject.x, y: pixiObject.y } : { x: 0, y: 0 };
                this._groupRotateStart.set(id, { angle: deg, position: pos });
            }
            // –¶–µ–Ω—Ç—Ä –≤—Ä–∞—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
            this._groupRotateCenter = data.center;
        });

        this.eventBus.on(Events.Tool.GroupRotateUpdate, (data) => {
            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –≤–æ–∫—Ä—É–≥ –æ–±—â–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è
            const center = this._groupRotateCenter || { x: 0, y: 0 };
            const rad = (data.angle || 0) * Math.PI / 180;
            const cos = Math.cos(rad);
            const sin = Math.sin(rad);
            for (const id of data.objects) {
                const start = this._groupRotateStart?.get(id);
                if (!start) continue;
                const startAngle = start.angle;
                const newAngle = startAngle + data.angle;
                // –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
                const relX = start.position.x - center.x;
                const relY = start.position.y - center.y;
                const newX = center.x + relX * cos - relY * sin;
                const newY = center.y + relX * sin + relY * cos;
                // –ü—Ä–∏–º–µ–Ω—è–µ–º
                // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∑–∏—Ü–∏—è, –∑–∞—Ç–µ–º —É–≥–æ–ª (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä—É—á–µ–∫)
                const pObj = this.pixi.objects.get(id);
                const halfW = (pObj?.width || 0) / 2;
                const halfH = (pObj?.height || 0) / 2;
                this.updateObjectPositionDirect(id, { x: newX - halfW, y: newY - halfH });
                this.pixi.updateObjectRotation(id, newAngle);
                this.updateObjectRotationDirect(id, newAngle);
            }
            // –°–æ–æ–±—â–∞–µ–º UI –æ–±–Ω–æ–≤–∏—Ç—å —Ä—É—á–∫–∏, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Ä–∞–º–∫–∞ –≥—Ä—É–ø–ø—ã
            this.eventBus.emit(Events.Object.TransformUpdated, { objectId: '__group__', type: 'rotation' });
        });

        this.eventBus.on(Events.Tool.GroupRotateEnd, (data) => {
            // –û—Ñ–æ—Ä–º–ª—è–µ–º –∫–∞–∫ –±–∞—Ç—á-–∫–æ–º–∞–Ω–¥—É GroupRotateCommand
            const center = this._groupRotateCenter || { x: 0, y: 0 };
            const changes = [];
            for (const id of data.objects) {
                const start = this._groupRotateStart?.get(id);
                const pixiObject = this.pixi.objects.get(id);
                if (!start || !pixiObject) continue;
                const toAngle = pixiObject.rotation * 180 / Math.PI;
                const toPos = { x: pixiObject.x, y: pixiObject.y };
                if (Math.abs(start.angle - toAngle) > 0.1 || Math.abs(start.position.x - toPos.x) > 0.1 || Math.abs(start.position.y - toPos.y) > 0.1) {
                    changes.push({ id, fromAngle: start.angle, toAngle, fromPos: start.position, toPos });
                }
            }
            if (changes.length > 0) {
                const cmd = new GroupRotateCommand(this, changes);
                cmd.setEventBus(this.eventBus);
                this.history.executeCommand(cmd);
            }
            this._groupRotateStart = null;
            this._groupRotateCenter = null;
        });

        // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –í–†–ê–©–ï–ù–ò–Ø ===
        
        this.eventBus.on(Events.Object.Rotate, (data) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –≤ PIXI
            this.pixi.updateObjectRotation(data.objectId, data.angle);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ State
            this.updateObjectRotationDirect(data.objectId, data.angle);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–æ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É—á–µ–∫)
            this.eventBus.emit(Events.Object.TransformUpdated, {
                objectId: data.objectId,
                type: 'rotation',
                angle: data.angle
            });
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏ –∫–æ–≥–¥–∞ –æ–±—ä–µ–∫—Ç –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã (Undo/Redo)
        this.eventBus.on(Events.Object.TransformUpdated, (data) => {
            console.log(`üîÑ –û–±—ä–µ–∫—Ç ${data.objectId} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏`);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤—ã–¥–µ–ª–µ–Ω
            if (this.selectTool && this.selectTool.selectedObjects.has(data.objectId)) {
                this.selectTool.updateResizeHandles();
            }
        });

        // Hit testing
        this.eventBus.on(Events.Tool.HitTest, (data) => {
            const result = this.pixi.hitTest(data.x, data.y);
            data.result = result;
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ (–ª–µ–≤—ã–π-–≤–µ—Ä—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
        this.eventBus.on(Events.Tool.GetObjectPosition, (data) => {
            const pixiObject = this.pixi.objects.get(data.objectId);
            if (pixiObject) {
                const halfW = (pixiObject.width || 0) / 2;
                const halfH = (pixiObject.height || 0) / 2;
                data.position = { x: pixiObject.x - halfW, y: pixiObject.y - halfH };
            }
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ PIXI –æ–±—ä–µ–∫—Ç–∞
        this.eventBus.on(Events.Tool.GetObjectPixi, (data) => {
            console.log(`üîç –ó–∞–ø—Ä–æ—Å PIXI –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è ${data.objectId}`);
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ PIXI –æ–±—ä–µ–∫—Ç—ã:', Array.from(this.pixi.objects.keys()));
            
            const pixiObject = this.pixi.objects.get(data.objectId);
            if (pixiObject) {
                console.log(`‚úÖ PIXI –æ–±—ä–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –¥–ª—è ${data.objectId}`);
                data.pixiObject = pixiObject;
            } else {
                console.log(`‚ùå PIXI –æ–±—ä–µ–∫—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –¥–ª—è ${data.objectId}`);
            }
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—Å –∏—Ö PIXI –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏)
        this.eventBus.on(Events.Tool.GetAllObjects, (data) => {
            const result = [];
            for (const [objectId, pixiObject] of this.pixi.objects.entries()) {
                const bounds = pixiObject.getBounds();
                result.push({
                    id: objectId,
                    pixi: pixiObject,
                    bounds: { x: bounds.x, y: bounds.y, width: bounds.width, height: bounds.height }
                });
            }
            data.objects = result;
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
        this.eventBus.on(Events.Tool.GetObjectSize, (data) => {
            const objects = this.state.getObjects();
            const object = objects.find(obj => obj.id === data.objectId);
            if (object) {
                data.size = { width: object.width, height: object.height };
            }
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
        this.eventBus.on(Events.Tool.GetObjectRotation, (data) => {
            const pixiObject = this.pixi.objects.get(data.objectId);
            if (pixiObject) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–¥–∏–∞–Ω—ã –≤ –≥—Ä–∞–¥—É—Å—ã
                data.rotation = pixiObject.rotation * 180 / Math.PI;
            } else {
                data.rotation = 0;
            }
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        this.eventBus.on(Events.Tool.UpdateObjectContent, (data) => {
            const { objectId, content } = data;
            if (objectId && content !== undefined) {
                this.pixi.updateObjectContent(objectId, content);
            }
        });

        // –°–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ (–≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        this.eventBus.on(Events.Tool.HideObjectText, (data) => {
            const { objectId } = data;
            if (objectId) {
                this.pixi.hideObjectText(objectId);
            }
        });

        // –ü–æ–∫–∞–∑ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ (–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        this.eventBus.on(Events.Tool.ShowObjectText, (data) => {
            const { objectId } = data;
            if (objectId) {
                this.pixi.showObjectText(objectId);
            }
        });

        // –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        this.eventBus.on(Events.Tool.FindObjectByPosition, (data) => {
            const { position, type } = data;
            if (position && type) {
                const foundObject = this.pixi.findObjectByPosition(position, type);
                data.foundObject = foundObject;
            }
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        this.eventBus.on(Events.Object.StateChanged, (data) => {
            const { objectId, updates } = data;
            if (objectId && updates && this.state) {
                console.log(`üîß –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ${objectId}:`, updates);
                const objects = this.state.getObjects();
                const object = objects.find(obj => obj.id === objectId);
                if (object) {
                    // –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –¥–ª—è —Å–≤–æ–π—Å—Ç–≤, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                    if (updates.properties && object.properties) {
                        Object.assign(object.properties, updates.properties);
                    }

                    // –ö–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
                    const topLevelUpdates = { ...updates };
                    delete topLevelUpdates.properties;
                    Object.assign(object, topLevelUpdates);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º PIXI –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    const pixiObject = this.pixi.objects.get(objectId);
                    if (pixiObject && pixiObject._mb && pixiObject._mb.instance) {
                        const instance = pixiObject._mb.instance;

                        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ—Ä–µ–π–º–∞
                        if (object.type === 'frame' && updates.properties && updates.properties.title !== undefined) {
                            if (instance.setTitle) {
                                instance.setTitle(updates.properties.title);
                                console.log(`üñºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ—Ä–µ–π–º–∞ ${objectId}: "${updates.properties.title}"`);
                            }
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Ñ—Ä–µ–π–º–∞
                        if (object.type === 'frame' && updates.backgroundColor !== undefined) {
                            if (instance.setBackgroundColor) {
                                instance.setBackgroundColor(updates.backgroundColor);
                                console.log(`üé® –û–±–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Ñ—Ä–µ–π–º–∞ ${objectId}: ${updates.backgroundColor}`);
                            }
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∫–∏
                        if (object.type === 'note' && updates.properties) {
                            if (instance.setStyle) {
                                const styleUpdates = {};
                                if (updates.properties.backgroundColor !== undefined) {
                                    styleUpdates.backgroundColor = updates.properties.backgroundColor;
                                }
                                if (updates.properties.borderColor !== undefined) {
                                    styleUpdates.borderColor = updates.properties.borderColor;
                                }
                                if (updates.properties.textColor !== undefined) {
                                    styleUpdates.textColor = updates.properties.textColor;
                                }
                                if (updates.properties.fontSize !== undefined) {
                                    styleUpdates.fontSize = updates.properties.fontSize;
                                }
                                
                                if (Object.keys(styleUpdates).length > 0) {
                                    instance.setStyle(styleUpdates);
                                    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∫–∏ ${objectId}:`, styleUpdates);
                                }
                            }
                        }
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    this.state.markDirty();
                    console.log(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ${objectId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
                } else {
                    console.warn(`‚ùå –û–±—ä–µ–∫—Ç ${objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏`);
                }
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        this.eventBus.on(Events.Object.FileNameChange, (data) => {
            const { objectId, oldName, newName } = data;
            if (objectId && oldName !== undefined && newName !== undefined) {
                console.log(`üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${objectId}: "${oldName}" ‚Üí "${newName}"`);
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                const command = new EditFileNameCommand(this, objectId, oldName, newName);
                this.history.executeCommand(command);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
        this.eventBus.on('file:metadata:updated', (data) => {
            const { objectId, fileId, metadata } = data;
            if (objectId && metadata) {
                console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ ${objectId} —Å —Å–µ—Ä–≤–µ—Ä–∞:`, metadata);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                const objects = this.state.getObjects();
                const objectData = objects.find(obj => obj.id === objectId);
                
                if (objectData && objectData.type === 'file') {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    if (!objectData.properties) {
                        objectData.properties = {};
                    }
                    
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                    if (metadata.name && metadata.name !== objectData.properties.fileName) {
                        objectData.properties.fileName = metadata.name;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                        const pixiReq = { objectId, pixiObject: null };
                        this.eventBus.emit(Events.Tool.GetObjectPixi, pixiReq);
                        
                        if (pixiReq.pixiObject && pixiReq.pixiObject._mb && pixiReq.pixiObject._mb.instance) {
                            const fileInstance = pixiReq.pixiObject._mb.instance;
                            if (typeof fileInstance.setFileName === 'function') {
                                fileInstance.setFileName(metadata.name);
                            }
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        this.state.markDirty();
                        console.log(`‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ ${objectId} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º`);
                    }
                }
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
     */
    setupKeyboardEvents() {
        // –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.eventBus.on(Events.Keyboard.SelectAll, () => {
            if (this.toolManager.getActiveTool()?.name === 'select') {
                this.toolManager.getActiveTool().selectAll();
            }
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–¥–µ–ª–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º—É—Ç–∞—Ü–∏–π –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è)
        this.eventBus.on(Events.Keyboard.Delete, () => {
            if (this.toolManager.getActiveTool()?.name === 'select') {
                const ids = Array.from(this.toolManager.getActiveTool().selectedObjects);
                ids.forEach((objectId) => this.deleteObject(objectId));
                this.toolManager.getActiveTool().clearSelection();
            }
        });

        // –û—Ç–º–µ–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.eventBus.on(Events.Keyboard.Escape, () => {
            if (this.toolManager.getActiveTool()?.name === 'select') {
                this.toolManager.getActiveTool().clearSelection();
            }
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        this.eventBus.on(Events.Keyboard.ToolSelect, (data) => {
            if (this.toolManager.hasActiveTool(data.tool)) {
                this.toolManager.activateTool(data.tool);
            }
        });

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
        this.eventBus.on(Events.Keyboard.Move, (data) => {
            if (this.toolManager.getActiveTool()?.name === 'select') {
                const selectedObjects = this.toolManager.getActiveTool().selectedObjects;
                const { direction, step } = data;
                
                for (const objectId of selectedObjects) {
                    const pixiObject = this.pixi.objects.get(objectId);
                    if (pixiObject) {
                        switch (direction) {
                            case 'up':
                                pixiObject.y -= step;
                                break;
                            case 'down':
                                pixiObject.y += step;
                                break;
                            case 'left':
                                pixiObject.x -= step;
                                break;
                            case 'right':
                                pixiObject.x += step;
                                break;
                        }
                    }
                }
            }
        });

        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø—ã)
        this.eventBus.on(Events.Keyboard.Copy, () => {
            if (this.toolManager.getActiveTool()?.name !== 'select') return;
            const selected = Array.from(this.toolManager.getActiveTool().selectedObjects || []);
            if (selected.length === 0) return;
            if (selected.length === 1) {
                // –û–¥–∏–Ω–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
                this.copyObject(selected[0]);
                return;
            }
            // –ì—Ä—É–ø–ø–∞ ‚Äî –∫–ª–∞–¥–µ–º –≤ –±—É—Ñ–µ—Ä –Ω–∞–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤
            const objects = this.state.state.objects || [];
            const groupData = selected
                .map(id => objects.find(o => o.id === id))
                .filter(Boolean)
                .map(o => JSON.parse(JSON.stringify(o)));
            if (groupData.length === 0) return;
            this.clipboard = {
                type: 'group',
                data: groupData,
                meta: { pasteCount: 0 }
            };
        });

        // –í—Å—Ç–∞–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø—ã)
        this.eventBus.on(Events.Keyboard.Paste, () => {
            if (!this.clipboard) return;
            if (this.clipboard.type === 'object') {
                // –û–¥–∏–Ω–æ—á–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞
                this.pasteObject();
                return;
            }
            if (this.clipboard.type === 'group') {
                const group = this.clipboard;
                const data = Array.isArray(group.data) ? group.data : [];
                if (data.length === 0) return;
                // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º paste
                const offsetStep = 25;
                group.meta = group.meta || { pasteCount: 0 };
                group.meta.pasteCount = (group.meta.pasteCount || 0) + 1;
                const dx = offsetStep * group.meta.pasteCount;
                const dy = offsetStep * group.meta.pasteCount;
                // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–±–æ—Ä –Ω–æ–≤—ã—Ö id —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å
                let pending = data.length;
                const newIds = [];
                const onPasted = (payload) => {
                    if (!payload || !payload.newId) return;
                    newIds.push(payload.newId);
                    pending -= 1;
                    if (pending === 0) {
                        this.eventBus.off(Events.Object.Pasted, onPasted);
                        // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–º–∫—É —Å —Ä—É—á–∫–∞–º–∏
                        if (this.selectTool && newIds.length > 0) {
                            requestAnimationFrame(() => {
                                this.selectTool.setSelection(newIds);
                                this.selectTool.updateResizeHandles();
                            });
                        }
                    }
                };
                this.eventBus.on(Events.Object.Pasted, onPasted);

                // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ + –æ–±—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ
                for (const original of data) {
                    const cloned = JSON.parse(JSON.stringify(original));
                    const targetPos = {
                        x: (cloned.position?.x || 0) + dx,
                        y: (cloned.position?.y || 0) + dy
                    };
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É PasteObjectCommand –ø–æ–≤–µ—Ä—Ö clipboard —Ç–∏–ø–∞ object
                    this.clipboard = { type: 'object', data: cloned };
                    const cmd = new PasteObjectCommand(this, targetPos);
                    cmd.setEventBus(this.eventBus);
                    this.history.executeCommand(cmd);
                }
                // –ü–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º clipboard –∫ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ—â—ë —Ä–∞–∑ –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å –Ω–æ–≤—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
                this.clipboard = group;
                // –†–∞–º–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π object:pasted
            }
        });

        // Undo/Redo —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ HistoryManager
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    setupSaveEvents() {
        // –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.eventBus.on(Events.Save.GetBoardData, (requestData) => {
            requestData.data = this.getBoardData();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.eventBus.on(Events.Save.StatusChanged, (data) => {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.eventBus.on(Events.Save.Error, (data) => {
            console.error('Save error:', data.error);
            // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.eventBus.on(Events.Save.Success, async (data) => {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            try {
                const result = await this.cleanupUnusedImages();
                if (result.deletedCount > 0) {
                    console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–æ ${result.deletedCount} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
                }
            } catch (error) {
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ cleanup
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error.message);
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∏—Å—Ç–æ—Ä–∏–∏ (undo/redo)
     */
    setupHistoryEvents() {
        // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        this.eventBus.on(Events.History.Changed, (data) => {

            
            // –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ Undo/Redo –≤ UI
            this.eventBus.emit(Events.UI.UpdateHistoryButtons, {
                canUndo: data.canUndo,
                canRedo: data.canRedo
            });
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –≤ PIXI –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
     * –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Undo/Redo
     */
    updateObjectPosition(objectId, position) {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        const pixiObject = this.pixi.objects.get(objectId);
        if (!pixiObject) return;
        
        const oldPosition = { x: pixiObject.x, y: pixiObject.y };
        
        // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        const command = new MoveObjectCommand(this, objectId, oldPosition, position);
        command.setEventBus(this.eventBus);
        this.history.executeCommand(command);
    }

    /**
     * –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    updateObjectPositionDirect(objectId, position) {
        // position ‚Äî –ª–µ–≤—ã–π –≤–µ—Ä—Ö (state); –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ü–µ–Ω—Ç—Ä—É –≤ PIXI
        const pixiObject = this.pixi.objects.get(objectId);
        if (pixiObject) {
            const halfW = (pixiObject.width || 0) / 2;
            const halfH = (pixiObject.height || 0) / 2;
            pixiObject.x = position.x + halfW;
            pixiObject.y = position.y + halfH;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–±–µ–∑ —ç–º–∏—Ç–∞ —Å–æ–±—ã—Ç–∏—è)
        const objects = this.state.state.objects;
        const object = objects.find(obj => obj.id === objectId);
        if (object) {
            object.position = { ...position };
            this.state.markDirty(); // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
     */
    updateObjectRotationDirect(objectId, angle) {
        const objects = this.state.getObjects();
        const object = objects.find(obj => obj.id === objectId);
        if (object) {
            object.rotation = angle;
            this.state.markDirty();
            console.log(`üîÑ –£–≥–æ–ª –æ–±—ä–µ–∫—Ç–∞ ${objectId} –æ–±–Ω–æ–≤–ª–µ–Ω: ${angle}¬∞`);
        }
    }

    /**
     * –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     */
    updateObjectSizeAndPositionDirect(objectId, size, position = null, objectType = null) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ PIXI
        const pixiObject = this.pixi.objects.get(objectId);
        const prevCenter = pixiObject ? { x: pixiObject.x, y: pixiObject.y } : null;
        this.pixi.updateObjectSize(objectId, size, objectType);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ (state: –ª–µ–≤—ã–π-–≤–µ—Ä—Ö; PIXI: —Ü–µ–Ω—Ç—Ä)
        if (position) {
            const pixiObject2 = this.pixi.objects.get(objectId);
            if (pixiObject2) {
                const halfW = (size?.width ?? pixiObject2.width ?? 0) / 2;
                const halfH = (size?.height ?? pixiObject2.height ?? 0) / 2;
                pixiObject2.x = position.x + halfW;
                pixiObject2.y = position.y + halfH;

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                const objects = this.state.state.objects;
                const object = objects.find(obj => obj.id === objectId);
                if (object) {
                    object.position.x = position.x;
                    object.position.y = position.y;
                }
            }
        } else if (prevCenter) {
            // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–∂–Ω–∏–π —Ü–µ–Ω—Ç—Ä (–±–µ–∑ –¥—Ä–µ–π—Ñ–∞)
            const pixiAfter = this.pixi.objects.get(objectId);
            if (pixiAfter) {
                pixiAfter.x = prevCenter.x;
                pixiAfter.y = prevCenter.y;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–±–µ–∑ —ç–º–∏—Ç–∞ —Å–æ–±—ã—Ç–∏—è)
        const objects = this.state.state.objects;
        const object = objects.find(obj => obj.id === objectId);
        if (object) {
            object.width = size.width;
            object.height = size.height;
            this.state.markDirty(); // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        }
    }

    createObject(type, position, properties = {}, extraData = {}) {
        const exists = (id) => {
            const inState = (this.state.state.objects || []).some(o => o.id === id);
            const inPixi = this.pixi?.objects?.has ? this.pixi.objects.has(id) : false;
            return inState || inPixi;
        };
        const initialWidth = (properties && typeof properties.width === 'number') ? properties.width : 100;
        const initialHeight = (properties && typeof properties.height === 'number') ? properties.height : 100;

        // –ï—Å–ª–∏ —Å–æ–∑–¥–∞—ë–º –ù–ï —Ñ—Ä–µ–π–º ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ü–µ–Ω—Ç—Ä –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤–Ω—É—Ç—Ä—å –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Ñ—Ä–µ–π–º–∞.
        // –ï—Å–ª–∏ –¥–∞, —Å—Ä–∞–∑—É –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∫ —ç—Ç–æ–º—É —Ñ—Ä–µ–π–º—É (properties.frameId)
        if (type !== 'frame' && position && this.pixi && typeof this.pixi.findObjectByPosition === 'function') {
            const center = {
                x: position.x + initialWidth / 2,
                y: position.y + initialHeight / 2
            };
            try {
                const hostFrame = this.pixi.findObjectByPosition(center, 'frame');
                if (hostFrame && hostFrame.id) {
                    properties = { ...(properties || {}), frameId: hostFrame.id };
                }
            } catch (e) {
                // fail-safe: –Ω–µ –º–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∏—Å–∫–∞
            }
        }
        const objectData = {
            id: generateObjectId(exists),
            type,
            position,
            width: initialWidth,
            height: initialHeight,
            properties,
            created: new Date().toISOString(),
            transform: {
                pivotCompensated: false  // –ù–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –µ—â–µ –Ω–µ —Å–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã
            },
            ...extraData  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, imageId)
        };

        // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const command = new CreateObjectCommand(this, objectData);
        this.history.executeCommand(command);

        return objectData;
    }

    // === –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ —Ñ—Ä–µ–π–º–∞–º ===
    // –õ–æ–≥–∏–∫–∞ —Ñ—Ä–µ–π–º–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ FrameService

    /**
     * –ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     */
    async copyObject(objectId) {
        const { CopyObjectCommand } = await import('./commands/CopyObjectCommand.js');
        const command = new CopyObjectCommand(this, objectId);
        command.execute(); // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }

    /**
     * –í—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
     */
    pasteObject(position = null) {
        const command = new PasteObjectCommand(this, position);
        command.setEventBus(this.eventBus);
        this.history.executeCommand(command);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞)
     */
    createObjectFromData(objectData) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ (—Å –µ–≥–æ ID, —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ —Ç.–¥.)
        this.state.addObject(objectData);
        this.pixi.createObject(objectData);

        // –ù–ï —ç–º–∏—Ç–∏—Ä—É–µ–º object:created –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        // –û–±—ä–µ–∫—Ç—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î
        
        return objectData;
    }

    deleteObject(objectId) {
        // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const command = new DeleteObjectCommand(this, objectId);
        this.history.executeCommand(command);
    }

    get objects() {
        return this.state.getObjects();
    }

    get boardData() {
        return this.state.serialize();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    getBoardData() {
        return this.state.serialize();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ—Ä–µ–π–º–∞
     * @param {string} frameId - ID —Ñ—Ä–µ–π–º–∞
     * @returns {string[]} - –º–∞—Å—Å–∏–≤ ID –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    _getFrameChildren(frameId) {
        // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Ç.–∫. –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∫ —Ñ—Ä–µ–π–º—É
        // –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ
        // –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –≥—Ä–∞–Ω–∏—Ü —Ñ—Ä–µ–π–º–∞ –∏–ª–∏ —Å–≤—è–∑–∞–Ω—ã —Å –Ω–∏–º –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.
        return [];
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ ID
     * @param {string} objectId 
     * @returns {object | undefined}
     */
    getObjectData(objectId) {
        return this.state.getObjects().find(o => o.id === objectId);
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {Promise<{deletedCount: number, errors: Array}>}
     */
    async cleanupUnusedImages() {
        try {
            if (!this.imageUploadService) {
                console.warn('ImageUploadService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
                return { deletedCount: 0, errors: ['ImageUploadService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'] };
            }

            const result = await this.imageUploadService.cleanupUnusedImages();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            if (!result || typeof result !== 'object') {
                console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ImageUploadService:', result);
                return { deletedCount: 0, errors: ['–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞'] };
            }

            const deletedCount = Number(result.deletedCount) || 0;
            const errors = Array.isArray(result.errors) ? result.errors : [];

            if (deletedCount > 0) {
                console.log(`–û—á–∏—â–µ–Ω–æ ${deletedCount} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
            }
            if (errors.length > 0) {
                console.warn('–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', errors);
            }

            return { deletedCount, errors };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
            return { 
                deletedCount: 0, 
                errors: [error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'] 
            };
        }
    }

    destroy() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ
        if (this.destroyed) {
            console.warn('CoreMoodBoard —É–∂–µ –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
        this.destroyed = true;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ResizeObserver
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
            this.resizeObserver = null;
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        if (this.saveManager) {
            this.saveManager.destroy();
            this.saveManager = null;
        }
        
        if (this.keyboard) {
            this.keyboard.destroy();
            this.keyboard = null;
        }
        
        if (this.history) {
            this.history.destroy();
            this.history = null;
        }
        
        if (this.pixi) {
            this.pixi.destroy();
            this.pixi = null;
        }
        
        // –û—á–∏—â–∞–µ–º EventBus
        if (this.eventBus) {
            this.eventBus.removeAllListeners();
            this.eventBus = null;
        }
        
        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        if (typeof window !== 'undefined' && window.moodboardEventBus === this.eventBus) {
            window.moodboardEventBus = null;
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        this.state = null;
        this.toolManager = null;
        this.apiClient = null;
        this.imageUploadService = null;
        this.fileUploadService = null;
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container = null;
        
        console.log('CoreMoodBoard —É—Å–ø–µ—à–Ω–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}
