import { PixiEngine } from './PixiEngine.js';
import { StateManager } from './StateManager.js';
import { EventBus } from './EventBus.js';
import { KeyboardManager } from './KeyboardManager.js';
import { SaveManager } from './SaveManager.js';
import { HistoryManager } from './HistoryManager.js';
import { ToolManager } from '../tools/ToolManager.js';
import { SelectTool } from '../tools/object-tools/SelectTool.js';
import { CreateObjectCommand, DeleteObjectCommand, MoveObjectCommand, ResizeObjectCommand } from './commands/index.js';

export class CoreMoodBoard {
    constructor(container, options = {}) {
        this.container = typeof container === 'string'
            ? document.querySelector(container)
            : container;

        if (!this.container) {
            throw new Error('Container not found');
        }

        this.options = {
            boardId: null,
            autoSave: false,
            width: this.container.clientWidth || 800,
            height: this.container.clientHeight || 600,
            backgroundColor: 0xF5F5F5,
            ...options
        };

        this.eventBus = new EventBus();
        this.state = new StateManager(this.eventBus);
        this.pixi = new PixiEngine(this.container, this.eventBus, this.options);
        this.keyboard = new KeyboardManager(this.eventBus);
        this.saveManager = new SaveManager(this.eventBus, this.options);
        this.history = new HistoryManager(this.eventBus);
        this.toolManager = null; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ init()
        
        // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.dragStartPosition = null;
        
        // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        this.resizeStartSize = null;
        
        // –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏
        this.clipboard = null;

        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ init() - –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é
    }

    async init() {
        try {
            await this.pixi.init();
            this.keyboard.startListening(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            this.initTools();

            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –¥–æ—Å–∫—É –¥–ª—è –¥–µ–º–æ
            this.state.loadBoard({
                id: this.options.boardId || 'demo',
                name: 'Demo Board',
                objects: [],
                viewport: { x: 0, y: 0, zoom: 1 }
            });


        } catch (error) {
            console.error('MoodBoard init failed:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    initTools() {
        // –ü–æ–ª—É—á–∞–µ–º canvas —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const canvasElement = this.pixi.app.view;
        
        // –°–æ–∑–¥–∞–µ–º ToolManager
        this.toolManager = new ToolManager(this.eventBus, canvasElement, this.pixi.app);
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        const selectTool = new SelectTool(this.eventBus);
        this.toolManager.registerTool(selectTool);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ selectTool –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É—á–µ–∫
        this.selectTool = selectTool;
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º SelectTool –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        console.log('üîß –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º SelectTool —Å PIXI app:', !!this.pixi.app);
        this.toolManager.activateTool('select');
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        this.setupToolEvents();
        this.setupKeyboardEvents();
        this.setupSaveEvents();
        this.setupHistoryEvents();
        

    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    setupToolEvents() {
        // –°–æ–±—ã—Ç–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.eventBus.on('tool:selection:add', (data) => {

        });

        this.eventBus.on('tool:selection:clear', (data) => {

        });

        // –°–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.eventBus.on('tool:drag:start', (data) => {

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            const pixiObject = this.pixi.objects.get(data.object);
            if (pixiObject) {
                this.dragStartPosition = { x: pixiObject.x, y: pixiObject.y };
            }
        });

        this.eventBus.on('tool:drag:update', (data) => {
            // –í–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
            this.updateObjectPositionDirect(data.object, data.position);
        });

        this.eventBus.on('tool:drag:end', (data) => {

            // –í –∫–æ–Ω—Ü–µ —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            if (this.dragStartPosition) {
                const pixiObject = this.pixi.objects.get(data.object);
                if (pixiObject) {
                    const finalPosition = { x: pixiObject.x, y: pixiObject.y };
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                    if (this.dragStartPosition.x !== finalPosition.x || 
                        this.dragStartPosition.y !== finalPosition.y) {
                        
                        const command = new MoveObjectCommand(
                            this, 
                            data.object, 
                            this.dragStartPosition, 
                            finalPosition
                        );
                        command.setEventBus(this.eventBus);
                        this.history.executeCommand(command);
                    }
                }
                this.dragStartPosition = null;
            }
        });

        // –°–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        this.eventBus.on('tool:resize:start', (data) => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            const objects = this.state.getObjects();
            const object = objects.find(obj => obj.id === data.object);
            if (object) {
                this.resizeStartSize = { width: object.width, height: object.height };
            }
        });

        this.eventBus.on('tool:resize:update', (data) => {
            // –í–æ –≤—Ä–µ–º—è resize –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
            const objects = this.state.getObjects();
            const object = objects.find(obj => obj.id === data.object);
            const objectType = object ? object.type : null;
            
            this.updateObjectSizeAndPositionDirect(data.object, data.size, data.position, objectType);
        });

        this.eventBus.on('tool:resize:end', (data) => {
            // –í –∫–æ–Ω—Ü–µ —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            if (this.resizeStartSize && data.oldSize && data.newSize) {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                if (data.oldSize.width !== data.newSize.width || 
                    data.oldSize.height !== data.newSize.height) {
                    
                    console.log(`üìù –°–æ–∑–¥–∞–µ–º ResizeObjectCommand:`, {
                        object: data.object,
                        oldSize: data.oldSize,
                        newSize: data.newSize,
                        oldPosition: data.oldPosition,
                        newPosition: data.newPosition
                    });
                    
                    const command = new ResizeObjectCommand(
                        this, 
                        data.object, 
                        data.oldSize, 
                        data.newSize,
                        data.oldPosition,
                        data.newPosition
                    );
                    command.setEventBus(this.eventBus);
                    this.history.executeCommand(command);
                }
            }
            this.resizeStartSize = null;
        });

        // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –í–†–ê–©–ï–ù–ò–Ø ===
        
        this.eventBus.on('tool:rotate:update', (data) => {
            // –í–æ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –Ω–∞–ø—Ä—è–º—É—é
            this.pixi.updateObjectRotation(data.object, data.angle);
        });

        this.eventBus.on('tool:rotate:end', (data) => {
            // –í –∫–æ–Ω—Ü–µ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Ä–∞—â–µ–Ω–∏—è –¥–ª—è Undo/Redo
            if (data.oldAngle !== undefined && data.newAngle !== undefined) {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≥–æ–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                if (Math.abs(data.oldAngle - data.newAngle) > 0.1) {
                    
                    import('../core/commands/RotateObjectCommand.js').then(({ RotateObjectCommand }) => {
                        const command = new RotateObjectCommand(
                            this,
                            data.object,
                            data.oldAngle,
                            data.newAngle
                        );
                        command.setEventBus(this.eventBus);
                        this.history.executeCommand(command);
                    });
                }
            }
        });

        // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –í–†–ê–©–ï–ù–ò–Ø ===
        
        this.eventBus.on('object:rotate', (data) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –≤ PIXI
            this.pixi.updateObjectRotation(data.objectId, data.angle);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ State
            this.updateObjectRotationDirect(data.objectId, data.angle);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–æ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É—á–µ–∫)
            this.eventBus.emit('object:transform:updated', {
                objectId: data.objectId,
                type: 'rotation',
                angle: data.angle
            });
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏ –∫–æ–≥–¥–∞ –æ–±—ä–µ–∫—Ç –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã (Undo/Redo)
        this.eventBus.on('object:transform:updated', (data) => {
            console.log(`üîÑ –û–±—ä–µ–∫—Ç ${data.objectId} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏`);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤—ã–¥–µ–ª–µ–Ω
            if (this.selectTool && this.selectTool.selectedObjects.has(data.objectId)) {
                this.selectTool.updateResizeHandles();
            }
        });

        // Hit testing
        this.eventBus.on('tool:hit:test', (data) => {
            const result = this.pixi.hitTest(data.x, data.y);
            console.log(`üîç PixiEngine hitTest —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, result);
            data.result = result;
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞
        this.eventBus.on('tool:get:object:position', (data) => {
            const pixiObject = this.pixi.objects.get(data.objectId);
            if (pixiObject) {
                data.position = { x: pixiObject.x, y: pixiObject.y };
            }
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ PIXI –æ–±—ä–µ–∫—Ç–∞
        this.eventBus.on('tool:get:object:pixi', (data) => {
            console.log(`üîç –ó–∞–ø—Ä–æ—Å PIXI –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è ${data.objectId}`);
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ PIXI –æ–±—ä–µ–∫—Ç—ã:', Array.from(this.pixi.objects.keys()));
            
            const pixiObject = this.pixi.objects.get(data.objectId);
            if (pixiObject) {
                console.log(`‚úÖ PIXI –æ–±—ä–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –¥–ª—è ${data.objectId}`);
                data.pixiObject = pixiObject;
            } else {
                console.log(`‚ùå PIXI –æ–±—ä–µ–∫—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –¥–ª—è ${data.objectId}`);
            }
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
        this.eventBus.on('tool:get:object:size', (data) => {
            const objects = this.state.getObjects();
            const object = objects.find(obj => obj.id === data.objectId);
            if (object) {
                data.size = { width: object.width, height: object.height };
            }
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
        this.eventBus.on('tool:get:object:rotation', (data) => {
            const pixiObject = this.pixi.objects.get(data.objectId);
            if (pixiObject) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–¥–∏–∞–Ω—ã –≤ –≥—Ä–∞–¥—É—Å—ã
                data.rotation = pixiObject.rotation * 180 / Math.PI;
            } else {
                data.rotation = 0;
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
     */
    setupKeyboardEvents() {
        // –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.eventBus.on('keyboard:select-all', () => {
            if (this.toolManager.getActiveTool()?.name === 'select') {
                this.toolManager.getActiveTool().selectAll();
            }
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.eventBus.on('keyboard:delete', () => {
            if (this.toolManager.getActiveTool()?.name === 'select') {
                const selectedObjects = this.toolManager.getActiveTool().selectedObjects;
                for (const objectId of selectedObjects) {
                    this.deleteObject(objectId);
                }
                this.toolManager.getActiveTool().clearSelection();
            }
        });

        // –û—Ç–º–µ–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.eventBus.on('keyboard:escape', () => {
            if (this.toolManager.getActiveTool()?.name === 'select') {
                this.toolManager.getActiveTool().clearSelection();
            }
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        this.eventBus.on('keyboard:tool-select', (data) => {
            if (this.toolManager.hasActiveTool(data.tool)) {
                this.toolManager.activateTool(data.tool);
            }
        });

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
        this.eventBus.on('keyboard:move', (data) => {
            if (this.toolManager.getActiveTool()?.name === 'select') {
                const selectedObjects = this.toolManager.getActiveTool().selectedObjects;
                const { direction, step } = data;
                
                for (const objectId of selectedObjects) {
                    const pixiObject = this.pixi.objects.get(objectId);
                    if (pixiObject) {
                        switch (direction) {
                            case 'up':
                                pixiObject.y -= step;
                                break;
                            case 'down':
                                pixiObject.y += step;
                                break;
                            case 'left':
                                pixiObject.x -= step;
                                break;
                            case 'right':
                                pixiObject.x += step;
                                break;
                        }
                    }
                }
            }
        });

        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.eventBus.on('keyboard:copy', () => {
            if (this.toolManager.getActiveTool()?.name === 'select') {
                const selectedObjects = this.toolManager.getActiveTool().selectedObjects;
                if (selectedObjects.size > 0) {
                    // –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç (–ø–æ–∑–∂–µ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è)
                    const firstObjectId = Array.from(selectedObjects)[0];
                    this.copyObject(firstObjectId);
                }
            }
        });

        // –í—Å—Ç–∞–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        this.eventBus.on('keyboard:paste', () => {
            if (this.clipboard && this.clipboard.type === 'object') {
                // –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ - PasteObjectCommand —Å–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ
                this.pasteObject();
            }
        });

        // Undo/Redo —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ HistoryManager
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    setupSaveEvents() {
        // –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.eventBus.on('save:get-board-data', (requestData) => {
            requestData.data = this.getBoardData();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.eventBus.on('save:status-changed', (data) => {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.eventBus.on('save:error', (data) => {
            console.error('Save error:', data.error);
            // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.eventBus.on('save:success', (data) => {

        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∏—Å—Ç–æ—Ä–∏–∏ (undo/redo)
     */
    setupHistoryEvents() {
        // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        this.eventBus.on('history:changed', (data) => {

            
            // –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ Undo/Redo –≤ UI
            this.eventBus.emit('ui:update-history-buttons', {
                canUndo: data.canUndo,
                canRedo: data.canRedo
            });
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –≤ PIXI –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
     * –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Undo/Redo
     */
    updateObjectPosition(objectId, position) {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        const pixiObject = this.pixi.objects.get(objectId);
        if (!pixiObject) return;
        
        const oldPosition = { x: pixiObject.x, y: pixiObject.y };
        
        // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        const command = new MoveObjectCommand(this, objectId, oldPosition, position);
        command.setEventBus(this.eventBus);
        this.history.executeCommand(command);
    }

    /**
     * –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    updateObjectPositionDirect(objectId, position) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ PIXI
        const pixiObject = this.pixi.objects.get(objectId);
        if (pixiObject) {
            pixiObject.x = position.x;
            pixiObject.y = position.y;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–±–µ–∑ —ç–º–∏—Ç–∞ —Å–æ–±—ã—Ç–∏—è)
        const objects = this.state.state.objects;
        const object = objects.find(obj => obj.id === objectId);
        if (object) {
            object.position = { ...position };
            this.state.markDirty(); // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
     */
    updateObjectRotationDirect(objectId, angle) {
        const objects = this.state.getObjects();
        const object = objects.find(obj => obj.id === objectId);
        if (object) {
            object.rotation = angle;
            this.state.markDirty();
            console.log(`üîÑ –£–≥–æ–ª –æ–±—ä–µ–∫—Ç–∞ ${objectId} –æ–±–Ω–æ–≤–ª–µ–Ω: ${angle}¬∞`);
        }
    }

    /**
     * –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     */
    updateObjectSizeAndPositionDirect(objectId, size, position = null, objectType = null) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ PIXI
        this.pixi.updateObjectSize(objectId, size, objectType);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ (–¥–ª—è –ª–µ–≤—ã—Ö/–≤–µ—Ä—Ö–Ω–∏—Ö —Ä—É—á–µ–∫)
        if (position) {
            const pixiObject = this.pixi.objects.get(objectId);
            if (pixiObject) {
                console.log(`üìç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞: (${position.x}, ${position.y})`);
                pixiObject.x = position.x;
                pixiObject.y = position.y;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                const objects = this.state.state.objects;
                const object = objects.find(obj => obj.id === objectId);
                if (object) {
                    object.position.x = position.x;
                    object.position.y = position.y;
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–±–µ–∑ —ç–º–∏—Ç–∞ —Å–æ–±—ã—Ç–∏—è)
        const objects = this.state.state.objects;
        const object = objects.find(obj => obj.id === objectId);
        if (object) {
            object.width = size.width;
            object.height = size.height;
            this.state.markDirty(); // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        }
    }

    createObject(type, position, properties = {}) {
        const objectData = {
            id: 'obj_' + Date.now(),
            type,
            position,
            width: 100,
            height: 100,
            properties,
            created: new Date().toISOString(),
            transform: {
                pivotCompensated: false  // –ù–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –µ—â–µ –Ω–µ —Å–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã
            }
        };

        // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const command = new CreateObjectCommand(this, objectData);
        this.history.executeCommand(command);

        return objectData;
    }

    /**
     * –ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     */
    async copyObject(objectId) {
        const { CopyObjectCommand } = await import('./commands/CopyObjectCommand.js');
        const command = new CopyObjectCommand(this, objectId);
        command.execute(); // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }

    /**
     * –í—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
     */
    async pasteObject(position = null) {
        const { PasteObjectCommand } = await import('./commands/PasteObjectCommand.js');
        const command = new PasteObjectCommand(this, position);
        command.setEventBus(this.eventBus);
        this.history.executeCommand(command);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞)
     */
    createObjectFromData(objectData) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ (—Å –µ–≥–æ ID, —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ —Ç.–¥.)
        this.state.addObject(objectData);
        this.pixi.createObject(objectData);

        // –ù–ï —ç–º–∏—Ç–∏—Ä—É–µ–º object:created –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        // –û–±—ä–µ–∫—Ç—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î
        
        return objectData;
    }

    deleteObject(objectId) {
        // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const command = new DeleteObjectCommand(this, objectId);
        this.history.executeCommand(command);
    }

    get objects() {
        return this.state.getObjects();
    }

    get boardData() {
        return this.state.serialize();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    getBoardData() {
        return this.state.serialize();
    }

    destroy() {
        this.saveManager.destroy();
        this.keyboard.destroy();
        this.history.destroy();
        this.pixi.destroy();
        this.eventBus.removeAllListeners();
    }
}
