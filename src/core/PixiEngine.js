import * as PIXI from 'pixi.js';
import { ObjectFactory } from '../objects/ObjectFactory.js';
import { ObjectRenderer } from './rendering/ObjectRenderer.js';
import { Events } from './events/Events.js';

export class PixiEngine {
    constructor(container, eventBus, options) {
        this.container = container;
        this.eventBus = eventBus;
        this.options = options;
        this.objects = new Map();
    }

    async init() {
        this.app = new PIXI.Application({
            width: this.options.width,
            height: this.options.height,
            backgroundColor: this.options.backgroundColor,
            antialias: true,
            resolution: (typeof window !== 'undefined' && window.devicePixelRatio) ? window.devicePixelRatio : 1,
            autoDensity: true
        });

        this.container.appendChild(this.app.view);
        if (PIXI.settings && typeof PIXI.settings.ROUND_PIXELS !== 'undefined') {
            PIXI.settings.ROUND_PIXELS = true;
        }

        // –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–∏: —Å–µ—Ç–∫–∞ (–Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è) –∏ –º–∏—Ä —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ (–¥–≤–∏–≥–∞–µ—Ç—Å—è)
        this.gridLayer = new PIXI.Container();
        this.gridLayer.name = 'gridLayer';
        this.gridLayer.zIndex = 0;
        this.app.stage.addChild(this.gridLayer);

        this.worldLayer = new PIXI.Container();
        this.worldLayer.name = 'worldLayer';
        this.worldLayer.zIndex = 1;
        this.worldLayer.sortableChildren = true;
        this.app.stage.addChild(this.worldLayer);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ObjectRenderer
        this.renderer = new ObjectRenderer(this.objects, this.eventBus);

        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á—ë—Ç–∫–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∑–∞–ø–∏—Å–æ–∫ –ø—Ä–∏ –∑—É–º–µ: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∑—É–º–∞
        if (this.eventBus) {
            const onZoom = ({ percentage }) => {
                try {
                    const world = this.worldLayer || this.app.stage;
                    const s = world?.scale?.x || (percentage ? percentage / 100 : 1);
                    const res = this.app?.renderer?.resolution || 1;
                    for (const [, pixiObject] of this.objects) {
                        const mb = pixiObject && pixiObject._mb;
                        if (mb && mb.type === 'note' && mb.instance && typeof mb.instance.updateCrispnessForZoom === 'function') {
                            mb.instance.updateCrispnessForZoom(s, res);
                        }
                    }
                } catch (e) {
                    console.warn('PixiEngine: zoom crispness update failed', e);
                }
            };
            this.eventBus.on(Events.UI.ZoomPercent, onZoom);
        }
    }

    createObject(objectData) {
        let pixiObject;

        const instance = ObjectFactory.create(objectData.type, objectData, this.eventBus);
        if (instance) {
            pixiObject = instance.getPixi();
            const prevMb = pixiObject._mb || {};
            pixiObject._mb = {
                ...prevMb,
                objectId: objectData.id,
                type: objectData.type,
                instance: instance // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–º –æ–±—ä–µ–∫—Ç
            };
            // –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —á—ë—Ç–∫–æ—Å—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Å–æ–∫ –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–∞—Å—à—Ç–∞–±—É/—Ä–µ–∑–æ–ª—é—Ü–∏–∏
            try {
                if (pixiObject && pixiObject._mb && pixiObject._mb.type === 'note' && pixiObject._mb.instance && typeof pixiObject._mb.instance.updateCrispnessForZoom === 'function') {
                    const world = this.worldLayer || this.app.stage;
                    const s = world?.scale?.x || 1;
                    const res = this.app?.renderer?.resolution || 1;
                    pixiObject._mb.instance.updateCrispnessForZoom(s, res);
                }
            } catch (_) {}
        } else {
            console.warn(`Unknown object type: ${objectData.type}`);
            pixiObject = this.createDefaultObject(objectData);
        }

        if (pixiObject) {
            pixiObject.x = objectData.position.x;
            pixiObject.y = objectData.position.y;
            pixiObject.eventMode = 'static'; // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º deprecation warning
            pixiObject.cursor = 'pointer';
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ –∏ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–æ–≤ (resize),
            // –µ—Å–ª–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã –≤—ã—à–µ (–¥–ª—è frame —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
            const prevMb = pixiObject._mb || {};
            pixiObject._mb = {
                ...prevMb,
                objectId: prevMb.objectId ?? objectData.id,
                type: prevMb.type ?? objectData.type,
                properties: prevMb.properties ?? (objectData.properties || {}),
                instance: prevMb.instance
            };
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –≤—Ä–∞—â–µ–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä –æ–±—ä–µ–∫—Ç–∞
            if (pixiObject.anchor !== undefined) {
                // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å anchor (—Ç–µ–∫—Å—Ç, —Å–ø—Ä–∞–π—Ç—ã)
                pixiObject.anchor.set(0.5, 0.5);
                // –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è anchor, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—â—ë –Ω–µ —Å–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã
                const needsCompensation = !objectData.transform || !objectData.transform.pivotCompensated;
                if (needsCompensation) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–∞ (objectData.width/height),
                    // —Ç.–∫. —Ç–µ–∫—Å—Ç—É—Ä–∞ —Å–ø—Ä–∞–π—Ç–∞ –º–æ–∂–µ—Ç –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∏ getBounds() –≤–µ—Ä–Ω—ë—Ç 0
                    const halfW = (objectData.width || 0) / 2;
                    const halfH = (objectData.height || 0) / 2;
                    pixiObject.x += halfW;
                    pixiObject.y += halfH;
                }
            } else if (pixiObject instanceof PIXI.Graphics) {
                // –î–ª—è Graphics –æ–±—ä–µ–∫—Ç–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pivot –≤ —Ü–µ–Ω—Ç—Ä
                const bounds = pixiObject.getBounds();
                const pivotX = bounds.width / 2;
                const pivotY = bounds.height / 2;
                pixiObject.pivot.set(pivotX, pivotY);
                
                // –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ pivot, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—â–µ –ù–ï –±—ã–ª–∏ —Å–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã
                // –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ –Ω–∞–ª–∏—á–∏—é transform.pivotCompensated
                const needsCompensation = !objectData.transform || !objectData.transform.pivotCompensated;
                
                if (needsCompensation) {
                    pixiObject.x += pivotX;
                    pixiObject.y += pivotY;
                }
            } else if (pixiObject && pixiObject.pivot && (pixiObject.pivot.x !== 0 || pixiObject.pivot.y !== 0)) {
                // –û–±—â–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –∏–Ω—Å—Ç–∞–Ω—Å –≤–µ—Ä–Ω—É–ª Container —Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º pivot ‚Äî –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ
                const needsCompensation = !objectData.transform || !objectData.transform.pivotCompensated;
                if (needsCompensation) {
                    pixiObject.x += pixiObject.pivot.x;
                    pixiObject.y += pixiObject.pivot.y;
                }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (objectData.transform && objectData.transform.rotation !== undefined) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã (—É–≥–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
                const angleRadians = objectData.transform.rotation * Math.PI / 180;
                pixiObject.rotation = angleRadians;
            }
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ hit testing
            if (pixiObject.beginFill) {
                // no-op
            }

            // Z-–ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ (ZOrderManager)
            this.worldLayer.addChild(pixiObject);
            this.objects.set(objectData.id, pixiObject);


        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –≤ gridLayer
    setGrid(gridInstance) {
        if (!this.gridLayer) return;
        this.gridLayer.removeChildren();
        if (gridInstance && gridInstance.getPixiObject) {
            const g = gridInstance.getPixiObject();
            g.zIndex = 0;
            g.x = 0;
            g.y = 0;
            this.gridLayer.addChild(g);
        }
    }

    // createFrame —É–¥–∞–ª—ë–Ω ‚Äî –ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ FrameObject

    // createText —É–¥–∞–ª—ë–Ω ‚Äî –ª–æ–≥–∏–∫–∞ –≤ TextObject

    // createEmoji —É–¥–∞–ª—ë–Ω ‚Äî –ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ EmojiObject

    // createShape —É–¥–∞–ª—ë–Ω ‚Äî –ª–æ–≥–∏–∫–∞ –≤ ShapeObject

    // createDrawing —É–¥–∞–ª—ë–Ω ‚Äî –ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ DrawingObject

    createDefaultObject(objectData) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const graphics = new PIXI.Graphics();
        graphics.beginFill(0xFF0000, 0.5);
        graphics.drawRect(0, 0, objectData.width || 100, objectData.height || 100);
        graphics.endFill();
        return graphics;
    }

    removeObject(objectId) {
        const pixiObject = this.objects.get(objectId);
        if (pixiObject) {
            console.log('üóëÔ∏è PixiEngine: —É–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ü–µ–Ω—ã:', objectId);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if (this.worldLayer) {
                this.worldLayer.removeChild(pixiObject);
            } else {
                this.app.stage.removeChild(pixiObject);
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—ç–º–æ–¥–∂–∏
            if (pixiObject instanceof PIXI.Sprite) {
                console.log('üóëÔ∏è PixiEngine: –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/—ç–º–æ–¥–∂–∏');
                
                // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è data URL)
                if (pixiObject.texture && pixiObject.texture !== PIXI.Texture.WHITE) {
                    // –ù–µ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã PIXI
                    const textureSource = pixiObject.texture.baseTexture?.resource?.src;
                    if (textureSource && (textureSource.startsWith('data:') || textureSource.includes('emodji'))) {
                        pixiObject.texture.destroy(false); // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
                    }
                }
                
                // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
                pixiObject.removeAllListeners();
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–ø—Ä–∞–π—Ç
                pixiObject.destroy({ children: true, texture: false, baseTexture: false });
            } else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                if (pixiObject.destroy) {
                    pixiObject.destroy({ children: true });
                }
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤
            this.objects.delete(objectId);
            
            // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ù–î–ï–† –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            if (this.app && this.app.renderer) {
                this.app.renderer.render(this.app.stage);
            }
            
            console.log(`‚úÖ PixiEngine: –æ–±—ä–µ–∫—Ç ${objectId} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏ —Ä–µ–Ω–¥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω`);
        } else {
            console.warn(`‚ö†Ô∏è PixiEngine: –æ–±—ä–µ–∫—Ç ${objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
     */
    updateObjectSize(objectId, size, objectType = null) {
        const pixiObject = this.objects.get(objectId);
        if (!pixiObject) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é (—Ü–µ–Ω—Ç—Ä) –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–Ω—Å—Ç–∞–Ω—Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é
        const position = { x: pixiObject.x, y: pixiObject.y };
        
        
        // –î–ª—è Graphics –æ–±—ä–µ–∫—Ç–æ–≤ (—Ä–∞–º–∫–∏, —Ñ–∏–≥—É—Ä—ã) –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Å—Ç–∞–Ω—Å —Å updateSize
        const meta = pixiObject._mb || {};
        if (meta.instance && typeof meta.instance.updateSize === 'function') {
            meta.instance.updateSize(size);
        } else if (pixiObject instanceof PIXI.Graphics) {
            // Fallback –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –∏–Ω—Å—Ç–∞–Ω—Å–∞
            this.recreateGraphicsObject(pixiObject, size, position, objectType);
        }
    }

    /**
     * –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å Graphics –æ–±—ä–µ–∫—Ç —Å –Ω–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
     */
    recreateGraphicsObject(pixiObject, size, position, objectType = null) {
        // –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫—É
        pixiObject.clear();
        
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ —Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø—É –æ–±—ä–µ–∫—Ç–∞
        if (objectType === 'drawing') {
            // –†–∏—Å—É–Ω–æ–∫: –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Ç–æ—á–∫–∞–º —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥ –Ω–æ–≤—ã–π size
            const meta = pixiObject._mb || {};
            const props = meta.properties || {};
            const color = props.strokeColor ?? 0x111827;
            const widthPx = props.strokeWidth ?? 2;
            const alpha = props.mode === 'marker' ? 0.6 : 1;
            const pts = Array.isArray(props.points) ? props.points : [];
            const baseW = props.baseWidth || size.width || 1;
            const baseH = props.baseHeight || size.height || 1;
            const scaleX = baseW ? (size.width / baseW) : 1;
            const scaleY = baseH ? (size.height / baseH) : 1;
            const lineWidth = props.mode === 'marker' ? widthPx * 2 : widthPx;
            pixiObject.lineStyle({ width: lineWidth, color, alpha, cap: 'round', join: 'round', miterLimit: 2, alignment: 0.5 });
            pixiObject.blendMode = props.mode === 'marker' ? PIXI.BLEND_MODES.LIGHTEN : PIXI.BLEND_MODES.NORMAL;
            if (pts.length > 0) {
                if (pts.length < 3) {
                    pixiObject.moveTo(pts[0].x * scaleX, pts[0].y * scaleY);
                    for (let i = 1; i < pts.length; i++) pixiObject.lineTo(pts[i].x * scaleX, pts[i].y * scaleY);
                } else {
                    pixiObject.moveTo(pts[0].x * scaleX, pts[0].y * scaleY);
                    for (let i = 1; i < pts.length - 1; i++) {
                        const cx = pts[i].x * scaleX, cy = pts[i].y * scaleY;
                        const nx = pts[i + 1].x * scaleX, ny = pts[i + 1].y * scaleY;
                        const mx = (cx + nx) / 2, my = (cy + ny) / 2;
                        pixiObject.quadraticCurveTo(cx, cy, mx, my);
                    }
                    const pen = pts[pts.length - 2];
                    const last = pts[pts.length - 1];
                    pixiObject.quadraticCurveTo(pen.x * scaleX, pen.y * scaleY, last.x * scaleX, last.y * scaleY);
                }
            }
        } else {
            // Fallback - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)
            console.warn(`‚ö†Ô∏è –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É`);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—É—Ä –±–µ–∑ –∑–∞–ª–∏–≤–∫–∏ - —ç—Ç–æ —Ä–∞–º–∫–∞
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ª–∏–≤–∫–∞ - —ç—Ç–æ —Ñ–∏–≥—É—Ä–∞
            const borderWidth = 2;
            pixiObject.lineStyle(borderWidth, 0x333333, 1);
            pixiObject.beginFill(0xFFFFFF, 0.1);
            
            const halfBorder = borderWidth / 2;
            pixiObject.drawRect(halfBorder, halfBorder, size.width - borderWidth, size.height - borderWidth);
            pixiObject.endFill();
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pivot –≤ —Ü–µ–Ω—Ç—Ä (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è)
        const pivotX = size.width / 2;
        const pivotY = size.height / 2;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–µ–Ω—Ç—Ä –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è pivot
        const prevCenter = { x: pixiObject.x, y: pixiObject.y };
        pixiObject.pivot.set(pivotX, pivotY);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä, —á—Ç–æ–±—ã –ª–µ–≤—ã–π-–≤–µ—Ä—Ö –≤ state –Ω–µ ¬´—É–ø–æ–ª–∑–∞–ª¬ª –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ
        pixiObject.x = prevCenter.x;
        pixiObject.y = prevCenter.y;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
     */
    // –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤/—ç–º–æ–¥–∂–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–∫—Ç–∞
     */
    updateObjectContent(objectId, content) {
        this.renderer.updateObjectContent(objectId, content);
    }

    /**
     * –°–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç –æ–±—ä–µ–∫—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    hideObjectText(objectId) {
        this.renderer.hideObjectText(objectId);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –æ–±—ä–µ–∫—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    showObjectText(objectId) {
        this.renderer.showObjectText(objectId);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    updateObjectRotation(objectId, angleDegrees) {
        const pixiObject = this.objects.get(objectId);
        if (!pixiObject) return;

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
        const angleRadians = angleDegrees * Math.PI / 180;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç
        pixiObject.rotation = angleRadians;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏ –¥–ª—è —Ñ—Ä–µ–π–º–∞, –Ω–µ –∏–∑–º–µ–Ω—è—è —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª–∞ ¬´–≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è¬ª (—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω)
     */
    setFrameFill(objectId, width, height, fillColor = 0xFFFFFF) {
        const pixiObject = this.objects.get(objectId);
        if (!pixiObject || !(pixiObject instanceof PIXI.Graphics)) return;
        const meta = pixiObject._mb || {};
        if (meta.type !== 'frame') return;
        if (meta.instance) {
            meta.instance.setFill(fillColor);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    hitTest(x, y) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –ø–æ–∑–∏—Ü–∏–∏ (PIXI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        const point = new PIXI.Point(x, y);
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –≤ worldLayer –æ—Ç –≤–µ—Ä—Ö–Ω–∏—Ö –∫ –Ω–∏–∂–Ω–∏–º
        const container = this.worldLayer || this.app.stage;
        
        for (let i = container.children.length - 1; i >= 0; i--) {
            const child = container.children[i];
            
            if (child.containsPoint && child.containsPoint(point)) {
                // –ù–∞—Ö–æ–¥–∏–º ID –æ–±—ä–µ–∫—Ç–∞
                for (const [objectId, pixiObject] of this.objects.entries()) {
                    if (pixiObject === child) {
                        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ—Ä–µ–π–º–æ–≤: –µ—Å–ª–∏ —É —Ñ—Ä–µ–π–º–∞ –µ—Å—Ç—å –¥–µ—Ç–∏ –∏ –∫–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–±–ª–∞—Å—Ç–∏ (–±–µ–∑ 20px –ø–µ—Ä–∏–º–µ—Ç—Ä–∞),
                        // —Ç–æ –æ—Ç–¥–∞—ë–º —Ö–∏—Ç-—Ç–µ—Å—Ç –∫–∞–∫ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å box-select.
                        const mb = child._mb || {};
                        if (mb.type === 'frame') {
                            const props = mb.properties || {};
                            const hasChildren = !!props && !!this._hasFrameChildren(objectId);
                            if (hasChildren) {
                                const b = child.getBounds();
                                const inner = { x: b.x + 20, y: b.y + 20, w: Math.max(0, b.width - 40), h: Math.max(0, b.height - 40) };
                                if (point.x >= inner.x && point.x <= inner.x + inner.w && point.y >= inner.y && point.y <= inner.y + inner.h) {
                                    return { type: 'empty' };
                                }
                            }
                        }
                        return {
                            type: 'object',
                            object: objectId,
                            pixiObject: child
                        };
                    }
                }
            } else {
                // –î–æ–ø. —Ö–∏—Ç-—Ç–µ—Å—Ç –¥–ª—è –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π (stroke), –≥–¥–µ containsPoint –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
                const meta = child._mb;
                if (meta && meta.type === 'drawing' && child.toLocal) {
                    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ—á–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞
                    const local = child.toLocal(point);
                    const props = meta.properties || {};
                    const pts = Array.isArray(props.points) ? props.points : [];
                    if (pts.length >= 2) {
                        // –û—Ü–µ–Ω–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
                        const baseW = props.baseWidth || 1;
                        const baseH = props.baseHeight || 1;
                        const b = child.getBounds();
                        const scaleX = baseW ? (b.width / baseW) : 1;
                        const scaleY = baseH ? (b.height / baseH) : 1;
                        // –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏ —Å —É—á—ë—Ç–æ–º —Ä–µ–∂–∏–º–∞ –º–∞—Ä–∫–µ—Ä–∞
                        const baseWidth = props.strokeWidth || 2;
                        const lineWidth = (props.mode === 'marker' ? baseWidth * 2 : baseWidth);
                        const threshold = Math.max(4, lineWidth / 2 + 3);
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                        for (let j = 0; j < pts.length - 1; j++) {
                            const ax = pts[j].x * scaleX;
                            const ay = pts[j].y * scaleY;
                            const bx = pts[j + 1].x * scaleX;
                            const by = pts[j + 1].y * scaleY;
                            const dist = this._distancePointToSegment(local.x, local.y, ax, ay, bx, by);
                            if (dist <= threshold) {
                                // –ù–∞–π–¥—ë–º –∏ –≤–µ—Ä–Ω—ë–º ID
                                for (const [objectId, pixiObject] of this.objects.entries()) {
                                    if (pixiObject === child) {
                                        return { type: 'object', object: objectId, pixiObject: child };
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        return { type: 'empty' };
    }

    _hasFrameChildren(frameId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö PIXI –æ–±—ä–µ–∫—Ç–æ–≤, —É –∫–æ–≥–æ frameId —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        for (const [objectId, pixiObject] of this.objects.entries()) {
            if (objectId === frameId) continue;
            const mb = pixiObject && pixiObject._mb;
            const props = mb && mb.properties;
            if (props && props.frameId === frameId) return true;
        }
        return false;
    }

    // –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∏/—Ö–∏—Ç-—Ç–µ—Å—Ç—ã –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ
    _distancePointToSegment(px, py, ax, ay, bx, by) {
        const vectorABx = bx - ax;
        const vectorABy = by - ay;
        const vectorAPx = px - ax;
        const vectorAPy = py - ay;
        const squaredLengthAB = vectorABx * vectorABx + vectorABy * vectorABy;
        if (squaredLengthAB === 0) {
            return Math.hypot(px - ax, py - ay);
        }
        let t = (vectorAPx * vectorABx + vectorAPy * vectorABy) / squaredLengthAB;
        t = Math.max(0, Math.min(1, t));
        const closestX = ax + t * vectorABx;
        const closestY = ay + t * vectorABy;
        return Math.hypot(px - closestX, py - closestY);
    }

    /**
     * –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç–∏–ø—É
     * @param {Object} position - –ø–æ–∑–∏—Ü–∏—è {x, y}
     * @param {string} type - —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
     * @returns {Object|null} –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ null
     */
    findObjectByPosition(position, type) {
        for (const [objectId, pixiObject] of this.objects) {
            if (!pixiObject || !pixiObject._mb) continue;
            
            const childMeta = pixiObject._mb;
            if (childMeta.type !== type) continue;
            
            // –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—ä–µ–∫—Ç–∞
            const bounds = pixiObject.getBounds();
            if (!bounds) continue;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–±—ä–µ–∫—Ç–∞
            if (bounds.x <= position.x && position.x <= bounds.x + bounds.width &&
                bounds.y <= position.y && position.y <= bounds.y + bounds.height) {
                return {
                    id: objectId,
                    type: childMeta.type,
                    position: { x: pixiObject.x, y: pixiObject.y },
                    size: { width: bounds.width, height: bounds.height }
                };
            }
        }
        
        return null;
    }

    destroy() {
        this.app.destroy(true);
    }
}