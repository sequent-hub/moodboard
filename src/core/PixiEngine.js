import * as PIXI from 'pixi.js';

export class PixiEngine {
    constructor(container, eventBus, options) {
        this.container = container;
        this.eventBus = eventBus;
        this.options = options;
        this.objects = new Map();
    }

    async init() {
        this.app = new PIXI.Application({
            width: this.options.width,
            height: this.options.height,
            backgroundColor: this.options.backgroundColor,
            antialias: true
        });

        this.container.appendChild(this.app.view);



    }

    createObject(objectData) {
        let pixiObject;

        switch (objectData.type) {
            case 'frame':
                pixiObject = this.createFrame(objectData);
                break;
            case 'simple-text':
            case 'text':
                pixiObject = this.createText(objectData);
                break;
            case 'shape':
                pixiObject = this.createShape(objectData);
                break;
            default:
                console.warn(`Unknown object type: ${objectData.type}`);
                pixiObject = this.createDefaultObject(objectData);
        }

        if (pixiObject) {
            pixiObject.x = objectData.position.x;
            pixiObject.y = objectData.position.y;
            pixiObject.eventMode = 'static'; // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º deprecation warning
            pixiObject.cursor = 'pointer';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –≤—Ä–∞—â–µ–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä –æ–±—ä–µ–∫—Ç–∞
            if (pixiObject.anchor !== undefined) {
                // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å anchor (—Ç–µ–∫—Å—Ç, —Å–ø—Ä–∞–π—Ç—ã)
                pixiObject.anchor.set(0.5, 0.5);
            } else if (pixiObject instanceof PIXI.Graphics) {
                // –î–ª—è Graphics –æ–±—ä–µ–∫—Ç–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pivot –≤ —Ü–µ–Ω—Ç—Ä
                const bounds = pixiObject.getBounds();
                const pivotX = bounds.width / 2;
                const pivotY = bounds.height / 2;
                pixiObject.pivot.set(pivotX, pivotY);
                
                // –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ pivot, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—â–µ –ù–ï –±—ã–ª–∏ —Å–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã
                // –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ –Ω–∞–ª–∏—á–∏—é transform.pivotCompensated
                const needsCompensation = !objectData.transform || !objectData.transform.pivotCompensated;
                
                if (needsCompensation) {
                    pixiObject.x += pivotX;
                    pixiObject.y += pivotY;
                }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (objectData.transform && objectData.transform.rotation !== undefined) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã (—É–≥–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
                const angleRadians = objectData.transform.rotation * Math.PI / 180;
                pixiObject.rotation = angleRadians;
            }
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ hit testing
            if (pixiObject.beginFill) {
                // no-op
            }

            this.app.stage.addChild(pixiObject);
            this.objects.set(objectData.id, pixiObject);


        }
    }

    createFrame(objectData) {
        const graphics = new PIXI.Graphics();
        
        const borderWidth = 2;
        const width = objectData.width || 100;
        const height = objectData.height || 100;
        
        // –†–∞–º–∫–∞ —Å —É—á–µ—Ç–æ–º —Ç–æ–ª—â–∏–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã
        graphics.lineStyle(borderWidth, objectData.borderColor || 0x333333, 1);
        graphics.beginFill(objectData.backgroundColor || 0xFFFFFF, objectData.backgroundAlpha || 0.1);
        
        // –†–∏—Å—É–µ–º —Å –æ—Ç—Å—Ç—É–ø–æ–º –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É —Ç–æ–ª—â–∏–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã
        const halfBorder = borderWidth / 2;
        graphics.drawRect(halfBorder, halfBorder, width - borderWidth, height - borderWidth);
        graphics.endFill();

        return graphics;
    }

    createText(objectData) {
        const textStyle = new PIXI.TextStyle({
            fontFamily: objectData.fontFamily || 'Arial',
            fontSize: objectData.fontSize || 16,
            fill: objectData.color || 0x000000,
            fontWeight: objectData.fontWeight || 'normal',
            fontStyle: objectData.fontStyle || 'normal'
        });

        const text = new PIXI.Text(objectData.content || 'Sample Text', textStyle);
        return text;
    }

    createShape(objectData) {
        const graphics = new PIXI.Graphics();
        
        // –¶–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç/–∫—Ä—É–≥
        graphics.beginFill(objectData.color || 0x3b82f6);
        
        if (objectData.shape === 'circle') {
            graphics.drawCircle(
                (objectData.width || 50) / 2, 
                (objectData.height || 50) / 2, 
                (objectData.width || 50) / 2
            );
        } else {
            graphics.drawRect(0, 0, objectData.width || 50, objectData.height || 50);
        }
        
        graphics.endFill();
        return graphics;
    }

    createDefaultObject(objectData) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const graphics = new PIXI.Graphics();
        graphics.beginFill(0xFF0000, 0.5);
        graphics.drawRect(0, 0, objectData.width || 100, objectData.height || 100);
        graphics.endFill();
        return graphics;
    }

    removeObject(objectId) {
        const pixiObject = this.objects.get(objectId);
        if (pixiObject) {
            this.app.stage.removeChild(pixiObject);
            this.objects.delete(objectId);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
     */
    updateObjectSize(objectId, size, objectType = null) {
        const pixiObject = this.objects.get(objectId);
        if (!pixiObject) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        const position = { x: pixiObject.x, y: pixiObject.y };
        
        console.log(`üé® –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ ${objectId}, —Ç–∏–ø: ${objectType}`);
        
        // –î–ª—è Graphics –æ–±—ä–µ–∫—Ç–æ–≤ (—Ä–∞–º–∫–∏, —Ñ–∏–≥—É—Ä—ã) –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é
        if (pixiObject instanceof PIXI.Graphics) {
            this.recreateGraphicsObject(pixiObject, size, position, objectType);
        } 
        // –î–ª—è Text –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        else if (pixiObject instanceof PIXI.Text) {
            this.updateTextObjectSize(pixiObject, size);
        }
    }

    /**
     * –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å Graphics –æ–±—ä–µ–∫—Ç —Å –Ω–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
     */
    recreateGraphicsObject(pixiObject, size, position, objectType = null) {
        // –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫—É
        pixiObject.clear();
        
        console.log(`üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º Graphics –æ–±—ä–µ–∫—Ç, —Ç–∏–ø: ${objectType}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ —Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø—É –æ–±—ä–µ–∫—Ç–∞
        if (objectType === 'frame') {
            // –†–∞–º–∫–∞
            const borderWidth = 2;
            pixiObject.lineStyle(borderWidth, 0x333333, 1);
            pixiObject.beginFill(0xFFFFFF, 0.1);
            
            const halfBorder = borderWidth / 2;
            pixiObject.drawRect(halfBorder, halfBorder, size.width - borderWidth, size.height - borderWidth);
            pixiObject.endFill();
        } else if (objectType === 'shape') {
            // –§–∏–≥—É—Ä–∞ (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è)
            pixiObject.beginFill(0x3b82f6, 1);
            pixiObject.drawRect(0, 0, size.width, size.height);
            pixiObject.endFill();
        } else {
            // Fallback - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)
            console.warn(`‚ö†Ô∏è –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É`);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—É—Ä –±–µ–∑ –∑–∞–ª–∏–≤–∫–∏ - —ç—Ç–æ —Ä–∞–º–∫–∞
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ª–∏–≤–∫–∞ - —ç—Ç–æ —Ñ–∏–≥—É—Ä–∞
            const borderWidth = 2;
            pixiObject.lineStyle(borderWidth, 0x333333, 1);
            pixiObject.beginFill(0xFFFFFF, 0.1);
            
            const halfBorder = borderWidth / 2;
            pixiObject.drawRect(halfBorder, halfBorder, size.width - borderWidth, size.height - borderWidth);
            pixiObject.endFill();
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pivot –≤ —Ü–µ–Ω—Ç—Ä (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è)
        const pivotX = size.width / 2;
        const pivotY = size.height / 2;
        pixiObject.pivot.set(pivotX, pivotY);
        // –ü–æ–∑–∏—Ü–∏—é –Ω–µ –º–µ–Ω—è–µ–º –∑–¥–µ—Å—å; –æ–Ω–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Å—Ç–æ—Ä–æ–Ω–æ–π
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
     */
    updateTextObjectSize(textObject, size) {
        // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∫ –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
        const fontSize = Math.max(12, Math.min(size.height / 2, size.width / 8));
        textObject.style.fontSize = fontSize;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        textObject.style.wordWrap = true;
        textObject.style.wordWrapWidth = size.width - 10; // –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    updateObjectRotation(objectId, angleDegrees) {
        const pixiObject = this.objects.get(objectId);
        if (!pixiObject) return;

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
        const angleRadians = angleDegrees * Math.PI / 180;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç
        pixiObject.rotation = angleRadians;
    }

    /**
     * –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    hitTest(x, y) {
        // Hit test at coordinates
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –ø–æ–∑–∏—Ü–∏–∏ (PIXI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        const point = new PIXI.Point(x, y);
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –æ—Ç –≤–µ—Ä—Ö–Ω–∏—Ö –∫ –Ω–∏–∂–Ω–∏–º
        for (let i = this.app.stage.children.length - 1; i >= 0; i--) {
            const child = this.app.stage.children[i];
            if (child.containsPoint && child.containsPoint(point)) {
                // –ù–∞—Ö–æ–¥–∏–º ID –æ–±—ä–µ–∫—Ç–∞
                for (const [objectId, pixiObject] of this.objects.entries()) {
                    if (pixiObject === child) {
                        return {
                            type: 'object',
                            object: objectId,
                            pixiObject: child
                        };
                    }
                }
            }
        }
        
        return { type: 'empty' };
    }

    destroy() {
        this.app.destroy(true);
    }
}