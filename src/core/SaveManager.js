/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */
export class SaveManager {
    constructor(eventBus, options = {}) {
        this.eventBus = eventBus;
        this.options = {
            // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º)
            autoSave: true,
            saveDelay: 1500, // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã
            maxRetries: 3,
            retryDelay: 1000,
            periodicSaveInterval: 30000, // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–±–µ—Ä–µ–º –∏–∑ options)
            saveEndpoint: options.saveEndpoint || '/api/moodboard/save',
            loadEndpoint: options.loadEndpoint || '/api/moodboard/load'
        };
        
        this.saveTimer = null;
        this.isRequestInProgress = false;
        this.retryCount = 0;
        this.lastSavedData = null;
        this.hasUnsavedChanges = false;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.saveStatus = 'idle'; // idle, saving, saved, error
        
        this.setupEventListeners();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (!this.options.autoSave) return;
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö
        this.eventBus.on('board:data-changed', (data) => {
            this.scheduleAutoSave(data);
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        this.eventBus.on('object:created', () => {
            this.markAsChanged();
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        this.eventBus.on('object:updated', (data) => {
            console.log('üîÑ –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', data.objectId, '–Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:', data.position);
            this.markAsChanged();
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        this.eventBus.on('object:deleted', () => {
            this.markAsChanged();
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        this.eventBus.on('tool:drag:end', () => {
            this.markAsChanged();
        });
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', (e) => {
            if (this.hasUnsavedChanges) {
                this.saveImmediately();
                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                e.preventDefault();
                e.returnValue = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
                return e.returnValue;
            }
        });
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (this.options.autoSave) {
            setInterval(() => {
                if (this.hasUnsavedChanges && !this.isRequestInProgress) {
                    this.saveImmediately();
                }
            }, this.options.periodicSaveInterval);
        }
    }
    
    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ
     */
    markAsChanged() {
        this.hasUnsavedChanges = true;
        this.scheduleAutoSave();
    }
    
    /**
     * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
     */
    scheduleAutoSave(data = null) {
        if (!this.options.autoSave) return;
        
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (this.saveTimer) {
            clearTimeout(this.saveTimer);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        this.saveTimer = setTimeout(() => {
            this.saveImmediately(data);
        }, this.options.saveDelay);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        this.updateSaveStatus('pending');
    }
    
    /**
     * –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    async saveImmediately(data = null) {
        if (this.isRequestInProgress) return;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const saveData = data || await this.getBoardData();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if (this.lastSavedData && JSON.stringify(saveData) === JSON.stringify(this.lastSavedData)) {
                return; // –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            }
            
            this.isRequestInProgress = true;
            this.updateSaveStatus('saving');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await this.sendSaveRequest(saveData);
            
            if (response.success) {
                this.lastSavedData = JSON.parse(JSON.stringify(saveData));
                this.hasUnsavedChanges = false;
                this.retryCount = 0;
                this.updateSaveStatus('saved');
                
                // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                this.eventBus.emit('save:success', {
                    data: saveData,
                    timestamp: new Date().toISOString()
                });
            } else {
                throw new Error(response.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            this.handleSaveError(error, data);
        } finally {
            this.isRequestInProgress = false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    async getBoardData() {
        return new Promise((resolve) => {
            const requestData = { data: null };
            this.eventBus.emit('save:get-board-data', requestData);
            resolve(requestData.data);
        });
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    async sendSaveRequest(data) {
        // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
        
        if (!csrfToken) {
            throw new Error('CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ <meta name="csrf-token" content="{{ csrf_token() }}"> –≤ HTML.');
        }

        const requestBody = {
            boardId: data.id || 'default',
            boardData: data
        };

        console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', {
            endpoint: this.options.saveEndpoint,
            boardId: requestBody.boardId,
            dataSize: JSON.stringify(requestBody).length,
            objectsCount: requestBody.boardData?.objects?.length || 0
        });

        const response = await fetch(this.options.saveEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-CSRF-TOKEN': csrfToken,
                'X-Requested-With': 'XMLHttpRequest'
            },
            credentials: 'same-origin', // –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–∫–∏ Laravel
            body: JSON.stringify(requestBody)
        });
        
        if (!response.ok) {
            let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
            
            try {
                const errorData = await response.json();
                if (errorData.message) {
                    errorMessage = errorData.message;
                }
                if (errorData.errors) {
                    // Laravel validation errors
                    const validationErrors = Object.values(errorData.errors).flat();
                    errorMessage += '. ' + validationErrors.join(', ');
                }
            } catch (parseError) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', parseError);
            }
            
            throw new Error(errorMessage);
        }
        
        return await response.json();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    async handleSaveError(error, data) {
        this.retryCount++;
        this.updateSaveStatus('error', error.message);
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
        this.eventBus.emit('save:error', {
            error: error.message,
            retryCount: this.retryCount,
            maxRetries: this.options.maxRetries
        });
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (this.retryCount < this.options.maxRetries) {
            console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${this.options.retryDelay}–º—Å (–ø–æ–ø—ã—Ç–∫–∞ ${this.retryCount + 1}/${this.options.maxRetries})`);
            
            setTimeout(() => {
                this.saveImmediately(data);
            }, this.options.retryDelay * this.retryCount); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadBoardData(boardId) {
        try {
            const response = await fetch(`${this.options.loadEndpoint}/${boardId}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                this.lastSavedData = result.data;
                this.hasUnsavedChanges = false;
                
                // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                this.eventBus.emit('save:loaded', {
                    data: result.data,
                    timestamp: new Date().toISOString()
                });
                
                return result.data;
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.eventBus.emit('save:load-error', { error: error.message });
            throw error;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    updateSaveStatus(status, message = '') {
        this.saveStatus = status;
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        this.eventBus.emit('save:status-changed', {
            status,
            message,
            hasUnsavedChanges: this.hasUnsavedChanges,
            timestamp: new Date().toISOString()
        });
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
     */
    async forceSave() {
        if (this.saveTimer) {
            clearTimeout(this.saveTimer);
            this.saveTimer = null;
        }
        
        await this.saveImmediately();
    }
    
    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    setAutoSave(enabled) {
        this.options.autoSave = enabled;
        
        if (!enabled && this.saveTimer) {
            clearTimeout(this.saveTimer);
            this.saveTimer = null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatus() {
        return {
            saveStatus: this.saveStatus,
            hasUnsavedChanges: this.hasUnsavedChanges,
            isRequestInProgress: this.isRequestInProgress,
            retryCount: this.retryCount,
            autoSaveEnabled: this.options.autoSave
        };
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        if (this.saveTimer) {
            clearTimeout(this.saveTimer);
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º
        if (this.hasUnsavedChanges && this.options.autoSave) {
            this.saveImmediately();
        }
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.eventBus.off('board:data-changed');
        this.eventBus.off('object:created');
        this.eventBus.off('object:updated');
        this.eventBus.off('object:deleted');
        this.eventBus.off('tool:drag:end');
    }
}
