import { CoreMoodBoard } from '../core/index.js';
import { Events } from '../core/events/Events.js';
import { Toolbar } from '../ui/Toolbar.js';
import { SaveStatus } from '../ui/SaveStatus.js';
import { Topbar } from '../ui/Topbar.js';
import { ZoomPanel } from '../ui/ZoomPanel.js';
import { MapPanel } from '../ui/MapPanel.js';
import { ContextMenu } from '../ui/ContextMenu.js';
import { WorkspaceManager } from './WorkspaceManager.js';
import { DataManager } from './DataManager.js';
import { ActionHandler } from './ActionHandler.js';

/**
 * –ì–æ—Ç–æ–≤—ã–π MoodBoard —Å UI - –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø–∞–∫–µ—Ç–∞
 */
export class MoodBoard {
    constructor(container, options = {}, data = null) {
        this.containerSelector = container;
        this.container = typeof container === 'string' 
            ? document.querySelector(container)
            : container;
            
        if (!this.container) {
            throw new Error('Container not found');
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.options = {
            theme: 'light',
            ...options
        };
        
        this.data = data;
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.coreMoodboard = null;
        this.toolbar = null;
        this.saveStatus = null;
        this.contextMenu = null;
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        this.workspaceManager = new WorkspaceManager(this.container, this.options);
        this.dataManager = null;
        this.actionHandler = null;
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
     */
    async init() {
        try {
            // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            const { workspace, toolbar, canvas, topbar } = this.workspaceManager.createWorkspaceStructure();
            this.workspaceElement = workspace;
            this.toolbarContainer = toolbar;
            this.canvasContainer = canvas;
            this.topbarContainer = topbar;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CoreMoodBoard
            await this.initCoreMoodBoard();
            
            // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            this.dataManager = new DataManager(this.coreMoodboard);
            this.actionHandler = new ActionHandler(this.dataManager, this.workspaceManager);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
            this.initToolbar();
            this.initTopbar();
            this.initZoombar();
            this.initMapbar();
            this.initContextMenu();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ—Ç–æ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)
            await this.loadExistingBoard();
            
            console.log('MoodBoard initialized');
        } catch (error) {
            console.error('MoodBoard init failed:', error);
            throw error;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç CoreMoodBoard
     */
    async initCoreMoodBoard() {
        const canvasSize = this.workspaceManager.getCanvasSize();
        
        const moodboardOptions = {
            boardId: this.options.boardId || 'workspace-board',
            width: canvasSize.width,
            height: canvasSize.height,
            backgroundColor: this.options.theme === 'dark' ? 0x2a2a2a : 0xF5F5F5,
            // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            saveEndpoint: this.options.saveEndpoint,
            loadEndpoint: this.options.loadEndpoint
        };
        
        this.coreMoodboard = new CoreMoodBoard(this.canvasContainer, moodboardOptions);
        await this.coreMoodboard.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    initToolbar() {
        this.toolbar = new Toolbar(
            this.toolbarContainer, 
            this.coreMoodboard.eventBus,
            this.options.theme
        );
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)
        this.saveStatus = new SaveStatus(
            this.workspaceElement,
            this.coreMoodboard.eventBus
        );
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç—É–ª–±–∞—Ä–∞
        this.coreMoodboard.eventBus.on(Events.UI.ToolbarAction, (action) => {
            this.actionHandler.handleToolbarAction(action);
        });
    }

    initTopbar() {
        this.topbar = new Topbar(
            this.topbarContainer,
            this.coreMoodboard.eventBus,
            this.options.theme
        );
    }

    initZoombar() {
        // –†–∏—Å—É–µ–º –ø–∞–Ω–µ–ª—å –∑—É–º–∞ –ø–æ–≤–µ—Ä—Ö —Ö–æ–ª—Å—Ç–∞ (–≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, —á—Ç–æ –∏ topbar)
        this.zoombar = new ZoomPanel(
            this.topbarContainer,
            this.coreMoodboard.eventBus
        );
    }

    initMapbar() {
        // –†–∏—Å—É–µ–º –ø–∞–Ω–µ–ª—å –∫–∞—Ä—Ç—ã –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É (–≤–Ω—É—Ç—Ä–∏ workspace –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
        this.mapbar = new MapPanel(
            this.workspaceElement,
            this.coreMoodboard.eventBus
        );
    }

    initContextMenu() {
        this.contextMenu = new ContextMenu(
            this.canvasContainer,
            this.coreMoodboard.eventBus
        );
    }
    
    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
     */
    setTheme(theme) {
        this.options.theme = theme;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
        this.workspaceManager.updateTheme(theme);
        
        if (this.toolbar) {
            this.toolbar.setTheme(theme);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ MoodBoard
        if (this.coreMoodboard && this.coreMoodboard.pixi) {
            this.coreMoodboard.pixi.app.renderer.backgroundColor = 
                theme === 'dark' ? 0x2a2a2a : 0xF5F5F5;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∏
     */
    get boardData() {
        return this.dataManager ? this.dataManager.boardData : null;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ—Å–∫–∏
     */
    get objects() {
        return this.dataManager ? this.dataManager.objects : [];
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
     */
    createObject(type, position, properties = {}) {
        return this.actionHandler ? this.actionHandler.createObject(type, position, properties) : null;
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
     */
    deleteObject(objectId) {
        if (this.actionHandler) {
            this.actionHandler.deleteObject(objectId);
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –¥–æ—Å–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
     */
    clearBoard() {
        return this.actionHandler ? this.actionHandler.clearBoard() : 0;
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
     */
    exportBoard() {
        return this.actionHandler ? this.actionHandler.exportBoard() : null;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–æ—Å–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadExistingBoard() {
        try {
            const boardId = this.options.boardId;
            
            if (!boardId || !this.options.loadEndpoint) {
                console.log('üìã –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É (–Ω–µ—Ç boardId –∏–ª–∏ loadEndpoint)');
                this.dataManager.loadData(this.data);
                return;
            }
            
            console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å–∫—É: ${boardId}`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
            const boardData = await this.coreMoodboard.saveManager.loadBoardData(boardId);
            
            if (boardData && boardData.objects) {
                console.log(`‚úÖ –î–æ—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${boardData.objects.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
                this.dataManager.loadData(boardData);
            } else {
                console.log('üìã –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É (–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)');
                this.dataManager.loadData(this.data);
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å–∫–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é:', error.message);
            // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.dataManager.loadData(this.data);
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        if (this.toolbar) {
            this.toolbar.destroy();
        }
        
        if (this.saveStatus) {
            this.saveStatus.destroy();
        }
        
        if (this.coreMoodboard) {
            this.coreMoodboard.destroy();
        }
        
        if (this.workspaceManager) {
            this.workspaceManager.destroy();
        }
    }
}
