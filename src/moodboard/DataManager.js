/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö MoodBoard
 */
export class DataManager {
    constructor(coreMoodboard) {
        this.coreMoodboard = coreMoodboard;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ MoodBoard
     */
    loadData(data) {
        if (!data) return;
        
        console.log('üì• DataManager –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ:', {
            objects: data.objects?.length || 0,
            viewport: !!data.viewport
        });
        
        // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        this.clearBoard();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        if (data.objects && Array.isArray(data.objects)) {
            console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã:', data.objects.length);
            
            data.objects.forEach((objectData, index) => {
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞, –≤–∫–ª—é—á–∞—è ID
                    const createdObject = this.coreMoodboard.createObjectFromData(objectData);
                    console.log(`‚úÖ –û–±—ä–µ–∫—Ç ${index + 1}/${data.objects.length} –∑–∞–≥—Ä—É–∂–µ–Ω:`, objectData.type, objectData.id);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–∞ ${index + 1}:`, error, objectData);
                }
            });
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º viewport
        if (data.viewport) {
            this.loadViewport(data.viewport);
        }
        
        console.log('‚úÖ DataManager –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö');
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ viewport (–ø–æ–∑–∏—Ü–∏—è –∏ –∑—É–º)
     */
    loadViewport(viewport) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É viewport
        console.log('Loading viewport:', viewport);
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑—É–º–∞ canvas
        // this.coreMoodboard.setViewport(viewport.x, viewport.y, viewport.zoom);
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
     */
    exportBoardData() {
        if (!this.coreMoodboard) {
            return null;
        }
        
        const data = this.coreMoodboard.boardData;
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        this.coreMoodboard.eventBus.emit('board:export', data);
        
        return data;
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –¥–æ—Å–∫–µ
     */
    clearBoard() {
        if (!this.coreMoodboard) return;
        
        const objects = this.coreMoodboard.objects || [];
        objects.forEach(obj => this.coreMoodboard.deleteObject(obj.id));
        
        console.log('Board cleared');
        return objects.length;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞ –¥–æ—Å–∫–µ
     */
    createObject(type, position, properties = {}) {
        if (!this.coreMoodboard) return null;
        
        return this.coreMoodboard.createObject(type, position, properties);
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç —Å –¥–æ—Å–∫–∏
     */
    deleteObject(objectId) {
        if (!this.coreMoodboard) return;
        
        this.coreMoodboard.deleteObject(objectId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –¥–æ—Å–∫–∏
     */
    get objects() {
        return this.coreMoodboard ? this.coreMoodboard.objects : [];
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
     */
    get boardData() {
        return this.coreMoodboard ? this.coreMoodboard.boardData : null;
    }
}
