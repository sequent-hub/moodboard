import { calculateNewSize, calculatePositionOffset } from './selection/GeometryUtils.js';
import { BaseTool } from '../BaseTool.js';
import { ResizeHandles } from '../ResizeHandles.js';
import * as PIXI from 'pixi.js';
import { Events } from '../../core/events/Events.js';
import { SelectionModel } from './selection/SelectionModel.js';
import { HandlesSync } from './selection/HandlesSync.js';
import { SimpleDragController } from './selection/SimpleDragController.js';
import { ResizeController } from './selection/ResizeController.js';
import { RotateController } from './selection/RotateController.js';
import { GroupResizeController } from './selection/GroupResizeController.js';
import { GroupRotateController } from './selection/GroupRotateController.js';
import { GroupDragController } from './selection/GroupDragController.js';
import { BoxSelectController } from './selection/BoxSelectController.js';

/**
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
 * –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤
 */
export class SelectTool extends BaseTool {
    constructor(eventBus) {
        super('select', eventBus);
        this.cursor = 'default';
        this.hotkey = 'v';
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –º–æ–¥–µ–ª—å
        this.selection = new SelectionModel();
        this.isMultiSelect = false;
		
		// –†–µ–∂–∏–º Alt-–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
		// –ï—Å–ª–∏ Alt –∑–∞–∂–∞—Ç –ø—Ä–∏ –Ω–∞—á–∞–ª–µ drag, —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–º–µ–Ω–Ω–æ –µ—ë
		this.isAltCloneMode = false; // –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º Alt-–∫–ª–æ–Ω–∞
		this.clonePending = false;   // –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏
		this.cloneRequested = false; // –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
		this.cloneSourceId = null;   // –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–æ–ø–∏–∏
		// –ì—Ä—É–ø–ø–æ–≤–æ–π Alt-–∫–ª–æ–Ω
		this.isAltGroupCloneMode = false;
		this.groupClonePending = false;
		this.groupCloneOriginalIds = [];
		this.groupCloneMap = null; // { originalId: newId }
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.isDragging = false;
        this.dragOffset = { x: 0, y: 0 };
        this.dragTarget = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        this.isResizing = false;
        this.resizeHandle = null;
        this.resizeStartBounds = null;
        this.resizeStartMousePos = null;
        this.resizeStartPosition = null;
        
        // –°–∏—Å—Ç–µ–º–∞ —Ä—É—á–µ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        this.resizeHandles = null;
        this.groupSelectionGraphics = null; // –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–º–æ–∫ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –≤—ã–¥–µ–ª–µ–Ω–∏–∏
        this.groupBoundsGraphics = null; // –Ω–µ–≤–∏–¥–∏–º–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –¥–ª—è —Ä—É—á–µ–∫ –≥—Ä—É–ø–ø—ã
        this.groupId = '__group__';
        this.isGroupDragging = false;
        this.isGroupResizing = false;
        this.isGroupRotating = false;
        this.groupStartBounds = null;
        this.groupStartMouse = null;
        this.groupDragOffset = null;
        this.groupObjectsInitial = null; // Map id -> { position, size, rotation }
        
        // –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏
        this.currentX = 0;
        this.currentY = 0;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
        this.isRotating = false;
        this.rotateCenter = null;
        this.rotateStartAngle = 0;
        this.rotateCurrentAngle = 0;
        this.rotateStartMouseAngle = 0;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–º–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.isBoxSelect = false;
        this.selectionBox = null;
        this.selectionGraphics = null; // PIXI.Graphics –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–º–∫–∏
        this.initialSelectionBeforeBox = null; // —Å–Ω–∏–º–æ–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º box-select

		// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ (–æ—Ç Core)
		// –ö–æ–≥–¥–∞ PasteObjectCommand –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, —è–¥—Ä–æ —Å–æ–æ–±—â–∏—Ç newId
		if (this.eventBus) {
            this.eventBus.on(Events.Tool.DuplicateReady, (data) => {
				// data: { originalId, newId }
				if (!this.isAltCloneMode || !this.clonePending) return;
				if (!data || data.originalId !== this.cloneSourceId) return;
				this.onDuplicateReady(data.newId);
			});
			// –ì—Ä—É–ø–ø–æ–≤–æ–π –∫–ª–æ–Ω –≥–æ—Ç–æ–≤
            this.eventBus.on(Events.Tool.GroupDuplicateReady, (data) => {
				// data: { map: { [originalId]: newId } }
				if (!this.isAltGroupCloneMode || !this.groupClonePending) return;
				if (!data || !data.map) return;
				this.onGroupDuplicateReady(data.map);
			});
            this.eventBus.on(Events.Tool.ObjectEdit, (object) => {
                if (object.create) {
                    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    this._openTextEditor(object, true);
                } else {
                    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                    this._openTextEditor(object, false);
                }
            });
		}
        this.textEditor = {
            active: false,
            objectId: null,
            textarea: null,
            wrapper: null,
            world: null,
            position: null, // world top-left
            properties: null, // { fontSize }
            objectType: 'text', // 'text' or 'note'
            isResizing: false,
        };
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    activate(app) {
        super.activate();
        console.log('üîß SelectTool –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, app:', !!app);
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ PIXI app –¥–ª—è –æ–≤–µ—Ä–ª–µ–µ–≤ (—Ä–∞–º–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è)
		this.app = app;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—É—Ä—Å–æ—Ä –¥–ª—è select –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        if (this.app && this.app.view) {
            this.app.view.style.cursor = 'default';
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä—É—á–µ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        if (!this.resizeHandles && app) {
            this.resizeHandles = new ResizeHandles(app);
            this._handlesSync = new HandlesSync({
                app,
                resizeHandles: this.resizeHandles,
                selection: this.selection,
                emit: (event, payload) => this.emit(event, payload)
            });
            this._dragCtrl = new SimpleDragController({
                emit: (event, payload) => this.emit(event, payload)
            });
            this._resizeCtrl = new ResizeController({
                emit: (event, payload) => this.emit(event, payload),
                getRotation: (objectId) => {
                    const d = { objectId, rotation: 0 };
                    this.emit(Events.Tool.GetObjectRotation, d);
                    return d.rotation || 0;
                }
            });
            this._rotateCtrl = new RotateController({
                emit: (event, payload) => this.emit(event, payload)
            });
            this._groupResizeCtrl = new GroupResizeController({
                emit: (event, payload) => this.emit(event, payload),
                selection: this.selection,
                getGroupBounds: () => this.computeGroupBounds(),
                ensureGroupGraphics: (b) => this.ensureGroupBoundsGraphics(b),
                updateGroupGraphics: (b) => this.updateGroupBoundsGraphics(b)
            });
            this._groupRotateCtrl = new GroupRotateController({
                emit: (event, payload) => this.emit(event, payload),
                selection: this.selection,
                getGroupBounds: () => this.computeGroupBounds(),
                ensureGroupGraphics: (b) => this.ensureGroupBoundsGraphics(b),
                updateHandles: () => { if (this.resizeHandles) this.resizeHandles.updateHandles(); }
            });
            this._groupDragCtrl = new GroupDragController({
                emit: (event, payload) => this.emit(event, payload),
                selection: this.selection,
                updateGroupBoundsByTopLeft: (pos) => this.updateGroupBoundsGraphicsByTopLeft(pos)
            });
            this._boxSelect = new BoxSelectController({
                app,
                selection: this.selection,
                emit: (event, payload) => this.emit(event, payload),
                setSelection: (ids) => this.setSelection(ids),
                clearSelection: () => this.clearSelection(),
                rectIntersectsRect: (a, b) => this.rectIntersectsRect(a, b)
            });
        } else if (!app) {
            console.log('‚ùå PIXI app –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ activate');
        } else {
            console.log('‚ÑπÔ∏è ResizeHandles —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã');
        }
    }

    // –£–¥–æ–±–Ω—ã–µ –≤—Ä–∞–ø–ø–µ—Ä—ã –≤–æ–∫—Ä—É–≥ SelectionModel (–¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫ –Ω–∏–∂–µ)
    _has(id) { return this.selection.has(id); }
    _size() { return this.selection.size(); }
    _ids() { return this.selection.toArray(); }
    _clear() { this.selection.clear(); }
    _add(id) { this.selection.add(id); }
    _addMany(ids) { this.selection.addMany(ids); }
    _remove(id) { this.selection.remove(id); }
    _toggle(id) { this.selection.toggle(id); }
    _computeGroupBounds(getPixiById) { return this.selection.computeBounds(getPixiById); }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    deactivate() {
        super.deactivate();
        
        // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ —Ä—É—á–∫–∏
        this.clearSelection();
        if (this.resizeHandles) {
            this.resizeHandles.hideHandles();
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        if (this.app && this.app.view) {
            this.app.view.style.cursor = '';
        }
    }
    
    /**
     * –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
     */
    onMouseDown(event) {
        super.onMouseDown(event);
        
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
        if (this.textEditor.active) {
            console.log('üîß SelectTool: closing text editor on mouse down, objectType:', this.textEditor.objectType, 'objectId:', this.textEditor.objectId);
            this._closeTextEditor(true);
            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–∫ –¥–∞–ª—å—à–µ
        }
        
        this.isMultiSelect = event.originalEvent.ctrlKey || event.originalEvent.metaKey;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        const hitResult = this.hitTest(event.x, event.y);
        
        if (hitResult.type === 'resize-handle') {
            this.startResize(hitResult.handle, hitResult.object);
        } else if (hitResult.type === 'rotate-handle') {
            this.startRotate(hitResult.object);
        } else if (this.selection.size() > 1) {
            // –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è: –∫–ª–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏ –æ–±—â–µ–π —Ä–∞–º–∫–∏ –Ω–µ —Å–Ω–∏–º–∞—é—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            const gb = this.computeGroupBounds();
            const insideGroup = this.isPointInBounds({ x: event.x, y: event.y }, { x: gb.x, y: gb.y, width: gb.width, height: gb.height });
            if (insideGroup) {
                // –ï—Å–ª–∏ –∫–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã (–ø–æ –æ–±—ä–µ–∫—Ç—É –∏–ª–∏ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                this.startGroupDrag(event);
                return;
            }
            // –í–Ω–µ –≥—Ä—É–ø–ø—ã ‚Äî –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
            if (hitResult.type === 'object') {
                this.handleObjectSelect(hitResult.object, event);
            } else {
                this.startBoxSelect(event);
            }
        } else if (hitResult.type === 'object') {
            // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—ã—á–Ω—ã–π drag –∏—Å—Ö–æ–¥–Ω–∏–∫–∞; Alt-—Ä–µ–∂–∏–º –≤–∫–ª—é—á–∏–º –Ω–∞ –ª–µ—Ç—É –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
            this.handleObjectSelect(hitResult.object, event);
        } else {
            // –ö–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –æ–¥–∏–Ω–æ—á–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ, —Ä–∞–∑—Ä–µ—à–∞–µ–º drag –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–º–∫–∏
            if (this.selection.size() === 1) {
                const selId = this.selection.toArray()[0];
                const boundsReq = { objects: [] };
                this.emit(Events.Tool.GetAllObjects, boundsReq);
                const map = new Map(boundsReq.objects.map(o => [o.id, o.bounds]));
                const b = map.get(selId);
                if (b && this.isPointInBounds({ x: event.x, y: event.y }, b)) {
                    // –°—Ç–∞—Ä—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫–∞–∫ –µ—Å–ª–∏ –±—ã –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É
                    this.startDrag(selId, event);
                    return;
                }
            }
            // –ò–Ω–∞—á–µ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–º–∫—É –≤—ã–¥–µ–ª–µ–Ω–∏—è
            this.startBoxSelect(event);
        }
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏
     */
		onMouseMove(event) {
        super.onMouseMove(event);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏
        this.currentX = event.x;
        this.currentY = event.y;
        
			if (this.isResizing || this.isGroupResizing) {
            this.updateResize(event);
			} else if (this.isRotating || this.isGroupRotating) {
            this.updateRotate(event);
			} else if (this.isDragging || this.isGroupDragging) {
            this.updateDrag(event);
        } else if (this.isBoxSelect) {
            this.updateBoxSelect(event);
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–¥ –º—ã—à—å—é
            this.updateCursor(event);
        }
    }
    
    /**
     * –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
     */
		onMouseUp(event) {
        if (this.isResizing || this.isGroupResizing) {
				this.endResize();
        } else if (this.isRotating || this.isGroupRotating) {
            this.endRotate();
			} else if (this.isDragging || this.isGroupDragging) {
            this.endDrag();
        } else if (this.isBoxSelect) {
            this.endBoxSelect();
        }
        
        super.onMouseUp(event);
    }
    
    /**
     * –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    onDoubleClick(event) {
        const hitResult = this.hitTest(event.x, event.y);
        
        if (hitResult.type === 'object') {
            // –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–ø–∏—Å–∫–∞ ‚Äî –≤–æ–π–¥—ë–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ ObjectEdit
            const req = { objectId: hitResult.object, pixiObject: null };
            this.emit(Events.Tool.GetObjectPixi, req);
            const pix = req.pixiObject;
            
            const isText = !!(pix && pix._mb && pix._mb.type === 'text');
            const isNote = !!(pix && pix._mb && pix._mb.type === 'note');
            
            if (isText) {
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                const posData = { objectId: hitResult.object, position: null };
                this.emit(Events.Tool.GetObjectPosition, posData);
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ properties –æ–±—ä–µ–∫—Ç–∞
                const textContent = pix._mb?.properties?.content || '';
                
                this.emit(Events.Tool.ObjectEdit, { 
                    id: hitResult.object, 
                    type: 'text', 
                    position: posData.position,
                    properties: { content: textContent },
                    create: false 
                });
                return;
            }
            if (isNote) {
                const noteProps = pix._mb.properties || {};
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                const posData = { objectId: hitResult.object, position: null };
                this.emit(Events.Tool.GetObjectPosition, posData);
                
                this.emit(Events.Tool.ObjectEdit, { 
                    id: hitResult.object, 
                    type: 'note', 
                    position: posData.position,
                    properties: { content: noteProps.content || '' },
                    create: false 
                });
                return;
            }
            this.editObject(hitResult.object);
        }
    }

    /**
     * –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞) ‚Äî –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ, —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
     */
    onContextMenu(event) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        const hit = this.hitTest(event.x, event.y);
        let context = 'canvas';
        let targetId = null;
        if (hit && hit.type === 'object' && hit.object) {
            targetId = hit.object;
            if (this.selection.has(targetId) && this.selection.size() > 1) {
                context = 'group';
            } else {
                context = 'object';
            }
        } else if (this.selection.size() > 1) {
            context = 'group';
        }
        // –°–æ–æ–±—â–∞–µ–º —è–¥—Ä—É/UI, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é (–ø–æ–∫–∞ –±–µ–∑ –ø—É–Ω–∫—Ç–æ–≤)
        this.emit(Events.Tool.ContextMenuShow, { x: event.x, y: event.y, context, targetId });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
     */
    onKeyDown(event) {
        switch (event.key) {
            case 'Delete':
            case 'Backspace':
                this.deleteSelectedObjects();
                break;
                
            case 'a':
                if (event.ctrlKey) {
                    this.selectAll();
                    event.originalEvent.preventDefault();
                }
                break;
                
            case 'Escape':
                this.clearSelection();
                break;
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
     */
    hitTest(x, y) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (–æ–Ω–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if (this.resizeHandles) {
            const pixiObjectAtPoint = this.getPixiObjectAt(x, y);

            
            const handleInfo = this.resizeHandles.getHandleInfo(pixiObjectAtPoint);
            if (handleInfo) {

                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä—É—á–∫–∏
                const hitType = handleInfo.type === 'rotate' ? 'rotate-handle' : 'resize-handle';
                
                return {
                    type: hitType,
                    handle: handleInfo.type,
                    object: handleInfo.targetObjectId,
                    pixiObject: handleInfo.handle
                };
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
        const hitTestData = { x, y, result: null };
        this.emit(Events.Tool.HitTest, hitTestData);
        
        if (hitTestData.result && hitTestData.result.object) {
            return hitTestData.result;
        }
        
        return { type: 'empty' };
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å PIXI –æ–±—ä–µ–∫—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
     */
    getPixiObjectAt(x, y) {
        if (!this.resizeHandles || !this.resizeHandles.app) return null;
        
        const point = new PIXI.Point(x, y);
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Ä—É—á–µ–∫ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if (this.resizeHandles.container.visible) {
            for (let i = this.resizeHandles.container.children.length - 1; i >= 0; i--) {
                const child = this.resizeHandles.container.children[i];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                if (child.containsPoint && child.containsPoint(point)) {

                    return child;
                }
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (—Ä—É—á–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è)
                if (child instanceof PIXI.Container && child.children.length > 0) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    const bounds = child.getBounds();
                    if (point.x >= bounds.x && point.x <= bounds.x + bounds.width &&
                        point.y >= bounds.y && point.y <= bounds.y + bounds.height) {

                        return child;
                    }
                }
            }
        }
        
        // –ó–∞—Ç–µ–º –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–µ
        const stage = this.resizeHandles.app.stage;
        for (let i = stage.children.length - 1; i >= 0; i--) {
            const child = stage.children[i];
            if (child !== this.resizeHandles.container && child.containsPoint && child.containsPoint(point)) {

                return child;
            }
        }
        
		return null;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
     */
    handleObjectSelect(objectId, event) {
        if (!this.isMultiSelect) {
            this.clearSelection();
        }
        
        if (this.selection.has(objectId)) {
            if (this.isMultiSelect) {
                this.removeFromSelection(objectId);
            } else if (this.selection.size() > 1) {
                // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                this.startGroupDrag(event);
            } else {
                // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
                this.startDrag(objectId, event);
            }
        } else {
            this.addToSelection(objectId);
            if (this.selection.size() > 1) {
                this.startGroupDrag(event);
            } else {
                this.startDrag(objectId, event);
            }
        }
    }
    
    /**
     * –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    startDrag(objectId, event) {
        this.isDragging = true;
        this.dragTarget = objectId;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞
        const objectData = { objectId, position: null };
        this.emit(Events.Tool.GetObjectPosition, objectData);
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∏—Ä–æ–≤—ã–µ (worldLayer), —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –∑—É–º–∞
        const w = this._toWorld(event.x, event.y);
        const worldEvent = { ...event, x: w.x, y: w.y };
        if (this._dragCtrl) this._dragCtrl.start(objectId, worldEvent);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    updateDrag(event) {
        // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        if (this.isGroupDragging && this._groupDragCtrl) {
            const w = this._toWorld(event.x, event.y);
            this._groupDragCtrl.update({ ...event, x: w.x, y: w.y });
            return;
        }
        // –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞–∂–∞–ª–∏ Alt ‚Äî –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ª–µ—Ç—É
        if (this.isDragging && !this.isAltCloneMode && event.originalEvent && event.originalEvent.altKey) {
            this.isAltCloneMode = true;
            this.cloneSourceId = this.dragTarget;
            this.clonePending = true;
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            const positionData = { objectId: this.cloneSourceId, position: null };
            this.emit(Events.Tool.GetObjectPosition, positionData);
            // –°–æ–æ–±—â–∞–µ–º —è–¥—Ä—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —É –ø–æ–∑–∏—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            this.emit(Events.Tool.DuplicateRequest, {
                originalId: this.cloneSourceId,
                position: positionData.position || { x: event.x, y: event.y }
            });
            // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º dragTarget, —á—Ç–æ–±—ã –∏—Å—Ö–æ–¥–Ω–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–ø–∏–∏
            // –í–∏–∑—É–∞–ª—å–Ω–æ —ç—Ç–æ –æ–∫: –∫–æ–ø–∏—è –ø–æ—è–≤–∏—Ç—Å—è –∏ –∑–∞—Ö–≤–∞—Ç–∏—Ç drag –≤ onDuplicateReady
        }
        // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–≥–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å (–∏—Å—Ö–æ–¥–Ω–∏–∫)
        if (!this.dragTarget) return;
        
        if (this._dragCtrl) {
            const w = this._toWorld(event.x, event.y);
            this._dragCtrl.update({ ...event, x: w.x, y: w.y });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        if (this.resizeHandles && this.selection.has(this.dragTarget)) {
            this.resizeHandles.updateHandles();
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    endDrag() {
        if (this.isGroupDragging) {
            const ids = this.selection.toArray();
            this.emit(Events.Tool.GroupDragEnd, { objects: ids });
            if (this._groupDragCtrl) this._groupDragCtrl.end();
            this.isAltGroupCloneMode = false;
            this.groupClonePending = false;
            this.groupCloneOriginalIds = [];
            this.groupCloneMap = null;
        } else if (this.dragTarget) {
            if (this._dragCtrl) this._dragCtrl.end();
        }
        
        this.isDragging = false;
        this.isGroupDragging = false;
        this.dragTarget = null;
        this.dragOffset = { x: 0, y: 0 };
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Alt-–∫–ª–æ–Ω–∞
		this.isAltCloneMode = false;
		this.clonePending = false;
		this.cloneSourceId = null;
    }
    
    /**
     * –ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    startResize(handle, objectId) {
        console.log(`üîß –ù–∞—á–∏–Ω–∞–µ–º resize: —Ä—É—á–∫–∞ ${handle}, –æ–±—ä–µ–∫—Ç ${objectId}`);
        // –ì—Ä—É–ø–ø–æ–≤–æ–π resize
        if (objectId === this.groupId && this.selection.size() > 1) {
            this.isGroupResizing = true;
            this.resizeHandle = handle;
            if (this._groupResizeCtrl) this._groupResizeCtrl.start(handle, { x: this.currentX, y: this.currentY });
            this.isResizing = false;
            return;
        }

        this.isResizing = true;
        this.resizeHandle = handle;
        this.dragTarget = objectId;
        if (this._resizeCtrl) {
            const w = this._toWorld(this.currentX, this.currentY);
            this._resizeCtrl.start(handle, objectId, { x: w.x, y: w.y });
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    updateResize(event) {
		// –ì—Ä—É–ø–ø–æ–≤–æ–π resize
        if (this.isGroupResizing && this._groupResizeCtrl) {
            const w = this._toWorld(event.x, event.y);
            this._groupResizeCtrl.update({ ...event, x: w.x, y: w.y });
            return; 
        }

        if (this._resizeCtrl) {
            const w = this._toWorld(event.x, event.y);
            this._resizeCtrl.update({ ...event, x: w.x, y: w.y }, {
                calculateNewSize: (handleType, startBounds, dx, dy, keepAR) => {
                    const rot = (() => { const d = { objectId: this.dragTarget, rotation: 0 }; this.emit(Events.Tool.GetObjectRotation, d); return d.rotation || 0; })();
                    return this.calculateNewSize(handleType, startBounds, dx, dy, keepAR, rot);
                },
                calculatePositionOffset: (handleType, startBounds, newSize, objectRotation) => {
                    return this.calculatePositionOffset(handleType, startBounds, newSize, objectRotation);
                }
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è resize
        if (this.resizeHandles) {
            this.resizeHandles.updateHandles();
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    endResize() {
        if (this.isGroupResizing) {
            if (this._groupResizeCtrl) this._groupResizeCtrl.end();
            this.isGroupResizing = false;
            this.resizeHandle = null;
            this.groupStartBounds = null;
            this.groupStartMouse = null;
            this.groupObjectsInitial = null;
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä—É—á–∫–∏ –∏ —Ä–∞–º–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–ª–∏–ø–ª–∏ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
            const gb = this.computeGroupBounds();
            this.ensureGroupBoundsGraphics(gb);
            if (this.groupBoundsGraphics) {
                this.groupBoundsGraphics.rotation = 0;
                this.groupBoundsGraphics.pivot.set(0, 0);
                this.groupBoundsGraphics.position.set(gb.x, gb.y);
            }
            if (this.resizeHandles) {
                this.resizeHandles.showHandles(this.groupBoundsGraphics, this.groupId);
            }
            return;
        }
        if (this._resizeCtrl) this._resizeCtrl.end();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—É—á–µ–∫ –ø–æ—Å–ª–µ resize
        if (this.resizeHandles) {
            this.resizeHandles.updateHandles(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—É—á–µ–∫
        }
        
        this.isResizing = false;
        this.resizeHandle = null;
        this.resizeStartBounds = null;
        this.resizeStartMousePos = null;
        this.resizeStartPosition = null;
    }
    
    /**
     * –ù–∞—á–∞–ª–æ –ø–æ–≤–æ—Ä–æ—Ç–∞
     */
    startRotate(objectId) {
        // –ì—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–≤–æ—Ä–æ—Ç
        if (objectId === this.groupId && this.selection.size() > 1) {
            this.isGroupRotating = true;
            const gb = this.computeGroupBounds();
            this.groupRotateBounds = gb;
            this.rotateCenter = { x: gb.x + gb.width / 2, y: gb.y + gb.height / 2 };
            this.rotateStartAngle = 0;
            this.rotateCurrentAngle = 0;
            this.rotateStartMouseAngle = Math.atan2(
                this.currentY - this.rotateCenter.y,
                this.currentX - this.rotateCenter.x
            );
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è —Ä—É—á–µ–∫: —Ü–µ–Ω—Ç—Ä –≤ pivot –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
            this.ensureGroupBoundsGraphics(gb);
            if (this.groupBoundsGraphics) {
                this.groupBoundsGraphics.pivot.set(gb.width / 2, gb.height / 2);
                this.groupBoundsGraphics.position.set(this.rotateCenter.x, this.rotateCenter.y);
                this.groupBoundsGraphics.rotation = 0;
            }
            // –ü–æ–¥–≥–æ–Ω—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Ä–∞–º–∫—É –ø–æ–¥ —Ü–µ–Ω—Ç—Ä
            if (this.groupSelectionGraphics) {
                this.groupSelectionGraphics.pivot.set(0, 0);
                this.groupSelectionGraphics.position.set(0, 0);
                this.groupSelectionGraphics.clear();
                this.groupSelectionGraphics.lineStyle(1, 0x3B82F6, 1);
                // –ù–∞—Ä–∏—Å—É–µ–º –ø–æ–∫–∞ –æ—Å–µ–≤—É—é —Ä–∞–º–∫—É, –≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–∏–º –≤ update
                this.groupSelectionGraphics.drawRect(gb.x, gb.y, gb.width, gb.height);
            }
            const ids = this.selection.toArray();
            this.emit('group:rotate:start', { objects: ids, center: this.rotateCenter });
            return;
        }

        this.isRotating = true;
        this.dragTarget = objectId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º dragTarget –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const posData = { objectId, position: null };
        this.emit('get:object:position', posData);
        const sizeData = { objectId, size: null };
        this.emit('get:object:size', sizeData);
        if (posData.position && sizeData.size && this._rotateCtrl) {
            const center = { x: posData.position.x + sizeData.size.width / 2, y: posData.position.y + sizeData.size.height / 2 };
            const w = this._toWorld(this.currentX, this.currentY);
            this._rotateCtrl.start(objectId, { x: w.x, y: w.y }, center);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
     */
    updateRotate(event) {
        // –ì—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–≤–æ—Ä–æ—Ç
        if (this.isGroupRotating && this._groupRotateCtrl) {
            const w = this._toWorld(event.x, event.y);
            this._groupRotateCtrl.update({ ...event, x: w.x, y: w.y });
            return;
        }
        if (!this.isRotating || !this._rotateCtrl) return;
        {
            const w = this._toWorld(event.x, event.y);
            this._rotateCtrl.update({ ...event, x: w.x, y: w.y });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ–≤–æ—Ä–æ—Ç–∞
        if (this.resizeHandles) {
            this.resizeHandles.updateHandles();
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
     */
    endRotate() {
        if (this.isGroupRotating) {
            if (this._groupRotateCtrl) this._groupRotateCtrl.end();
            this.isGroupRotating = false;
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–º–∫–∏
            const gb = this.computeGroupBounds();
            this.ensureGroupBoundsGraphics(gb);
            if (this.groupBoundsGraphics) {
                this.groupBoundsGraphics.rotation = 0;
                this.groupBoundsGraphics.pivot.set(0, 0);
                this.groupBoundsGraphics.position.set(gb.x, gb.y);
            }
            if (this.resizeHandles) this.resizeHandles.showHandles(this.groupBoundsGraphics, this.groupId);
            return;
        }
        if (this._rotateCtrl) this._rotateCtrl.end();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—É—á–µ–∫ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
        if (this.resizeHandles) {
            this.resizeHandles.updateHandles(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—É—á–µ–∫
        }
        
        this.isRotating = false;
        this.rotateCenter = null;
        this.rotateStartAngle = 0;
        this.rotateCurrentAngle = 0;
        this.rotateStartMouseAngle = 0;
    }
    
    /**
     * –ù–∞—á–∞–ª–æ —Ä–∞–º–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    startBoxSelect(event) {
        this.isBoxSelect = true;
        if (this._boxSelect) this._boxSelect.start({ x: event.x, y: event.y }, this.isMultiSelect);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–º–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    updateBoxSelect(event) {
        if (this._boxSelect) this._boxSelect.update({ x: event.x, y: event.y });
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–º–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    endBoxSelect() {
        this.isBoxSelect = false;
        if (this._boxSelect) this._boxSelect.end();
    }

	/**
	 * –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
	 */
	rectIntersectsRect(a, b) {
		return !(
			b.x > a.x + a.width ||
			b.x + b.width < a.x ||
			b.y > a.y + a.height ||
			b.y + b.height < a.y
		);
	}

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º ID –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ (–±–∞—Ç—á)
     */
    setSelection(objectIds) {
        const prev = this.selection.toArray();
        this.selection.clear();
        this.selection.addMany(objectIds);
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (prev.length > 0) {
            this.emit(Events.Tool.SelectionClear, { objects: prev });
        }
        for (const id of objectIds) {
            this.emit(Events.Tool.SelectionAdd, { object: id });
        }
        this.updateResizeHandles();
    }

    /**
     * –†–∏—Å—É–µ—Ç —Ä–∞–º–∫–∏ –≤–æ–∫—Ä—É–≥ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è)
     */
    drawGroupSelectionGraphics() {
        if (!this.app || !this.app.stage) return;
        const selectedIds = this.selection.toArray();
        if (selectedIds.length <= 1) {
            this.removeGroupSelectionGraphics();
            return;
        }
        // –ü–æ–ª—É—á–∞–µ–º bounds –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–Ω—Ç—É—Ä –Ω–∞ groupBoundsGraphics (–æ–¥–Ω–∞ —Ä–∞–º–∫–∞ —Å —Ä—É—á–∫–∞–º–∏)
        const request = { objects: [] };
        this.emit(Events.Tool.GetAllObjects, request);
        const idToBounds = new Map(request.objects.map(o => [o.id, o.bounds]));
        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
        for (const id of selectedIds) {
            const b = idToBounds.get(id);
            if (!b) continue;
            minX = Math.min(minX, b.x);
            minY = Math.min(minY, b.y);
            maxX = Math.max(maxX, b.x + b.width);
            maxY = Math.max(maxY, b.y + b.height);
        }
        if (isFinite(minX) && isFinite(minY) && isFinite(maxX) && isFinite(maxY)) {
            const gb = { x: minX, y: minY, width: maxX - minX, height: maxY - minY };
            this.ensureGroupBoundsGraphics(gb);
            this.updateGroupBoundsGraphics(gb);
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    removeGroupSelectionGraphics() {
        if (this.groupBoundsGraphics) {
            this.groupBoundsGraphics.clear();
            this.groupBoundsGraphics.rotation = 0;
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    computeGroupBounds() {
        const request = { objects: [] };
        this.emit(Events.Tool.GetAllObjects, request);
        const pixiMap = new Map(request.objects.map(o => [o.id, o.pixi]));
        const b = this.selection.computeBounds((id) => pixiMap.get(id));
        if (!b) return { x: 0, y: 0, width: 0, height: 0 };
        return b;
    }

    ensureGroupBoundsGraphics(bounds) {
        if (!this.app || !this.app.stage) return;
        if (!this.groupBoundsGraphics) {
            this.groupBoundsGraphics = new PIXI.Graphics();
            this.groupBoundsGraphics.name = 'group-bounds';
            this.groupBoundsGraphics.zIndex = 1400;
            this.app.stage.addChild(this.groupBoundsGraphics);
            this.app.stage.sortableChildren = true;
        }
        this.updateGroupBoundsGraphics(bounds);
    }

    updateGroupBoundsGraphics(bounds) {
        if (!this.groupBoundsGraphics) return;
        this.groupBoundsGraphics.clear();
        // –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ (alpha ~0), —á—Ç–æ–±—ã getBounds() –¥–∞–≤–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –Ω–µ –±—ã–ª–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        this.groupBoundsGraphics.beginFill(0x000000, 0.001);
        this.groupBoundsGraphics.drawRect(0, 0, Math.max(1, bounds.width), Math.max(1, bounds.height));
        this.groupBoundsGraphics.endFill();
        // –†–∞–∑–º–µ—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫—É –≤ –ª–µ–≤–æ–º-–≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –≥—Ä—É–ø–ø—ã
        this.groupBoundsGraphics.position.set(bounds.x, bounds.y);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏, –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã
        if (this.resizeHandles) {
            this.resizeHandles.updateHandles();
        }
    }

    updateGroupBoundsGraphicsByTopLeft(topLeft) {
        if (!this.groupBoundsGraphics || !this.groupStartBounds) return;
        this.updateGroupBoundsGraphics({ x: topLeft.x, y: topLeft.y, width: this.groupStartBounds.width, height: this.groupStartBounds.height });
        // –†–∏—Å—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—â—É—é —Ä–∞–º–∫—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        if (this.groupSelectionGraphics) {
            this.groupSelectionGraphics.clear();
            this.groupSelectionGraphics.lineStyle(1, 0x3B82F6, 0.9);
            this.groupSelectionGraphics.drawRect(topLeft.x, topLeft.y, this.groupStartBounds.width, this.groupStartBounds.height);
        }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (canvas/view) –≤ –º–∏—Ä–æ–≤—ã–µ (worldLayer)
    _toWorld(x, y) {
        if (!this.app || !this.app.stage) return { x, y };
        const world = this.app.stage.getChildByName && this.app.stage.getChildByName('worldLayer');
        if (!world || !world.toLocal) return { x, y };
        const p = new PIXI.Point(x, y);
        const local = world.toLocal(p);
        return { x: local.x, y: local.y };
    }

    startGroupDrag(event) {
        const gb = this.computeGroupBounds();
        this.groupStartBounds = gb;
        this.isGroupDragging = true;
        this.isDragging = false; // –æ—Ç–∫–ª—é—á–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π drag, –µ—Å–ª–∏ –±—ã–ª
        this.ensureGroupBoundsGraphics(gb);
        if (this.groupBoundsGraphics && this.resizeHandles) {
            this.resizeHandles.showHandles(this.groupBoundsGraphics, this.groupId);
        }
        if (this._groupDragCtrl) {
            const w = this._toWorld(event.x, event.y);
            this._groupDragCtrl.start(gb, { x: w.x, y: w.y });
        }
        this.emit(Events.Tool.GroupDragStart, { objects: this.selection.toArray() });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–ª–æ–Ω –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
     */
    onGroupDuplicateReady(idMap) {
        this.groupClonePending = false;
        this.groupCloneMap = idMap;
        if (this._groupDragCtrl) this._groupDragCtrl.onGroupDuplicateReady(idMap);
        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏–∑ –∫–ª–æ–Ω–æ–≤
        const newIds = [];
        for (const orig of this.groupCloneOriginalIds) {
            const nid = idMap[orig];
            if (nid) newIds.push(nid);
        }
        if (newIds.length > 0) {
            this.setSelection(newIds);
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è drag
            const gb = this.computeGroupBounds();
            this.groupStartBounds = gb;
            this.groupDragOffset = { x: this.currentX - gb.x, y: this.currentY - gb.y };
            // –°–æ–æ–±—â–∞–µ–º —è–¥—Ä—É –æ —Å—Ç–∞—Ä—Ç–µ drag –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            this.emit('group:drag:start', { objects: newIds });
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
     */
    updateCursor(event) {
        const hitResult = this.hitTest(event.x, event.y);
        
        switch (hitResult.type) {
            case 'resize-handle':
                this.cursor = this.getResizeCursor(hitResult.handle);
                break;
            case 'rotate-handle':
                this.cursor = 'grab';
                break;
            case 'object':
                this.cursor = 'move';
                break;
            default:
                this.cursor = 'default';
        }
        
        this.setCursor();
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫—É—Ä—Å–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞, –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–π –Ω–∞ –Ω—É–∂–Ω—ã–π —É–≥–æ–ª
     */
    createRotatedResizeCursor(handleType, rotationDegrees) {
        // –ë–∞–∑–æ–≤—ã–µ —É–≥–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä—É—á–∫–∏ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
        const baseAngles = {
            'e': 0,     // –í–æ—Å—Ç–æ–∫ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üí
            'se': 45,   // –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫ - –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üò
            's': 90,    // –Æ–≥ - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üì
            'sw': 135,  // –Æ–≥–æ-–∑–∞–ø–∞–¥ - –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üô
            'w': 180,   // –ó–∞–ø–∞–¥ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üê
            'nw': 225,  // –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥ - –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üñ
            'n': 270,   // –°–µ–≤–µ—Ä - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üë
            'ne': 315   // –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫ - –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üó
        };
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —É–≥–æ–ª: –±–∞–∑–æ–≤—ã–π —É–≥–æ–ª —Ä—É—á–∫–∏ + –ø–æ–≤–æ—Ä–æ—Ç –æ–±—ä–µ–∫—Ç–∞
        const totalAngle = (baseAngles[handleType] + rotationDegrees) % 360;
        
        // –°–æ–∑–¥–∞–µ–º SVG –∫—É—Ä—Å–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞, –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–π –Ω–∞ –Ω—É–∂–Ω—ã–π —É–≥–æ–ª (–±–µ–ª—ã–π, –∫—Ä—É–ø–Ω–µ–µ)
        const svg = `<svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><g transform="rotate(${totalAngle} 16 16)"><path d="M4 16 L9 11 L9 13 L23 13 L23 11 L28 16 L23 21 L23 19 L9 19 L9 21 Z" fill="white" stroke="black" stroke-width="1"/></g></svg>`;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º encodeURIComponent –≤–º–µ—Å—Ç–æ btoa –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        const dataUrl = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svg)}`;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º CSS cursor —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (hotspot –≤ —Ü–µ–Ω—Ç—Ä–µ 16x16)
        return `url("${dataUrl}") 16 16, auto`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è —Ä–µ—Å–∞–π–∑-—Ö–µ–Ω–¥–ª–∞ —Å —É—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    getResizeCursor(handle) {
        // –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞
        const selectedObject = Array.from(this.selectedObjects)[0];
        if (!selectedObject) {
            return 'default';
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
        const rotationData = { objectId: selectedObject, rotation: 0 };
        this.emit(Events.Tool.GetObjectRotation, rotationData);
        const objectRotation = rotationData.rotation || 0;
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫—É—Ä—Å–æ—Ä, –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–π –Ω–∞ —Ç–æ—á–Ω—ã–π —É–≥–æ–ª –æ–±—ä–µ–∫—Ç–∞
        return this.createRotatedResizeCursor(handle, objectRotation);
    }
    
    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º setCursor –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ canvas
     */
    setCursor() {
        if (this.resizeHandles && this.resizeHandles.app && this.resizeHandles.app.view) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ canvas, –∞ –Ω–µ –Ω–∞ body
            this.resizeHandles.app.view.style.cursor = this.cursor;
        } else {
            // Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
            super.setCursor();
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
     */
    
        addToSelection(object) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–¥–µ–ª–µ–Ω–∏–µ: ${object}`);
        this.selection.add(object);
        this.emit(Events.Tool.SelectionAdd, { object });
        this.updateResizeHandles();
    }

    removeFromSelection(object) {
        this.selection.remove(object);
        this.emit(Events.Tool.SelectionRemove, { object });
        this.updateResizeHandles();
    }

    clearSelection() {
        const objects = this.selection.toArray();
        this.selection.clear();
        this.emit(Events.Tool.SelectionClear, { objects });
        this.updateResizeHandles();
    }
    
    selectAll() {
        // TODO: –í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –¥–æ—Å–∫–µ
        this.emit(Events.Tool.SelectionAll);
    }
    
    deleteSelectedObjects() {
        const objects = this.selection.toArray();
        this.clearSelection();
        this.emit(Events.Tool.ObjectsDelete, { objects });
    }
    
    editObject(object) {
        this.emit(Events.Tool.ObjectEdit, { object });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–¥–µ–ª–µ–Ω–∏–∏
     */
    getSelection() {
        return this.selection.toArray();
    }

    // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º —è–¥—Ä–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Set –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö id
    get selectedObjects() {
        return new Set(this.selection.toArray());
    }

    // –≠–∫—Å–ø–æ–Ω–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ EventBus –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π (keyboard)
    onActivate() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞: EventBus –ø—Ä–æ—Å—Ç–∞—è —à–∏–Ω–∞, –∞ –≤—ã–∑–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
        this.eventBus.on(Events.Tool.GetSelection, (data) => {
            data.selection = this.getSelection();
        });
    }
    
    hasSelection() {
        return this.selection.size() > 0;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É—á–µ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    updateResizeHandles() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ä—É—á–∫–∏ (HtmlHandlesLayer). –ü—Ä—è—á–µ–º Pixi-—Ä—É—á–∫–∏ –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏.
        try {
            if (this.resizeHandles && typeof this.resizeHandles.hideHandles === 'function') {
                this.resizeHandles.hideHandles();
            }
            const stage = this.app?.stage;
            const world = stage?.getChildByName && stage.getChildByName('worldLayer');
            const rh = world && world.getChildByName && world.getChildByName('resize-handles');
            if (rh) rh.visible = false;
            const gb = stage && stage.getChildByName && stage.getChildByName('group-bounds');
            if (gb) gb.visible = false;
        } catch (e) {
            // noop
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–ø–∏–∏ –ø—Ä–∏ –∑–∞–∂–∞—Ç–æ–º Alt
     */
    prepareAltCloneDrag(objectId, event) {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—ã–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç
        this.clearSelection();
        this.addToSelection(objectId);

        // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º Alt-–∫–ª–æ–Ω–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç —É —è–¥—Ä–∞
        this.isAltCloneMode = true;
        this.clonePending = true;
        this.cloneSourceId = objectId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
        this.currentX = event.x;
        this.currentY = event.y;

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        const positionData = { objectId, position: null };
        this.emit('get:object:position', positionData);

        // –°–æ–æ–±—â–∞–µ–º —è–¥—Ä—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —É –ø–æ–∑–∏—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        this.emit('duplicate:request', {
            originalId: objectId,
            position: positionData.position || { x: event.x, y: event.y }
        });

        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ drag, –Ω–æ —Ü–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ—Ç ‚Äî –∂–¥—ë–º newId
        this.isDragging = true;
        this.dragTarget = null;
    }

    /**
     * –ö–æ–≥–¥–∞ —è–¥—Ä–æ —Å–æ–æ–±—â–∏–ª–æ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º drag –Ω–∞ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
     */
    onDuplicateReady(newObjectId) {
        this.clonePending = false;
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        this.clearSelection();
        this.addToSelection(newObjectId);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è ‚Äî –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        this.dragTarget = newObjectId;

		// –í–ê–ñ–ù–û: –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º dragOffset ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
		// –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫—É—Ä—Å–æ—Ä –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Ç–æ–π –∂–µ —Ç–æ—á–∫–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä–µ–∫—Ç–∞

		// –°–æ–æ–±—â–∞–µ–º –æ —Å—Ç–∞—Ä—Ç–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ (Undo/Redo)
		this.emit('drag:start', { object: newObjectId, position: { x: this.currentX, y: this.currentY } });

		// –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–¥ –∫—É—Ä—Å–æ—Ä
		this.updateDrag({ x: this.currentX, y: this.currentY });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏
        this.updateResizeHandles();
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–∏–ø —Ä—É—á–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    transformHandleType(handleType, rotationDegrees) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-360
        let angle = rotationDegrees % 360;
        if (angle < 0) angle += 360;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤
        const rotations = Math.round(angle / 90) % 4;
        
        if (rotations === 0) return handleType; // –ù–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞
        
        // –ö–∞—Ä—Ç–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ 90¬∞
        const transformMap = {
            'nw': ['ne', 'se', 'sw', 'nw'],  // nw -> ne -> se -> sw -> nw
            'n':  ['e',  's',  'w',  'n'],   // n -> e -> s -> w -> n
            'ne': ['se', 'sw', 'nw', 'ne'],  // ne -> se -> sw -> nw -> ne
            'e':  ['s',  'w',  'n',  'e'],   // e -> s -> w -> n -> e
            'se': ['sw', 'nw', 'ne', 'se'],  // se -> sw -> nw -> ne -> se
            's':  ['w',  'n',  'e',  's'],   // s -> w -> n -> e -> s
            'sw': ['nw', 'ne', 'se', 'sw'],  // sw -> nw -> ne -> se -> sw
            'w':  ['n',  'e',  's',  'w']    // w -> n -> e -> s -> w
        };
        
        return transformMap[handleType] ? transformMap[handleType][rotations - 1] : handleType;
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ä—É—á–∫–∏ –∏ —Å–º–µ—â–µ–Ω–∏—è –º—ã—à–∏
     */
    calculateNewSize(handleType, startBounds, deltaX, deltaY, maintainAspectRatio) {
        let newWidth = startBounds.width;
        let newHeight = startBounds.height;
        
        // –ü–æ–ª—É—á–∞–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
        const rotationData = { objectId: this.dragTarget, rotation: 0 };
        this.emit('get:object:rotation', rotationData);
        const objectRotation = rotationData.rotation || 0;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø —Ä—É—á–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
        const transformedHandleType = this.transformHandleType(handleType, objectRotation);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä—É—á–∫–∏
        switch (transformedHandleType) {
            case 'nw': // –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥ - –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                newWidth = startBounds.width - deltaX;  // –≤–ª–µ–≤–æ = –º–µ–Ω—å—à–µ —à–∏—Ä–∏–Ω–∞
                newHeight = startBounds.height - deltaY; // –≤–≤–µ—Ä—Ö = –º–µ–Ω—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 'n': // –°–µ–≤–µ—Ä - –≤–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
                newHeight = startBounds.height - deltaY; // –≤–≤–µ—Ä—Ö = –º–µ–Ω—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 'ne': // –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫ - –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                newWidth = startBounds.width + deltaX;   // –≤–ø—Ä–∞–≤–æ = –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω–∞
                newHeight = startBounds.height - deltaY; // –≤–≤–µ—Ä—Ö = –º–µ–Ω—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 'e': // –í–æ—Å—Ç–æ–∫ - –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
                newWidth = startBounds.width + deltaX;   // –≤–ø—Ä–∞–≤–æ = –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω–∞
                break;
            case 'se': // –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫ - –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                newWidth = startBounds.width + deltaX;   // –≤–ø—Ä–∞–≤–æ = –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω–∞
                newHeight = startBounds.height + deltaY; // –≤–Ω–∏–∑ = –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 's': // –Æ–≥ - –Ω–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
                newHeight = startBounds.height + deltaY; // –≤–Ω–∏–∑ = –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 'sw': // –Æ–≥–æ-–∑–∞–ø–∞–¥ - –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                newWidth = startBounds.width - deltaX;   // –≤–ª–µ–≤–æ = –º–µ–Ω—å—à–µ —à–∏—Ä–∏–Ω–∞
                newHeight = startBounds.height + deltaY; // –≤–Ω–∏–∑ = –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 'w': // –ó–∞–ø–∞–¥ - –ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
                newWidth = startBounds.width - deltaX;   // –≤–ª–µ–≤–æ = –º–µ–Ω—å—à–µ —à–∏—Ä–∏–Ω–∞
                break;
        }
        

        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (Shift)
        if (maintainAspectRatio) {
            const aspectRatio = startBounds.width / startBounds.height;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
            if (['nw', 'ne', 'sw', 'se'].includes(handleType)) {
                // –£–≥–ª–æ–≤—ã–µ —Ä—É—á–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                const widthChange = Math.abs(newWidth - startBounds.width);
                const heightChange = Math.abs(newHeight - startBounds.height);
                
                if (widthChange > heightChange) {
                    newHeight = newWidth / aspectRatio;
                } else {
                    newWidth = newHeight * aspectRatio;
                }
            } else if (['e', 'w'].includes(handleType)) {
                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ä—É—á–∫–∏
                newHeight = newWidth / aspectRatio;
            } else if (['n', 's'].includes(handleType)) {
                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ä—É—á–∫–∏
                newWidth = newHeight * aspectRatio;
            }
        }
        
        return {
            width: Math.round(newWidth),
            height: Math.round(newHeight)
        };
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ª–µ–≤—ã–µ/–≤–µ—Ä—Ö–Ω–∏–µ —Ä—É—á–∫–∏
     */
    calculatePositionOffset(handleType, startBounds, newSize, objectRotation = 0) {
        // –ü–æ–∑–∏—Ü–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –ª–µ–≤—ã–π –≤–µ—Ä—Ö. –î–ª—è –ª–µ–≤—ã—Ö/–≤–µ—Ä—Ö–Ω–∏—Ö —Ä—É—á–µ–∫ —Ç–æ–ø-–ª–µ–≤ –¥–æ–ª–∂–µ–Ω 
        // —Å–º–µ—â–∞—Ç—å—Å—è –Ω–∞ —Ç—É –∂–µ –≤–µ–ª–∏—á–∏–Ω—É, —á—Ç–æ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ—Å–∏.
        // –ú—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–æ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–≤: 
        // deltaX = start.width - new.width (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –º–∏—Ä–æ–≤–æ–º—É —Å–º–µ—â–µ–Ω–∏—é –º—ã—à–∏ –ø–æ X –¥–ª—è –ª–µ–≤—ã—Ö —Ä—É—á–µ–∫)
        // deltaY = start.height - new.height (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –º–∏—Ä–æ–≤–æ–º—É —Å–º–µ—â–µ–Ω–∏—é –º—ã—à–∏ –ø–æ Y –¥–ª—è –≤–µ—Ä—Ö–Ω–∏—Ö —Ä—É—á–µ–∫)

        const deltaX = startBounds.width - newSize.width;
        const deltaY = startBounds.height - newSize.height;

        let offsetX = 0;
        let offsetY = 0;

        switch (handleType) {
            case 'nw':
                offsetX = deltaX; // –ª–µ–≤—ã–π –∫—Ä–∞–π –¥–≤–∏–∂–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –º—ã—à—å—é
                offsetY = deltaY; // –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π –¥–≤–∏–∂–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –º—ã—à—å—é
                break;
            case 'n':
                offsetY = deltaY; // —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π
                break;
            case 'ne':
                offsetY = deltaY; // –≤–µ—Ä—Ö –¥–≤–∏–≥–∞–µ—Ç—Å—è, –ø—Ä–∞–≤—ã–π ‚Äî –Ω–µ—Ç
                break;
            case 'e':
                // –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π ‚Äî –ª–µ–≤—ã–π –≤–µ—Ä—Ö –Ω–µ —Å–º–µ—â–∞–µ—Ç—Å—è
                break;
            case 'se':
                // –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π ‚Äî –ª–µ–≤—ã–π –≤–µ—Ä—Ö –Ω–µ —Å–º–µ—â–∞–µ—Ç—Å—è
                break;
            case 's':
                // –Ω–∏–∂–Ω–∏–π ‚Äî –ª–µ–≤—ã–π –≤–µ—Ä—Ö –Ω–µ —Å–º–µ—â–∞–µ—Ç—Å—è
                break;
            case 'sw':
                offsetX = deltaX; // –ª–µ–≤—ã–π –¥–≤–∏–≥–∞–µ—Ç—Å—è, –Ω–∏–∑ ‚Äî –Ω–µ—Ç
                break;
            case 'w':
                offsetX = deltaX; // –ª–µ–≤—ã–π –∫—Ä–∞–π –¥–≤–∏–≥–∞–µ—Ç—Å—è
                break;
        }

        // –î–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞
        // –∏ –æ–±—Ä–∞—Ç–Ω–æ. –í –¥–∞–Ω–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤ –º–∏—Ä–æ–≤—ã—Ö –æ—Å—è—Ö –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –±–µ–∑ –≤—Ä–∞—â–µ–Ω–∏—è.
        return { x: offsetX, y: offsetY };
    }

    _openTextEditor(object, create = false) {

        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        let objectId, objectType, position, properties;
        
        if (create) {
            // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ - –¥–∞–Ω–Ω—ã–µ –≤ object.object
            const objData = object.object || object;
            objectId = objData.id || null;
            objectType = objData.type || 'text';
            position = objData.position;
            properties = objData.properties || {};
        } else {
            // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ - –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–Ω–µ
            objectId = object.id;
            objectType = object.type || 'text';
            position = object.position;
            properties = object.properties || {};
        }

        
        let { fontSize = 18, content = '', initialSize } = properties;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        const isNote = objectType === 'note';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ position —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!position) {
            console.error('‚ùå SelectTool: position is undefined in _openTextEditor', { object, create });
            return;
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
        if (this.textEditor.active) this._closeTextEditor(true);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        if (!create && objectId) {
            const posData = { objectId, position: null };
            const sizeData = { objectId, size: null };
            const pixiReq = { objectId, pixiObject: null };
            this.eventBus.emit(Events.Tool.GetObjectPosition, posData);
            this.eventBus.emit(Events.Tool.GetObjectSize, sizeData);
            this.eventBus.emit(Events.Tool.GetObjectPixi, pixiReq);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if (posData.position) position = posData.position;
            if (sizeData.size) initialSize = sizeData.size;
            
            const meta = pixiReq.pixiObject && pixiReq.pixiObject._mb ? pixiReq.pixiObject._mb.properties || {} : {};
            if (meta.content) properties.content = meta.content;
            if (meta.fontSize) properties.fontSize = meta.fontSize;
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.eventBus.emit(Events.UI.TextEditStart, { objectId: objectId || null });
        
        const app = this.app;
        const world = app?.stage?.getChildByName && app.stage.getChildByName('worldLayer');
        this.textEditor.world = world || null;
        const view = app?.view;
        if (!view) return;
        if (this.resizeHandles && typeof this.resizeHandles.hideHandles === 'function') {
            this.resizeHandles.hideHandles();
        }
        // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–º–∫–∏ + textarea + —Ä—É—á–µ–∫
        const wrapper = document.createElement('div');
        wrapper.className = 'moodboard-text-editor';
        
        // –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫–∏ –∏ —Ä—É—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        Object.assign(wrapper.style, {
            position: 'absolute',
            left: '0px',
            top: '0px',
            transformOrigin: '0 0',
            boxSizing: 'border-box',
            border: 'none', // –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
            background: 'transparent',
            zIndex: 10000,
        });
        
        const textarea = document.createElement('textarea');
        textarea.className = 'moodboard-text-input';
        textarea.value = content || '';
        textarea.placeholder = '–Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å';
        
        Object.assign(textarea.style, {
            position: 'relative',
            left: '0px',
            top: '0px',
            border: 'none',
            padding: '6px 8px', // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            fontSize: `${fontSize}px`,
            fontFamily: 'Arial, sans-serif',
            lineHeight: '1.2',
            color: '#111', // –î–ª—è –∑–∞–ø–∏—Å–æ–∫ –¥–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–Ω—ã–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            background: 'white',
            outline: 'none',
            resize: 'none',
            minWidth: '240px', // –î–ª—è –∑–∞–º–µ—Ç–æ–∫ —É–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
            minHeight: '28px', // –î–ª—è –∑–∞–º–µ—Ç–æ–∫ —É–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
            width: '280px', // –î–ª—è –∑–∞–º–µ—Ç–æ–∫ —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
            height: '36px', // –î–ª—è –∑–∞–º–µ—Ç–æ–∫ —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
            boxSizing: 'border-box',
            // –ü–æ–≤—ã—à–µ —á—ë—Ç–∫–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤ CSS
            WebkitFontSmoothing: 'antialiased',
            MozOsxFontSmoothing: 'grayscale',
        });
        
        wrapper.appendChild(textarea);
        
        // –£–±–∏—Ä–∞–µ–º —Ä—É—á–∫–∏ —Ä–µ—Å–∞–π–∑–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        // let handles = [];
        // let placeHandles = () => {};
        
        // if (!isNote) {
        //     // –†—É—á–∫–∏ —Ä–µ—Å–∞–π–∑–∞ (8 —à—Ç—É–∫) —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        //     handles = ['nw','n','ne','e','se','s','sw','w'].map(dir => {
        //         const h = document.createElement('div');
        //         h.dataset.dir = dir;
        //         Object.assign(h.style, {
        //             position: 'absolute', width: '12px', height: '12px', background: '#007ACC',
        //             border: '1px solid #fff', boxSizing: 'border-box', zIndex: 10001,
        //         });
        //         return h;
        //     });
        //     
        //     placeHandles = () => {
        //         const w = wrapper.offsetWidth;
        //         const h = wrapper.offsetHeight;
        //         handles.forEach(hd => {
        //             const dir = hd.dataset.dir;
        //             // default reset
        //             hd.style.left = '0px';
        //             hd.style.top = '0px';
        //             hd.style.right = '';
        //             hd.style.bottom = '';
        //             switch (dir) {
        //                 case 'nw':
        //                     hd.style.left = `${-6}px`;
        //                     hd.style.top = `${-6}px`;
        //                             hd.style.cursor = 'nwse-resize';
        //                             break;
        //                         case 'n':
        //                             hd.style.left = `${Math.round(w / 2 - 6)}px`;
        //                             hd.style.top = `${-6}px`;
        //                             hd.style.cursor = 'n-resize';
        //                             break;
        //                         case 'ne':
        //                             hd.style.left = `${Math.max(-6, w - 6)}px`;
        //                             hd.style.top = `${-6}px`;
        //                             hd.style.cursor = 'nesw-resize';
        //                             break;
        //                         case 'e':
        //                             hd.style.left = `${Math.max(-6, w - 6)}px`;
        //                             hd.style.top = `${Math.round(h / 2 - 6)}px`;
        //                             hd.style.cursor = 'e-resize';
        //                             break;
        //                         case 'se':
        //                             hd.style.left = `${Math.max(-6, w - 6)}px`;
        //                             hd.style.top = `${Math.max(-6, h - 6)}px`;
        //                             hd.style.cursor = 'nwse-resize';
        //                             break;
        //                         case 's':
        //                             hd.style.left = `${Math.round(w / 2 - 6)}px`;
        //                             hd.style.top = `${Math.max(-6, h - 6)}px`;
        //                             hd.style.cursor = 's-resize';
        //                             break;
        //                         case 'sw':
        //                             hd.style.left = `${-6}px`;
        //                             hd.style.top = `${Math.max(-6, h - 6)}px`;
        //                             hd.style.cursor = 'nesw-resize';
        //                             break;
        //                         case 'w':
        //                             hd.style.left = `${-6}px`;
        //                             hd.style.top = `${Math.round(h / 2 - 6)}px`;
        //                             hd.style.cursor = 'w-resize';
        //                             break;
        //                     }
        //                 });
        //             }
        //         }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        wrapper.appendChild(textarea);
        view.parentElement.appendChild(wrapper);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ textarea
        textarea.focus();
        
        // –ü–æ–∑–∏—Ü–∏—è –æ–±–µ—Ä—Ç–∫–∏ –ø–æ –º–∏—Ä—É ‚Üí —ç–∫—Ä–∞–Ω
        const toScreen = (wx, wy) => {
            const worldLayer = this.textEditor.world || (this.app?.stage);
            if (!worldLayer) return { x: wx, y: wy };
            const global = worldLayer.toGlobal(new PIXI.Point(wx, wy));
            const viewRes = (this.app?.renderer?.resolution) || (view.width && view.clientWidth ? (view.width / view.clientWidth) : 1);
            return { x: global.x / viewRes, y: global.y / viewRes };
        };
        const screenPos = toScreen(position.x, position.y);
        
        // –î–ª—è –∑–∞–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–Ω—É—Ç—Ä–∏ –∑–∞–ø–∏—Å–∫–∏
        if (objectType === 'note') {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∑–∞–ø–∏—Å–∫–∏
            let noteWidth = 160;
            let noteHeight = 100;
            
            if (initialSize) {
                noteWidth = initialSize.width;
                noteHeight = initialSize.height;
            } else if (objectId) {
                // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
                const sizeData = { objectId, size: null };
                this.eventBus.emit(Events.Tool.GetObjectSize, sizeData);
                if (sizeData.size) {
                    noteWidth = sizeData.size.width;
                    noteHeight = sizeData.size.height;
                }
            }
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–æ—á–Ω–æ —Ç–∞–º, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç –Ω–∞ –∑–∞–º–µ—Ç–∫–µ
            // –í NoteObject —Ç–µ–∫—Å—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç—Å—è —Å topMargin = 20 –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            const topMargin = 20; // –û—Ç—Å—Ç—É–ø –æ—Ç –≤–µ—Ä—Ö–∞ (–Ω–∏–∂–µ –ø–æ–ª–æ—Å–∫–∏)
            const horizontalPadding = 8; // –û—Ç—Å—Ç—É–ø—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            const editorWidth = Math.min(280, noteWidth - (horizontalPadding * 2));
            const editorHeight = Math.min(36, noteHeight - topMargin - horizontalPadding);
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–æ—á–Ω–æ —Ç–∞–º, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç
            // –¢–µ–∫—Å—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –∏–º–µ–µ—Ç –æ—Ç—Å—Ç—É–ø topMargin –æ—Ç –≤–µ—Ä—Ö–∞
            const textCenterX = noteWidth / 2; // —Ü–µ–Ω—Ç—Ä —Ç–µ–∫—Å—Ç–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            const textTopY = topMargin; // –ø–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–∞–∫, —á—Ç–æ–±—ã –µ–≥–æ —Ü–µ–Ω—Ç—Ä —Å–æ–≤–ø–∞–¥–∞–ª —Å —Ü–µ–Ω—Ç—Ä–æ–º —Ç–µ–∫—Å—Ç–∞
            const editorLeft = textCenterX - (editorWidth / 2);
            const editorTop = textTopY;
            
            wrapper.style.left = `${screenPos.x + editorLeft}px`;
            wrapper.style.top = `${screenPos.y + editorTop}px`;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            textarea.style.width = `${editorWidth}px`;
            textarea.style.height = `${editorHeight}px`;
            wrapper.style.width = `${editorWidth}px`;
            wrapper.style.height = `${editorHeight}px`;
        } else {
            // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            wrapper.style.left = `${screenPos.x}px`;
            wrapper.style.top = `${screenPos.y}px`;
        }
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (–∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞: –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
        const worldLayerRef = this.textEditor.world || (this.app?.stage);
        const s = worldLayerRef?.scale?.x || 1;
        const viewRes = (this.app?.renderer?.resolution) || (view.width && view.clientWidth ? (view.width / view.clientWidth) : 1);
        const initialWpx = initialSize ? Math.max(1, (initialSize.width || 0) * s / viewRes) : null;
        const initialHpx = initialSize ? Math.max(1, (initialSize.height || 0) * s / viewRes) : null;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        let minWBound = initialWpx || 240;
        let minHBound = 28;
        
        // –î–ª—è –∑–∞–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ª–æ–≥–∏–∫—É
        if (!isNote) {
            if (initialWpx) {
                textarea.style.width = `${initialWpx}px`;
                wrapper.style.width = `${initialWpx}px`;
            }
            if (initialHpx) {
                textarea.style.height = `${initialHpx}px`;
                wrapper.style.height = `${initialHpx}px`;
            }
        }
        // –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω
        const autoSize = () => {
            if (isNote) {
                // –î–ª—è –∑–∞–º–µ—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—à–µ
                // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º autoSize, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                return;
            }
            
            // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–≥–æ–Ω
            textarea.style.height = '1px';
            textarea.style.width = '1px';
            const w = Math.max(minWBound, textarea.scrollWidth + 8);
            const h = Math.max(minHBound, textarea.scrollHeight + 4);
            textarea.style.width = `${w}px`;
            textarea.style.height = `${h}px`;
            wrapper.style.width = `${w}px`;
            wrapper.style.height = `${h}px`;
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            // placeHandles();
        };
        
        // –í—ã–∑—ã–≤–∞–µ–º autoSize —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if (!isNote) {
            autoSize();
        }
        textarea.focus();
        // –õ–æ–∫–∞–ª—å–Ω–∞—è CSS-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ placeholder (–º–µ–Ω—å—à–µ –±–∞–∑–æ–≤–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞)
        const uid = 'mbti-' + Math.random().toString(36).slice(2);
        textarea.classList.add(uid);
        const styleEl = document.createElement('style');
        const phSize = Math.max(12, Math.round(fontSize * 0.8));
        const placeholderOpacity = isNote ? '0.4' : '0.6'; // –î–ª—è –∑–∞–ø–∏—Å–æ–∫ –¥–µ–ª–∞–µ–º placeholder –º–µ–Ω–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º
        styleEl.textContent = `.${uid}::placeholder{font-size:${phSize}px;opacity:${placeholderOpacity};}`;
        document.head.appendChild(styleEl);
        this.textEditor = { active: true, objectId, textarea, wrapper, world: this.textEditor.world, position, properties: { fontSize }, objectType, _phStyle: styleEl };

        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        if (objectId) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HTML-—ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π —Å–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç
            if (window.moodboard && window.moodboard.htmlTextLayer) {
                const el = window.moodboard.htmlTextLayer.idToEl.get(objectId);
                if (el) {
                    this.eventBus.emit(Events.Tool.HideObjectText, { objectId });
                } else {
                    console.warn(`‚ùå SelectTool: HTML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º HideObjectText`);
                }
            } else {
                this.eventBus.emit(Events.Tool.HideObjectText, { objectId });
            }
        }
        // –†–µ—Å–∞–π–∑ –º—ã—à—å—é —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if (!isNote) {
            const onHandleDown = (e) => {
                e.preventDefault(); e.stopPropagation();
                const dir = e.target.dataset.dir;
                if (!dir) return;
                const start = {
                    x: e.clientX, y: e.clientY,
                    w: wrapper.offsetWidth, h: wrapper.offsetHeight,
                    left: parseFloat(wrapper.style.left), top: parseFloat(wrapper.style.top), dir
                };
                const onMove = (ev) => {
                    const dx = ev.clientX - start.x;
                    const dy = ev.clientY - start.y;
                    let newW = start.w, newH = start.h, newLeft = start.left, newTop = start.top;
                    if (dir.includes('e')) newW = Math.max(80, start.w + dx);
                    if (dir.includes('s')) newH = Math.max(24, start.h + dy);
                    if (dir.includes('w')) { newW = Math.max(80, start.w - dx); newLeft = start.left + dx; }
                    if (dir.includes('n')) { newH = Math.max(24, start.h - dy); newTop = start.top + dy; }
                    wrapper.style.width = `${newW}px`;
                    wrapper.style.height = `${newH}px`;
                    wrapper.style.left = `${newLeft}px`;
                    wrapper.style.top = `${newTop}px`;
                    textarea.style.width = `${Math.max(minWBound, newW)}px`;
                    textarea.style.height = `${Math.max(minHBound, newH)}px`;
                    // placeHandles();
                };
                const onUp = () => {
                    document.removeEventListener('mousemove', onMove);
                    document.removeEventListener('mouseup', onUp);
                };
                document.addEventListener('mousemove', onMove);
                document.addEventListener('mouseup', onUp);
            };
            // handles.forEach(h => h.addEventListener('mousedown', onHandleDown));
        }
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        const finalize = (commit) => {
            console.log('üîß SelectTool: finalize called with commit:', commit, 'objectId:', objectId, 'objectType:', this.textEditor.objectType);
            const value = textarea.value.trim();
            const commitValue = commit && value.length > 0;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º objectType –î–û —Å–±—Ä–æ—Å–∞ this.textEditor
            const currentObjectType = this.textEditor.objectType;
            console.log('üîß SelectTool: finalize - saved objectType:', currentObjectType);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            if (objectId) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HTML-—ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç
                if (window.moodboard && window.moodboard.htmlTextLayer) {
                    const el = window.moodboard.htmlTextLayer.idToEl.get(objectId);
                    if (el) {
                        this.eventBus.emit(Events.Tool.ShowObjectText, { objectId });
                    } else {
                        console.warn(`‚ùå SelectTool: HTML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ShowObjectText`);
                    }
                } else {
                    this.eventBus.emit(Events.Tool.ShowObjectText, { objectId });
                }
            }
            
            wrapper.remove();
            this.textEditor = { active: false, objectId: null, textarea: null, wrapper: null, world: null, position: null, properties: null, objectType: 'text' };
            this.eventBus.emit(Events.UI.TextEditEnd, { objectId: objectId || null });
            if (!commitValue) {
                console.log('üîß SelectTool: finalize - no commit, returning');
                return;
            }
            if (objectId == null) {
                console.log('üîß SelectTool: finalize - creating new object');
                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
                const objectType = currentObjectType || 'text';
                this.eventBus.emit(Events.UI.ToolbarAction, {
                    type: objectType,
                    id: objectType,
                    position: { x: position.x, y: position.y },
                    properties: { content: value, fontSize }
                });
            } else {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                if (currentObjectType === 'note') {
                    console.log('üîß SelectTool: updating note content via UpdateObjectContent');
                    // –î–ª—è –∑–∞–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ PixiEngine
                    this.eventBus.emit(Events.Tool.UpdateObjectContent, { 
                        objectId: objectId, 
                        content: value 
                    });
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ StateManager
                    this.eventBus.emit(Events.Object.StateChanged, {
                        objectId: objectId,
                        updates: {
                            content: value
                        }
                    });
                } else {
                    // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    console.log('üîß SelectTool: finalize - updating text content via UpdateObjectContent');
                    this.eventBus.emit(Events.Tool.UpdateObjectContent, { 
                        objectId: objectId, 
                        content: value 
                    });
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ StateManager
                    this.eventBus.emit(Events.Object.StateChanged, {
                        objectId: objectId,
                        updates: {
                            content: value
                        }
                    });
                }
            }
        };
        textarea.addEventListener('blur', (e) => {
            // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ ‚Äî —á—Ç–æ–±—ã –ø–æ–ª–µ –Ω–µ –∏—Å—á–µ–∑–∞–ª–æ —Å—Ä–∞–∑—É
            const isNew = objectId == null;
            const value = (textarea.value || '').trim();
            if (isNew && value.length === 0) {
                // –í–µ—Ä–Ω—ë–º —Ñ–æ–∫—É—Å –æ–±—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
                setTimeout(() => textarea.focus(), 0);
                return;
            }
            finalize(true);
        });
        textarea.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                finalize(true);
            } else if (e.key === 'Escape') {
                e.preventDefault();
                finalize(false);
            }
        });
        // –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if (!isNote) {
            textarea.addEventListener('input', autoSize);
        }
    }

    _closeTextEditor(commit) {
        console.log('üîß SelectTool: _closeTextEditor called with commit:', commit);
        const textarea = this.textEditor.textarea;
        if (!textarea) return;
        const value = textarea.value.trim();
        const commitValue = commit && value.length > 0;
        const objectType = this.textEditor.objectType || 'text';
        const objectId = this.textEditor.objectId;
        const position = this.textEditor.position;
        const properties = this.textEditor.properties;
        
        console.log('üîß SelectTool: _closeTextEditor - objectType:', objectType, 'objectId:', objectId, 'commitValue:', commitValue);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        if (objectId) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HTML-—ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç
            if (window.moodboard && window.moodboard.htmlTextLayer) {
                const el = window.moodboard.htmlTextLayer.idToEl.get(objectId);
                if (el) {
                    this.eventBus.emit(Events.Tool.ShowObjectText, { objectId });
                } else {
                    console.warn(`‚ùå SelectTool: HTML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ShowObjectText`);
                }
            } else {
                this.eventBus.emit(Events.Tool.ShowObjectText, { objectId });
            }
        }
        
        textarea.remove();
        this.textEditor = { active: false, objectId: null, textarea: null, world: null, objectType: 'text' };
        if (!commitValue) return;
        if (objectId == null) {
            // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ ToolbarAction
            console.log('üîß SelectTool: creating new object via ToolbarAction, type:', objectType);
            this.eventBus.emit(Events.UI.ToolbarAction, {
                type: objectType,
                id: objectType,
                position: { x: position.x, y: position.y },
                properties: { content: value, fontSize: properties.fontSize }
            });
        } else {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if (objectType === 'note') {
                console.log('üîß SelectTool: updating note content via UpdateObjectContent');
                // –î–ª—è –∑–∞–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ PixiEngine
                this.eventBus.emit(Events.Tool.UpdateObjectContent, { 
                    objectId: objectId, 
                    content: value 
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ StateManager
                this.eventBus.emit(Events.Object.StateChanged, {
                    objectId: objectId,
                    updates: {
                        content: value
                    }
                });
            } else {
                // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                console.log('üîß SelectTool: updating text content via UpdateObjectContent');
                this.eventBus.emit(Events.Tool.UpdateObjectContent, { 
                    objectId: objectId, 
                    content: value 
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ StateManager
                this.eventBus.emit(Events.Object.StateChanged, {
                    objectId: objectId,
                    updates: {
                        content: value
                    }
                });
            }
        }
    }


}
