import { BaseTool } from '../BaseTool.js';
import { ResizeHandles } from '../ResizeHandles.js';
import * as PIXI from 'pixi.js';

/**
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
 * –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤
 */
export class SelectTool extends BaseTool {
    constructor(eventBus) {
        super('select', eventBus);
        this.cursor = 'default';
        this.hotkey = 'v';
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.selectedObjects = new Set();
        this.isMultiSelect = false;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.isDragging = false;
        this.dragOffset = { x: 0, y: 0 };
        this.dragTarget = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        this.isResizing = false;
        this.resizeHandle = null;
        this.resizeStartBounds = null;
        this.resizeStartMousePos = null;
        this.resizeStartPosition = null;
        
        // –°–∏—Å—Ç–µ–º–∞ —Ä—É—á–µ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        this.resizeHandles = null;
        
        // –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏
        this.currentX = 0;
        this.currentY = 0;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
        this.isRotating = false;
        this.rotateCenter = null;
        this.rotateStartAngle = 0;
        this.rotateCurrentAngle = 0;
        this.rotateStartMouseAngle = 0;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–º–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.isBoxSelect = false;
        this.selectionBox = null;
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    activate(app) {
        super.activate();
        console.log('üîß SelectTool –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, app:', !!app);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä—É—á–µ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        if (!this.resizeHandles && app) {

            this.resizeHandles = new ResizeHandles(app);
        } else if (!app) {
            console.log('‚ùå PIXI app –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ activate');
        } else {
            console.log('‚ÑπÔ∏è ResizeHandles —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã');
        }
    }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    deactivate() {
        super.deactivate();
        
        // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ —Ä—É—á–∫–∏
        this.clearSelection();
        if (this.resizeHandles) {
            this.resizeHandles.hideHandles();
        }
    }
    
    /**
     * –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
     */
    onMouseDown(event) {
        super.onMouseDown(event);
        
        this.isMultiSelect = event.originalEvent.ctrlKey || event.originalEvent.metaKey;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        const hitResult = this.hitTest(event.x, event.y);
        
        if (hitResult.type === 'resize-handle') {
            this.startResize(hitResult.handle, hitResult.object);
        } else if (hitResult.type === 'rotate-handle') {
            this.startRotate(hitResult.object);
        } else if (hitResult.type === 'object') {

            this.handleObjectSelect(hitResult.object, event);
        } else {
            // –ö–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–º–∫—É –≤—ã–¥–µ–ª–µ–Ω–∏—è
            this.startBoxSelect(event);
        }
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏
     */
    onMouseMove(event) {
        super.onMouseMove(event);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏
        this.currentX = event.x;
        this.currentY = event.y;
        
        if (this.isResizing) {
            this.updateResize(event);
        } else if (this.isRotating) {
            this.updateRotate(event);
        } else if (this.isDragging) {
            this.updateDrag(event);
        } else if (this.isBoxSelect) {
            this.updateBoxSelect(event);
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–¥ –º—ã—à—å—é
            this.updateCursor(event);
        }
    }
    
    /**
     * –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
     */
    onMouseUp(event) {
        if (this.isResizing) {
            this.endResize();
        } else if (this.isRotating) {
            this.endRotate();
        } else if (this.isDragging) {
            this.endDrag();
        } else if (this.isBoxSelect) {
            this.endBoxSelect();
        }
        
        super.onMouseUp(event);
    }
    
    /**
     * –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    onDoubleClick(event) {
        const hitResult = this.hitTest(event.x, event.y);
        
        if (hitResult.type === 'object') {
            this.editObject(hitResult.object);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
     */
    onKeyDown(event) {
        switch (event.key) {
            case 'Delete':
            case 'Backspace':
                this.deleteSelectedObjects();
                break;
                
            case 'a':
                if (event.ctrlKey) {
                    this.selectAll();
                    event.originalEvent.preventDefault();
                }
                break;
                
            case 'Escape':
                this.clearSelection();
                break;
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
     */
    hitTest(x, y) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (–æ–Ω–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if (this.resizeHandles) {
            const pixiObjectAtPoint = this.getPixiObjectAt(x, y);

            
            const handleInfo = this.resizeHandles.getHandleInfo(pixiObjectAtPoint);
            if (handleInfo) {

                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä—É—á–∫–∏
                const hitType = handleInfo.type === 'rotate' ? 'rotate-handle' : 'resize-handle';
                
                return {
                    type: hitType,
                    handle: handleInfo.type,
                    object: handleInfo.targetObjectId,
                    pixiObject: handleInfo.handle
                };
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
        const hitTestData = { x, y, result: null };
        this.emit('hit:test', hitTestData);
        
        if (hitTestData.result && hitTestData.result.object) {
            return hitTestData.result;
        }
        
        return { type: 'empty' };
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å PIXI –æ–±—ä–µ–∫—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
     */
    getPixiObjectAt(x, y) {
        if (!this.resizeHandles || !this.resizeHandles.app) return null;
        
        const point = new PIXI.Point(x, y);
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Ä—É—á–µ–∫ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if (this.resizeHandles.container.visible) {
            for (let i = this.resizeHandles.container.children.length - 1; i >= 0; i--) {
                const child = this.resizeHandles.container.children[i];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                if (child.containsPoint && child.containsPoint(point)) {

                    return child;
                }
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (—Ä—É—á–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è)
                if (child instanceof PIXI.Container && child.children.length > 0) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    const bounds = child.getBounds();
                    if (point.x >= bounds.x && point.x <= bounds.x + bounds.width &&
                        point.y >= bounds.y && point.y <= bounds.y + bounds.height) {

                        return child;
                    }
                }
            }
        }
        
        // –ó–∞—Ç–µ–º –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–µ
        const stage = this.resizeHandles.app.stage;
        for (let i = stage.children.length - 1; i >= 0; i--) {
            const child = stage.children[i];
            if (child !== this.resizeHandles.container && child.containsPoint && child.containsPoint(point)) {

                return child;
            }
        }
        
        console.log(`‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥ (${x}, ${y})`);
        return null;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
     */
    handleObjectSelect(objectId, event) {
        if (!this.isMultiSelect) {
            this.clearSelection();
        }
        
        if (this.selectedObjects.has(objectId)) {
            if (this.isMultiSelect) {
                this.removeFromSelection(objectId);
            } else {
                // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
                this.startDrag(objectId, event);
            }
        } else {
            this.addToSelection(objectId);
            this.startDrag(objectId, event);
        }
    }
    
    /**
     * –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    startDrag(objectId, event) {
        this.isDragging = true;
        this.dragTarget = objectId;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞
        const objectData = { objectId, position: null };
        this.emit('get:object:position', objectData);
        
        if (objectData.position) {
            this.dragOffset = {
                x: event.x - objectData.position.x,
                y: event.y - objectData.position.y
            };
        } else {
            this.dragOffset = { x: 0, y: 0 };
        }
        
        this.emit('drag:start', { object: objectId, position: { x: event.x, y: event.y } });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    updateDrag(event) {
        if (!this.dragTarget) return;
        
        const newX = event.x - this.dragOffset.x;
        const newY = event.y - this.dragOffset.y;
        
        this.emit('drag:update', { 
            object: this.dragTarget, 
            position: { x: newX, y: newY } 
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        if (this.resizeHandles && this.selectedObjects.has(this.dragTarget)) {
            this.resizeHandles.updateHandles();
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    endDrag() {
        if (this.dragTarget) {
            this.emit('drag:end', { object: this.dragTarget });
        }
        
        this.isDragging = false;
        this.dragTarget = null;
        this.dragOffset = { x: 0, y: 0 };
    }
    
    /**
     * –ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    startResize(handle, objectId) {
        console.log(`üîß –ù–∞—á–∏–Ω–∞–µ–º resize: —Ä—É—á–∫–∞ ${handle}, –æ–±—ä–µ–∫—Ç ${objectId}`);
        
        this.isResizing = true;
        this.resizeHandle = handle;
        this.dragTarget = objectId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º dragTarget –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const sizeData = { objectId, size: null };
        this.emit('get:object:size', sizeData);
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞
        const positionData = { objectId, position: null };
        this.emit('get:object:position', positionData);
        
        this.resizeStartBounds = sizeData.size || { width: 100, height: 100 };
        this.resizeStartMousePos = { x: this.currentX, y: this.currentY };
        this.resizeStartPosition = positionData.position || { x: 0, y: 0 };
        
        console.log(`üìê –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:`, this.resizeStartBounds);
        console.log(`üìç –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –º—ã—à–∏:`, this.resizeStartMousePos);
        console.log(`üìç –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞:`, this.resizeStartPosition);
        
        // –†—É—á–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤–∏–¥–Ω—ã–º–∏ –≤–æ –≤—Ä–µ–º—è resize –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        
        this.emit('resize:start', { object: objectId, handle });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    updateResize(event) {
        if (!this.isResizing || !this.resizeStartBounds || !this.resizeStartMousePos) return;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
        const deltaX = event.x - this.resizeStartMousePos.x;
        const deltaY = event.y - this.resizeStartMousePos.y;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∂–∞—Ç –ª–∏ Shift –¥–ª—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        const maintainAspectRatio = event.originalEvent.shiftKey;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä—É—á–∫–∏
        const newSize = this.calculateNewSize(
            this.resizeHandle, 
            this.resizeStartBounds, 
            deltaX, 
            deltaY, 
            maintainAspectRatio
        );
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        newSize.width = Math.max(20, newSize.width);
        newSize.height = Math.max(20, newSize.height);
        
        // –ü–æ–ª—É—á–∞–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—â–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        const rotationData = { objectId: this.dragTarget, rotation: 0 };
        this.emit('get:object:rotation', rotationData);
        const objectRotation = rotationData.rotation || 0;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –∞–±—Å–æ–ª—é—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ª–µ–≤—ã—Ö/–≤–µ—Ä—Ö–Ω–∏—Ö —Ä—É—á–µ–∫
        const positionOffset = this.calculatePositionOffset(
            this.resizeHandle, 
            this.resizeStartBounds, 
            newSize,
            objectRotation
        );
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        const newPosition = {
            x: this.resizeStartPosition.x + positionOffset.x,
            y: this.resizeStartPosition.y + positionOffset.y
        };
        
        this.emit('resize:update', { 
            object: this.dragTarget,
            handle: this.resizeHandle,
            size: newSize,
            position: newPosition
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è resize
        if (this.resizeHandles) {
            this.resizeHandles.updateHandles();
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    endResize() {
        if (this.dragTarget && this.resizeStartBounds) {
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            const finalSizeData = { objectId: this.dragTarget, size: null };
            this.emit('get:object:size', finalSizeData);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            const finalPositionData = { objectId: this.dragTarget, position: null };
            this.emit('get:object:position', finalPositionData);
            
            this.emit('resize:end', { 
                object: this.dragTarget,
                oldSize: this.resizeStartBounds,
                newSize: finalSizeData.size || this.resizeStartBounds,
                oldPosition: this.resizeStartPosition,
                newPosition: finalPositionData.position || this.resizeStartPosition
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—É—á–µ–∫ –ø–æ—Å–ª–µ resize
        if (this.resizeHandles) {
            this.resizeHandles.updateHandles(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—É—á–µ–∫
        }
        
        this.isResizing = false;
        this.resizeHandle = null;
        this.resizeStartBounds = null;
        this.resizeStartMousePos = null;
        this.resizeStartPosition = null;
    }
    
    /**
     * –ù–∞—á–∞–ª–æ –ø–æ–≤–æ—Ä–æ—Ç–∞
     */
    startRotate(objectId) {
        this.isRotating = true;
        this.dragTarget = objectId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º dragTarget –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –æ–±—ä–µ–∫—Ç–∞
        const rotationData = { objectId, rotation: 0 };
        this.emit('get:object:rotation', rotationData);
        this.rotateStartAngle = rotationData.rotation || 0;
        this.rotateCurrentAngle = this.rotateStartAngle;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ –≤—Ä–∞—â–µ–Ω–∏—è
        const positionData = { objectId, position: null };
        this.emit('get:object:position', positionData);
        
        const sizeData = { objectId, size: null };
        this.emit('get:object:size', sizeData);
        
        if (positionData.position && sizeData.size) {
            // –¶–µ–Ω—Ç—Ä –æ–±—ä–µ–∫—Ç–∞ = –ø–æ–∑–∏—Ü–∏—è + –ø–æ–ª–æ–≤–∏–Ω–∞ —Ä–∞–∑–º–µ—Ä–∞
            this.rotateCenter = {
                x: positionData.position.x + sizeData.size.width / 2,
                y: positionData.position.y + sizeData.size.height / 2
            };
            
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª –º—ã—à–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
            this.rotateStartMouseAngle = Math.atan2(
                this.currentY - this.rotateCenter.y,
                this.currentX - this.rotateCenter.x
            );
            

        }
        
        // –†—É—á–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤–∏–¥–Ω—ã–º–∏ –≤–æ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        
        this.emit('rotate:start', { object: objectId });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
     */
    updateRotate(event) {
        if (!this.isRotating || !this.rotateCenter) return;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –º—ã—à–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
        const currentMouseAngle = Math.atan2(
            event.y - this.rotateCenter.y,
            event.x - this.rotateCenter.x
        );
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å —É–≥–ª–æ–≤ (—Å–∫–æ–ª—å–∫–æ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –º—ã—à—å)
        let deltaAngle = currentMouseAngle - this.rotateStartMouseAngle;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω -œÄ –¥–æ œÄ
        while (deltaAngle > Math.PI) deltaAngle -= 2 * Math.PI;
        while (deltaAngle < -Math.PI) deltaAngle += 2 * Math.PI;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–¥—É—Å—ã
        let deltaAngleDegrees = deltaAngle * 180 / Math.PI;
        
        // –ï—Å–ª–∏ –∑–∞–∂–∞—Ç Shift - —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ (15¬∞ —à–∞–≥–∏)
        if (event.originalEvent.shiftKey) {
            deltaAngleDegrees = Math.round(deltaAngleDegrees / 15) * 15;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É–≥–æ–ª –æ–±—ä–µ–∫—Ç–∞
        this.rotateCurrentAngle = this.rotateStartAngle + deltaAngleDegrees;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –æ–±—ä–µ–∫—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-360¬∞
        while (this.rotateCurrentAngle < 0) this.rotateCurrentAngle += 360;
        while (this.rotateCurrentAngle >= 360) this.rotateCurrentAngle -= 360;
        
        this.emit('rotate:update', { 
            object: this.dragTarget,
            angle: this.rotateCurrentAngle
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—á–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ–≤–æ—Ä–æ—Ç–∞
        if (this.resizeHandles) {
            this.resizeHandles.updateHandles();
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
     */
    endRotate() {
        if (this.dragTarget && this.rotateStartAngle !== undefined) {
            this.emit('rotate:end', { 
                object: this.dragTarget,
                oldAngle: this.rotateStartAngle,
                newAngle: this.rotateCurrentAngle
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—É—á–µ–∫ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
        if (this.resizeHandles) {
            this.resizeHandles.updateHandles(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—É—á–µ–∫
        }
        
        this.isRotating = false;
        this.rotateCenter = null;
        this.rotateStartAngle = 0;
        this.rotateCurrentAngle = 0;
        this.rotateStartMouseAngle = 0;
    }
    
    /**
     * –ù–∞—á–∞–ª–æ —Ä–∞–º–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    startBoxSelect(event) {
        this.isBoxSelect = true;
        this.selectionBox = {
            startX: event.x,
            startY: event.y,
            endX: event.x,
            endY: event.y
        };
        
        if (!this.isMultiSelect) {
            this.clearSelection();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–º–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    updateBoxSelect(event) {
        if (!this.selectionBox) return;
        
        this.selectionBox.endX = event.x;
        this.selectionBox.endY = event.y;
        
        // TODO: –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ä–∞–º–∫—É –≤—ã–¥–µ–ª–µ–Ω–∏—è
        // TODO: –í—ã–¥–µ–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –≤ —Ä–∞–º–∫—É
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–º–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    endBoxSelect() {
        // TODO: –§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–∞–º–∫–µ
        this.isBoxSelect = false;
        this.selectionBox = null;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
     */
    updateCursor(event) {
        const hitResult = this.hitTest(event.x, event.y);
        
        switch (hitResult.type) {
            case 'resize-handle':
                this.cursor = this.getResizeCursor(hitResult.handle);
                break;
            case 'rotate-handle':
                this.cursor = 'grab';
                break;
            case 'object':
                this.cursor = 'move';
                break;
            default:
                this.cursor = 'default';
        }
        
        this.setCursor();
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫—É—Ä—Å–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞, –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–π –Ω–∞ –Ω—É–∂–Ω—ã–π —É–≥–æ–ª
     */
    createRotatedResizeCursor(handleType, rotationDegrees) {
        // –ë–∞–∑–æ–≤—ã–µ —É–≥–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä—É—á–∫–∏ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
        const baseAngles = {
            'e': 0,     // –í–æ—Å—Ç–æ–∫ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üí
            'se': 45,   // –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫ - –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üò
            's': 90,    // –Æ–≥ - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üì
            'sw': 135,  // –Æ–≥–æ-–∑–∞–ø–∞–¥ - –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üô
            'w': 180,   // –ó–∞–ø–∞–¥ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üê
            'nw': 225,  // –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥ - –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üñ
            'n': 270,   // –°–µ–≤–µ—Ä - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üë
            'ne': 315   // –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫ - –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ ‚Üó
        };
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —É–≥–æ–ª: –±–∞–∑–æ–≤—ã–π —É–≥–æ–ª —Ä—É—á–∫–∏ + –ø–æ–≤–æ—Ä–æ—Ç –æ–±—ä–µ–∫—Ç–∞
        const totalAngle = (baseAngles[handleType] + rotationDegrees) % 360;
        
        // –°–æ–∑–¥–∞–µ–º SVG –∫—É—Ä—Å–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞, –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–π –Ω–∞ –Ω—É–∂–Ω—ã–π —É–≥–æ–ª (–±–µ–ª—ã–π, –∫—Ä—É–ø–Ω–µ–µ)
        const svg = `<svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><g transform="rotate(${totalAngle} 16 16)"><path d="M4 16 L9 11 L9 13 L23 13 L23 11 L28 16 L23 21 L23 19 L9 19 L9 21 Z" fill="white" stroke="black" stroke-width="1"/></g></svg>`;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º encodeURIComponent –≤–º–µ—Å—Ç–æ btoa –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        const dataUrl = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svg)}`;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º CSS cursor —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (hotspot –≤ —Ü–µ–Ω—Ç—Ä–µ 16x16)
        return `url("${dataUrl}") 16 16, auto`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è —Ä–µ—Å–∞–π–∑-—Ö–µ–Ω–¥–ª–∞ —Å —É—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    getResizeCursor(handle) {
        // –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞
        const selectedObject = Array.from(this.selectedObjects)[0];
        if (!selectedObject) {
            return 'default';
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
        const rotationData = { objectId: selectedObject, rotation: 0 };
        this.emit('get:object:rotation', rotationData);
        const objectRotation = rotationData.rotation || 0;
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫—É—Ä—Å–æ—Ä, –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–π –Ω–∞ —Ç–æ—á–Ω—ã–π —É–≥–æ–ª –æ–±—ä–µ–∫—Ç–∞
        return this.createRotatedResizeCursor(handle, objectRotation);
    }
    
    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º setCursor –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ canvas
     */
    setCursor() {
        if (this.resizeHandles && this.resizeHandles.app && this.resizeHandles.app.view) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ canvas, –∞ –Ω–µ –Ω–∞ body
            this.resizeHandles.app.view.style.cursor = this.cursor;
        } else {
            // Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
            super.setCursor();
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
     */
    
        addToSelection(object) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–¥–µ–ª–µ–Ω–∏–µ: ${object}`);
        this.selectedObjects.add(object);
        this.emit('selection:add', { object });
        this.updateResizeHandles();
    }

    removeFromSelection(object) {
        this.selectedObjects.delete(object);
        this.emit('selection:remove', { object });
        this.updateResizeHandles();
    }

    clearSelection() {
        const objects = Array.from(this.selectedObjects);
        this.selectedObjects.clear();
        this.emit('selection:clear', { objects });
        this.updateResizeHandles();
    }
    
    selectAll() {
        // TODO: –í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –¥–æ—Å–∫–µ
        this.emit('selection:all');
    }
    
    deleteSelectedObjects() {
        const objects = Array.from(this.selectedObjects);
        this.clearSelection();
        this.emit('objects:delete', { objects });
    }
    
    editObject(object) {
        this.emit('object:edit', { object });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–¥–µ–ª–µ–Ω–∏–∏
     */
    getSelection() {
        return Array.from(this.selectedObjects);
    }
    
    hasSelection() {
        return this.selectedObjects.size > 0;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É—á–µ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    updateResizeHandles() {
        if (!this.resizeHandles) {
            console.log('‚ùå ResizeHandles –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—á–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if (this.selectedObjects.size === 1) {
            const objectId = Array.from(this.selectedObjects)[0];
            const pixiObjectData = { objectId, pixiObject: null };
            
            // –ü–æ–ª—É—á–∞–µ–º PIXI –æ–±—ä–µ–∫—Ç
            this.emit('get:object:pixi', pixiObjectData);
            
            if (pixiObjectData.pixiObject) {
                this.resizeHandles.showHandles(pixiObjectData.pixiObject, objectId);
            }
        } else {
            this.resizeHandles.hideHandles();
        }
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–∏–ø —Ä—É—á–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    transformHandleType(handleType, rotationDegrees) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-360
        let angle = rotationDegrees % 360;
        if (angle < 0) angle += 360;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤
        const rotations = Math.round(angle / 90) % 4;
        
        if (rotations === 0) return handleType; // –ù–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞
        
        // –ö–∞—Ä—Ç–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ 90¬∞
        const transformMap = {
            'nw': ['ne', 'se', 'sw', 'nw'],  // nw -> ne -> se -> sw -> nw
            'n':  ['e',  's',  'w',  'n'],   // n -> e -> s -> w -> n
            'ne': ['se', 'sw', 'nw', 'ne'],  // ne -> se -> sw -> nw -> ne
            'e':  ['s',  'w',  'n',  'e'],   // e -> s -> w -> n -> e
            'se': ['sw', 'nw', 'ne', 'se'],  // se -> sw -> nw -> ne -> se
            's':  ['w',  'n',  'e',  's'],   // s -> w -> n -> e -> s
            'sw': ['nw', 'ne', 'se', 'sw'],  // sw -> nw -> ne -> se -> sw
            'w':  ['n',  'e',  's',  'w']    // w -> n -> e -> s -> w
        };
        
        return transformMap[handleType] ? transformMap[handleType][rotations - 1] : handleType;
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ä—É—á–∫–∏ –∏ —Å–º–µ—â–µ–Ω–∏—è –º—ã—à–∏
     */
    calculateNewSize(handleType, startBounds, deltaX, deltaY, maintainAspectRatio) {
        let newWidth = startBounds.width;
        let newHeight = startBounds.height;
        
        // –ü–æ–ª—É—á–∞–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
        const rotationData = { objectId: this.dragTarget, rotation: 0 };
        this.emit('get:object:rotation', rotationData);
        const objectRotation = rotationData.rotation || 0;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø —Ä—É—á–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
        const transformedHandleType = this.transformHandleType(handleType, objectRotation);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä—É—á–∫–∏
        switch (transformedHandleType) {
            case 'nw': // –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥ - –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                newWidth = startBounds.width - deltaX;  // –≤–ª–µ–≤–æ = –º–µ–Ω—å—à–µ —à–∏—Ä–∏–Ω–∞
                newHeight = startBounds.height - deltaY; // –≤–≤–µ—Ä—Ö = –º–µ–Ω—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 'n': // –°–µ–≤–µ—Ä - –≤–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
                newHeight = startBounds.height - deltaY; // –≤–≤–µ—Ä—Ö = –º–µ–Ω—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 'ne': // –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫ - –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                newWidth = startBounds.width + deltaX;   // –≤–ø—Ä–∞–≤–æ = –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω–∞
                newHeight = startBounds.height - deltaY; // –≤–≤–µ—Ä—Ö = –º–µ–Ω—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 'e': // –í–æ—Å—Ç–æ–∫ - –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
                newWidth = startBounds.width + deltaX;   // –≤–ø—Ä–∞–≤–æ = –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω–∞
                break;
            case 'se': // –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫ - –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                newWidth = startBounds.width + deltaX;   // –≤–ø—Ä–∞–≤–æ = –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω–∞
                newHeight = startBounds.height + deltaY; // –≤–Ω–∏–∑ = –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 's': // –Æ–≥ - –Ω–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
                newHeight = startBounds.height + deltaY; // –≤–Ω–∏–∑ = –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 'sw': // –Æ–≥–æ-–∑–∞–ø–∞–¥ - –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                newWidth = startBounds.width - deltaX;   // –≤–ª–µ–≤–æ = –º–µ–Ω—å—à–µ —à–∏—Ä–∏–Ω–∞
                newHeight = startBounds.height + deltaY; // –≤–Ω–∏–∑ = –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç–∞
                break;
            case 'w': // –ó–∞–ø–∞–¥ - –ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
                newWidth = startBounds.width - deltaX;   // –≤–ª–µ–≤–æ = –º–µ–Ω—å—à–µ —à–∏—Ä–∏–Ω–∞
                break;
        }
        

        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (Shift)
        if (maintainAspectRatio) {
            const aspectRatio = startBounds.width / startBounds.height;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
            if (['nw', 'ne', 'sw', 'se'].includes(handleType)) {
                // –£–≥–ª–æ–≤—ã–µ —Ä—É—á–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                const widthChange = Math.abs(newWidth - startBounds.width);
                const heightChange = Math.abs(newHeight - startBounds.height);
                
                if (widthChange > heightChange) {
                    newHeight = newWidth / aspectRatio;
                } else {
                    newWidth = newHeight * aspectRatio;
                }
            } else if (['e', 'w'].includes(handleType)) {
                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ä—É—á–∫–∏
                newHeight = newWidth / aspectRatio;
            } else if (['n', 's'].includes(handleType)) {
                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ä—É—á–∫–∏
                newWidth = newHeight * aspectRatio;
            }
        }
        
        return {
            width: Math.round(newWidth),
            height: Math.round(newHeight)
        };
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ª–µ–≤—ã–µ/–≤–µ—Ä—Ö–Ω–∏–µ —Ä—É—á–∫–∏
     */
    calculatePositionOffset(handleType, startBounds, newSize, objectRotation = 0) {
        let offsetX = 0;
        let offsetY = 0;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø —Ä—É—á–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
        const transformedHandleType = this.transformHandleType(handleType, objectRotation);
        
        // –í–ê–ñ–ù–û: –û–±—ä–µ–∫—Ç —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç pivot –≤ —Ü–µ–Ω—Ç—Ä–µ, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ—â–µ–Ω–∏—è
        // –î–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ pivot'–∞ —Å–º–µ—â–µ–Ω–∏–µ = –ø–æ–ª–æ–≤–∏–Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        
        const deltaWidth = newSize.width - startBounds.width;
        const deltaHeight = newSize.height - startBounds.height;
        
        // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ª–µ–≤—ã–µ —Ä—É—á–∫–∏ –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–¥–≤–∏–Ω—É—Ç—å—Å—è 
        // —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π –æ—Å—Ç–∞–ª—Å—è –Ω–∞ –º–µ—Å—Ç–µ
        if (['nw', 'w', 'sw'].includes(transformedHandleType)) {
            // –î–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ pivot —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–ª–µ–≤–æ
            offsetX = -deltaWidth / 2;
        }
        
        // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤—ã–µ —Ä—É—á–∫–∏ –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–¥–≤–∏–Ω—É—Ç—å—Å—è
        // —Ç–∞–∫, —á—Ç–æ–±—ã –ª–µ–≤—ã–π –∫—Ä–∞–π –æ—Å—Ç–∞–ª—Å—è –Ω–∞ –º–µ—Å—Ç–µ
        if (['ne', 'e', 'se'].includes(transformedHandleType)) {
            // –î–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ pivot —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–ø—Ä–∞–≤–æ
            offsetX = deltaWidth / 2;
        }
        
        // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –≤–µ—Ä—Ö–Ω–∏–µ —Ä—É—á–∫–∏ –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–¥–≤–∏–Ω—É—Ç—å—Å—è
        // —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π –æ—Å—Ç–∞–ª—Å—è –Ω–∞ –º–µ—Å—Ç–µ  
        if (['nw', 'n', 'ne'].includes(transformedHandleType)) {
            // –î–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ pivot —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–≤–µ—Ä—Ö
            offsetY = -deltaHeight / 2;
        }
        
        // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –Ω–∏–∂–Ω–∏–µ —Ä—É—á–∫–∏ –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–¥–≤–∏–Ω—É—Ç—å—Å—è
        // —Ç–∞–∫, —á—Ç–æ–±—ã –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π –æ—Å—Ç–∞–ª—Å—è –Ω–∞ –º–µ—Å—Ç–µ
        if (['sw', 's', 'se'].includes(transformedHandleType)) {
            // –î–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ pivot —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–Ω–∏–∑
            offsetY = deltaHeight / 2;
        }
        
        return { x: offsetX, y: offsetY };
    }
}
