/**
 * –°–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—á–µ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤
 * 
 * ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–ê–ù–ù–´–ô –ú–û–ú–ï–ù–¢ –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø ‚ö†Ô∏è
 * –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è HTML-—Ä—É—á–∫–∏ –∏–∑ HtmlHandlesLayer.js
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
 */
import * as PIXI from 'pixi.js';

export class ResizeHandles {
    constructor(app) {
        this.app = app;
        this.container = new PIXI.Container();
        this.container.name = 'resize-handles';
        this.container.zIndex = 100000; // –ü–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ worldLayer
        // –†–∞–∑–º–µ—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä—É—á–µ–∫ –≤ worldLayer, —á—Ç–æ–±—ã –æ–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–ª—Å—è –≤–º–µ—Å—Ç–µ —Å –¥–æ—Å–∫–æ–π
        const worldLayer = this.app.stage.getChildByName && this.app.stage.getChildByName('worldLayer');
        if (worldLayer) {
            worldLayer.addChild(this.container);
            worldLayer.sortableChildren = true;
        } else {
            this.app.stage.addChild(this.container);
            this.app.stage.sortableChildren = true;
        }
        
        this.handles = [];
        this.targetObject = null;
        this.targetBounds = null;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Ä—É—á–µ–∫
        this.handleSize = 12; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–ª–∏–∫–∞
        this.handleColor = 0x007ACC;
        this.handleHoverColor = 0x0099FF;
        this.borderColor = 0x007ACC;
        this.borderWidth = 1;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É—á–∫–∏ –≤—Ä–∞—â–µ–Ω–∏—è
        this.rotateHandleSize = 20; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞
        this.rotateHandleColor = 0x28A745; // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        this.rotateHandleHoverColor = 0x34CE57;
        this.rotateHandleOffset = 25; // –°–º–µ—â–µ–Ω–∏–µ –æ—Ç —É–≥–ª–∞ –æ–±—ä–µ–∫—Ç–∞
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä—É—á–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
     */
    showHandles(pixiObject, objectId) {
        console.log(`üëÅÔ∏è showHandles –≤—ã–∑–≤–∞–Ω –¥–ª—è ${objectId}`);
        this.hideHandles();
        
        this.targetObject = pixiObject;
        this.targetObjectId = objectId;
        this.updateHandles();
        this.container.visible = true;
        console.log(`üëÅÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ visible: ${this.container.visible}`);
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å —Ä—É—á–∫–∏
     */
    hideHandles() {
        this.container.visible = false;
        this.targetObject = null;
        this.targetObjectId = null;
        this.clearHandles();
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ä—É—á–µ–∫
     */
    updateHandles() {
        if (!this.targetObject) return;
        
        this.clearHandles();
        
        // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        const localBounds = this.targetObject.getLocalBounds();
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ä—É—á–µ–∫ —Å –æ–±—ä–µ–∫—Ç–æ–º
        if (this.targetObject.rotation !== undefined && this.targetObject.rotation !== 0) {
            this.container.rotation = this.targetObject.rotation;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            // –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –∏–º–µ–µ—Ç pivot –≤ —Ü–µ–Ω—Ç—Ä–µ
            const objectCenterX = this.targetObject.x;
            const objectCenterY = this.targetObject.y;
            const objectPivotX = this.targetObject.pivot ? this.targetObject.pivot.x : 0;
            const objectPivotY = this.targetObject.pivot ? this.targetObject.pivot.y : 0;
            
            // –ü–æ–∑–∏—Ü–∏—è –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –æ–±—ä–µ–∫—Ç–∞ = —Ü–µ–Ω—Ç—Ä - pivot
            const objectTopLeftX = objectCenterX - objectPivotX;
            const objectTopLeftY = objectCenterY - objectPivotY;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä—É—á–µ–∫ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–ª—Å—è –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
            this.container.x = objectCenterX;
            this.container.y = objectCenterY;
            this.container.pivot.set(objectPivotX, objectPivotY);
            
            console.log(`üîÑ –ü–æ–≤–æ—Ä–æ—Ç —Ä—É—á–µ–∫: ${(this.targetObject.rotation * 180 / Math.PI).toFixed(1)}¬∞, —Ü–µ–Ω—Ç—Ä: (${objectCenterX}, ${objectCenterY}), pivot: (${objectPivotX}, ${objectPivotY})`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É—á–µ–∫
            this.workingBounds = {
                x: localBounds.x,
                y: localBounds.y,
                width: localBounds.width,
                height: localBounds.height
            };
        } else {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –ø–æ–≤–µ—Ä–Ω—É—Ç
            this.container.rotation = 0;
            const pivotX = this.targetObject.pivot ? this.targetObject.pivot.x : 0;
            const pivotY = this.targetObject.pivot ? this.targetObject.pivot.y : 0;
            // –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–º–∫–∞ –≥—Ä—É–ø–ø—ã ‚Äî –µ—ë x/y —É–∂–µ –∑–∞–¥–∞–Ω—ã –∫–∞–∫ –ª–µ–≤—ã–π-–≤–µ—Ä—Ö –≤ worldLayer
            if (this.targetObject.name === 'group-bounds') {
                this.container.x = this.targetObject.x;
                this.container.y = this.targetObject.y;
                this.container.pivot.set(0, 0);
                this.workingBounds = {
                    x: 0,
                    y: 0,
                    width: localBounds.width,
                    height: localBounds.height
                };
            } else {
                // –û–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç: –ª–µ–≤—ã–π-–≤–µ—Ä—Ö = —Ü–µ–Ω—Ç—Ä - pivot (–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö worldLayer)
                const topLeftX = this.targetObject.x - pivotX;
                const topLeftY = this.targetObject.y - pivotY;
                this.container.x = topLeftX;
                this.container.y = topLeftY;
                this.container.pivot.set(0, 0);
                // –†–∞–±–æ—á–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ—Ç (0,0) –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü
                this.workingBounds = {
                    x: 0,
                    y: 0,
                    width: localBounds.width,
                    height: localBounds.height
                };
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–º–∫—É –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.createSelectionBorder(this.workingBounds);
        
        // –°–æ–∑–¥–∞–µ–º —Ä—É—á–∫–∏ –ø–æ —É–≥–ª–∞–º –∏ —Å—Ç–æ—Ä–æ–Ω–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ workingBounds (–ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
        const bounds = this.workingBounds;
        const x0 = bounds.x;
        const y0 = bounds.y;
        const x1 = bounds.x + bounds.width;
        const y1 = bounds.y + bounds.height;
        const cx = bounds.x + bounds.width / 2;
        const cy = bounds.y + bounds.height / 2;
        const handlePositions = [
            { type: 'nw', x: x0, y: y0, cursor: 'nw-resize' },
            { type: 'n',  x: cx, y: y0, cursor: 'n-resize' },
            { type: 'ne', x: x1, y: y0, cursor: 'ne-resize' },
            { type: 'e',  x: x1, y: cy, cursor: 'e-resize' },
            { type: 'se', x: x1, y: y1, cursor: 'se-resize' },
            { type: 's',  x: cx, y: y1, cursor: 's-resize' },
            { type: 'sw', x: x0, y: y1, cursor: 'sw-resize' },
            { type: 'w',  x: x0, y: cy, cursor: 'w-resize' }
        ];
        
        handlePositions.forEach(pos => {
            const handle = this.createHandle(pos.type, pos.x, pos.y, pos.cursor);
            this.handles.push(handle);
            this.container.addChild(handle);
        });
        
        // –°–æ–∑–¥–∞–µ–º —Ä—É—á–∫—É –≤—Ä–∞—â–µ–Ω–∏—è –≤–æ–∑–ª–µ –ª–µ–≤–æ–≥–æ –ù–ò–ñ–ù–ï–ì–û —É–≥–ª–∞ —Ä–∞–º–∫–∏
        const rotateHandle = this.createRotateHandle(
            bounds.x, 
            bounds.y + bounds.height + this.rotateHandleOffset
        );
        this.handles.push(rotateHandle);
        this.container.addChild(rotateHandle);
        
        console.log(`üîÑ –†—É—á–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: x=${rotateHandle.x}, y=${rotateHandle.y}, visible=${rotateHandle.visible}, eventMode=${rotateHandle.eventMode}`);
        console.log(`üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä—É—á–µ–∫: zIndex=${this.container.zIndex}, visible=${this.container.visible}, children=${this.container.children.length}`);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —Ä–∞–º–∫—É –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    createSelectionBorder(bounds) {
        const border = new PIXI.Graphics();
        border.lineStyle(this.borderWidth, this.borderColor, 0.8);
        border.drawRect(0, 0, bounds.width, bounds.height);
        border.x = bounds.x;
        border.y = bounds.y;
        border.name = 'selection-border';
        
        this.container.addChild(border);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —Ä—É—á–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    createHandle(type, x, y, cursor) {
        const handle = new PIXI.Graphics();
        
        // –†–∏—Å—É–µ–º –∫—Ä—É–≥–ª—É—é —Ä—É—á–∫—É - —Å–∏–Ω–∏–π –∫—Ä—É–≥ —Å –±–µ–ª–æ–π —Å–µ—Ä–µ–¥–∏–Ω–æ–π
        this.drawCircularHandle(handle, this.handleColor);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º
        handle.x = x;
        handle.y = y;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        handle.eventMode = 'static';
        handle.cursor = cursor;
        handle.name = `resize-handle-${type}`;
        handle.zIndex = 2000; // –ï—â–µ –≤—ã—à–µ —á–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ä—É—á–∫–∏
        handle.handleType = type;
        handle.targetObjectId = this.targetObjectId;
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        handle.on('pointerover', () => {
            handle.clear();
            this.drawCircularHandle(handle, this.handleHoverColor);
        });
        
        handle.on('pointerout', () => {
            handle.clear();
            this.drawCircularHandle(handle, this.handleColor);
        });
        
        return handle;
    }
    
    /**
     * –†–∏—Å—É–µ—Ç –∫—Ä—É–≥–ª—É—é —Ä—É—á–∫—É —Å —Å–∏–Ω–µ–π –æ–±–≤–æ–¥–∫–æ–π –∏ –±–µ–ª–æ–π —Å–µ—Ä–µ–¥–∏–Ω–æ–π
     */
    drawCircularHandle(graphics, outerColor) {
        const radius = this.handleSize / 2;
        const innerRadius = radius - 2; // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å –º–µ–Ω—å—à–µ –Ω–∞ 2 –ø–∏–∫—Å–µ–ª—è
        
        // –†–∏—Å—É–µ–º –≤–Ω–µ—à–Ω–∏–π —Å–∏–Ω–∏–π –∫—Ä—É–≥
        graphics.beginFill(outerColor);
        graphics.drawCircle(0, 0, radius);
        graphics.endFill();
        
        // –†–∏—Å—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–µ–ª—ã–π –∫—Ä—É–≥
        graphics.beginFill(0xFFFFFF);
        graphics.drawCircle(0, 0, innerRadius);
        graphics.endFill();
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —Ä—É—á–∫—É –≤—Ä–∞—â–µ–Ω–∏—è —Å –∏–∫–æ–Ω–∫–æ–π –∫—Ä—É–≥–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏
     */
    createRotateHandle(x, y) {
        const container = new PIXI.Container();
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—ã–π —Ñ–æ–Ω
        const background = new PIXI.Graphics();
        background.beginFill(this.rotateHandleColor);
        background.lineStyle(1, 0xFFFFFF, 1);
        background.drawCircle(0, 0, this.rotateHandleSize / 2);
        background.endFill();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–∫–æ–Ω–∫—É (Unicode —Å–∏–º–≤–æ–ª)
        const icon = new PIXI.Text('‚Üª', {
            fontFamily: 'Arial, sans-serif',
            fontSize: this.rotateHandleSize - 4,
            fill: 0xFFFFFF,
            align: 'center'
        });
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É
        icon.anchor.set(0.5, 0.5);
        icon.x = 0;
        icon.y = 0;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.addChild(background);
        container.addChild(icon);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º
        container.x = x;
        container.y = y;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        container.eventMode = 'static';
        container.cursor = 'grab';
        container.name = 'rotate-handle';
        container.zIndex = 2000;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ä—É—á–∫–∏
        container.handleType = 'rotate';
        container.targetObjectId = this.targetObjectId;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
        container._background = background;
        container._icon = icon;
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        container.on('pointerover', () => {
            background.clear();
            background.beginFill(this.rotateHandleHoverColor);
            background.lineStyle(1, 0xFFFFFF, 1);
            background.drawCircle(0, 0, this.rotateHandleSize / 2);
            background.endFill();
            container.cursor = 'grab';
        });
        
        container.on('pointerout', () => {
            background.clear();
            background.beginFill(this.rotateHandleColor);
            background.lineStyle(1, 0xFFFFFF, 1);
            background.drawCircle(0, 0, this.rotateHandleSize / 2);
            background.endFill();
        });
        
        return container;
    }
    

    
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä—É—á–∫–∏
     */
    clearHandles() {
        this.container.removeChildren();
        this.handles = [];
        this.targetBounds = null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç —Ä—É—á–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –≤—Ä–∞—â–µ–Ω–∏—è
     */
    isResizeHandle(pixiObject) {
        return pixiObject && pixiObject.name && 
               (pixiObject.name.startsWith('resize-handle-') || pixiObject.name === 'rotate-handle');
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É—á–∫–µ
     */
    getHandleInfo(pixiObject) {
        if (!this.isResizeHandle(pixiObject)) {
            return null;
        }
        
        return {
            type: pixiObject.handleType,
            targetObjectId: pixiObject.targetObjectId,
            handle: pixiObject
        };
    }
    
    /**
     * –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç—å —Ä—É—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è)
     */
    temporaryHide() {
        console.log(`üôà temporaryHide –≤—ã–∑–≤–∞–Ω`);
        this.container.visible = false;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä—É—á–∫–∏ —Å–Ω–æ–≤–∞
     */
    temporaryShow() {
        console.log(`üëÅÔ∏è temporaryShow –≤—ã–∑–≤–∞–Ω, targetObject: ${!!this.targetObject}`);
        if (this.targetObject) {
            this.container.visible = true;
        }
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä—É—á–µ–∫
     */
    destroy() {
        this.hideHandles();
        if (this.container.parent) {
            this.container.parent.removeChild(this.container);
        }
        this.container.destroy();
    }
}
