/**
 * –ó–∞–≥—Ä—É–∑—á–∏–∫ SVG –∏–∫–æ–Ω–æ–∫ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
 * –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ –∫–∞–∫ IconLoader –¥–ª—è –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
 */
export class TopbarIconLoader {
    constructor() {
        this.cache = new Map();
        this.icons = {};
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
     */
    async init() {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ SVG —Ñ–∞–π–ª—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏, –∫–∞–∫ –≤ IconLoader
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –≤—Å–µ—Ö –∏–∫–æ–Ω–æ–∫ topbar
            const iconModules = await Promise.all([
                import('../assets/icons/grid-line.svg?raw'),
                import('../assets/icons/grid-dot.svg?raw'),
                import('../assets/icons/grid-cross.svg?raw'),
                import('../assets/icons/grid-off.svg?raw'),
                import('../assets/icons/paint.svg?raw')
            ]);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∫–æ–Ω–∫–∏ –≤ –∫—ç—à
            const iconNames = ['grid-line', 'grid-dot', 'grid-cross', 'grid-off', 'paint'];

            iconNames.forEach((name, index) => {
                if (iconModules[index] && iconModules[index].default) {
                    this.icons[name] = iconModules[index].default;
                    this.cache.set(name, iconModules[index].default);
                } else {
                    console.warn(`‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ ${name} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
                    this.icons[name] = this.getFallbackIcon(name);
                }
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–æ–∫ topbar:', error);
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ SVG –∏–∫–æ–Ω–∫–∏...');
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ SVG –∏–∫–æ–Ω–∫–∏
            this.loadBuiltInIcons();
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ SVG –∏–∫–æ–Ω–∫–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    loadBuiltInIcons() {
        const builtInIcons = {
            'grid-line': `<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M2 2H16V4H2V2Z" fill="currentColor"/>
                <path d="M2 7H16V9H2V7Z" fill="currentColor"/>
                <path d="M2 12H16V14H2V12Z" fill="currentColor"/>
                <path d="M2 2V16H4V2H2Z" fill="currentColor"/>
                <path d="M7 2V16H9V2H7Z" fill="currentColor"/>
                <path d="M12 2V16H14V2H12Z" fill="currentColor"/>
            </svg>`,
            'grid-dot': `<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="4" cy="4" r="1.5" fill="currentColor"/>
                <circle cx="9" cy="4" r="1.5" fill="currentColor"/>
                <circle cx="14" cy="4" r="1.5" fill="currentColor"/>
                <circle cx="4" cy="9" r="1.5" fill="currentColor"/>
                <circle cx="9" cy="9" r="1.5" fill="currentColor"/>
                <circle cx="14" cy="9" r="1.5" fill="currentColor"/>
                <circle cx="4" cy="14" r="1.5" fill="currentColor"/>
                <circle cx="9" cy="14" r="1.5" fill="currentColor"/>
                <circle cx="14" cy="14" r="1.5" fill="currentColor"/>
            </svg>`,
            'grid-cross': `<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M3 3L6 6M6 3L3 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                <path d="M9 3L12 6M12 3L9 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                <path d="M3 9L6 12M6 9L3 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                <path d="M9 9L12 12M12 9L9 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                <path d="M15 3L18 6M18 3L15 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                <path d="M15 9L18 12M18 9L15 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                <path d="M3 15L6 18M6 15L3 18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                <path d="M9 15L12 18M12 15L9 18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                <path d="M15 15L18 18M18 15L15 18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
            </svg>`,
            'grid-off': `<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M2 2H16V4H2V2Z" fill="currentColor" opacity="0.3"/>
                <path d="M2 7H16V9H2V7Z" fill="currentColor" opacity="0.3"/>
                <path d="M2 12H16V14H2V12Z" fill="currentColor" opacity="0.3"/>
                <path d="M2 2V16H4V2H2Z" fill="currentColor" opacity="0.3"/>
                <path d="M7 2V16H9V2H7Z" fill="currentColor" opacity="0.3"/>
                <path d="M12 2V16H14V2H12Z" fill="currentColor" opacity="0.3"/>
                <path d="M1 17L17 1" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>`,
            'paint': `<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M4 3H10L13 6V13A2 2 0 0 1 11 15H6A2 2 0 0 1 4 13V3Z" stroke="currentColor" stroke-width="1.5" fill="none"/>
                <path d="M10 3V6H13" stroke="currentColor" stroke-width="1.5"/>
                <path d="M14 10S15.5 11.5 15.5 13A1.5 1.5 0 0 1 13 13C13 11.5 14 10 14 10Z" fill="currentColor" stroke="currentColor" stroke-width="0.5"/>
            </svg>`
        };

        Object.keys(builtInIcons).forEach(name => {
            this.icons[name] = builtInIcons[name];
            this.cache.set(name, builtInIcons[name]);
        });

        console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ SVG –∏–∫–æ–Ω–∫–∏ topbar');
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç SVG –∏–∫–æ–Ω–∫—É –ø–æ –∏–º–µ–Ω–∏
     * @param {string} iconName - –∏–º—è –∏–∫–æ–Ω–∫–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     * @returns {Promise<string>} SVG —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
     */
    async loadIcon(iconName) {
        if (this.cache.has(iconName)) {
            console.log(`üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫—É ${iconName} –∏–∑ –∫—ç—à–∞`);
            return this.cache.get(iconName);
        }

        // –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏
        if (this.icons[iconName]) {
            console.log(`üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫—É ${iconName} –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∞`);
            return this.icons[iconName];
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
        console.warn(`‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ ${iconName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
        return this.getFallbackIcon(iconName);
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è topbar
     * @returns {Promise<Object>} –æ–±—ä–µ–∫—Ç —Å –∏–∫–æ–Ω–∫–∞–º–∏
     */
    async loadAllIcons() {
        // –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (Object.keys(this.icons).length === 0) {
            await this.init();
        }

        return this.icons;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
     * @param {string} iconName - –∏–º—è –∏–∫–æ–Ω–∫–∏
     * @returns {string} fallback SVG
     */
    getFallbackIcon(iconName) {
        // –ü—Ä–æ—Å—Ç—ã–µ fallback –∏–∫–æ–Ω–∫–∏ –≤ –≤–∏–¥–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä
        const fallbacks = {
            'grid-line': '<svg width="18" height="18" viewBox="0 0 18 18"><path d="M2 2H16V4H2V2Z" fill="currentColor"/><path d="M2 7H16V9H2V7Z" fill="currentColor"/><path d="M2 12H16V14H2V12Z" fill="currentColor"/><path d="M2 2V16H4V2H2Z" fill="currentColor"/><path d="M7 2V16H9V2H7Z" fill="currentColor"/><path d="M12 2V16H14V2H12Z" fill="currentColor"/></svg>',
            'grid-dot': '<svg width="18" height="18" viewBox="0 0 18 18"><circle cx="4" cy="4" r="1.5" fill="currentColor"/><circle cx="9" cy="4" r="1.5" fill="currentColor"/><circle cx="14" cy="4" r="1.5" fill="currentColor"/><circle cx="4" cy="9" r="1.5" fill="currentColor"/><circle cx="9" cy="9" r="1.5" fill="currentColor"/><circle cx="14" cy="9" r="1.5" fill="currentColor"/><circle cx="4" cy="14" r="1.5" fill="currentColor"/><circle cx="9" cy="14" r="1.5" fill="currentColor"/><circle cx="14" cy="14" r="1.5" fill="currentColor"/></svg>',
            'grid-cross': '<svg width="18" height="18" viewBox="0 0 18 18"><path d="M3 3L6 6M6 3L3 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/><path d="M9 3L12 6M12 3L9 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/><path d="M3 9L6 12M6 9L3 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/><path d="M9 9L12 12M12 9L9 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/></svg>',
            'grid-off': '<svg width="18" height="18" viewBox="0 0 18 18"><path d="M2 2H16V4H2V2Z" fill="currentColor" opacity="0.3"/><path d="M2 7H16V9H2V7Z" fill="currentColor" opacity="0.3"/><path d="M2 12H16V14H2V12Z" fill="currentColor" opacity="0.3"/><path d="M2 2V16H4V2H2Z" fill="currentColor" opacity="0.3"/><path d="M7 2V16H9V2H7Z" fill="currentColor" opacity="0.3"/><path d="M12 2V16H14V2H12Z" fill="currentColor" opacity="0.3"/><path d="M1 17L17 1" stroke="currentColor" stroke-width="2" stroke-linecap="round"/></svg>',
            'paint': '<svg width="18" height="18" viewBox="0 0 18 18"><path d="M4 3H10L13 6V13A2 2 0 0 1 11 15H6A2 2 0 0 1 4 13V3Z" stroke="currentColor" stroke-width="1.5" fill="none"/><path d="M10 3V6H13" stroke="currentColor" stroke-width="1.5"/><path d="M14 10S15.5 11.5 15.5 13A1.5 1.5 0 0 1 13 13C13 11.5 14 10 14 10Z" fill="currentColor" stroke="currentColor" stroke-width="0.5"/></svg>'
        };

        return fallbacks[iconName] || fallbacks['grid-line'];
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à –∏–∫–æ–Ω–æ–∫
     */
    clearCache() {
        this.cache.clear();
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∫–æ–Ω–∫—É (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à)
     * @param {string} iconName - –∏–º—è –∏–∫–æ–Ω–∫–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     * @returns {Promise<string>} SVG —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
     */
    async reloadIcon(iconName) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
        console.log(`üóëÔ∏è –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –∏–∫–æ–Ω–∫–∏ ${iconName}`);
        this.cache.delete(iconName);
        
        try {
            // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É
            const iconModule = await import(`../assets/icons/${iconName}.svg?raw`);
            if (iconModule && iconModule.default) {
                const svgContent = iconModule.default;
                console.log(`‚úÖ –ò–∫–æ–Ω–∫–∞ ${iconName} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                this.icons[iconName] = svgContent;
                this.cache.set(iconName, svgContent);
                return svgContent;
            } else {
                throw new Error(`Failed to reload icon: ${iconName}`);
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏ ${iconName}:`, error);
            return this.getFallbackIcon(iconName);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø–æ –∏–º–µ–Ω–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    getIcon(name) {
        return this.icons[name] || this.getFallbackIcon(name);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const topbarIconLoader = new TopbarIconLoader();

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (typeof window !== 'undefined') {
    window.topbarIconLoader = topbarIconLoader;
}
