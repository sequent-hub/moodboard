/**
 * –ó–∞–≥—Ä—É–∑—á–∏–∫ —ç–º–æ–¥–∂–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ bundler
 * –ó–∞–º–µ–Ω—è–µ—Ç import.meta.glob –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É
 */
export class EmojiLoaderNoBundler {
    constructor() {
        this.emojiCache = new Map();
        this.basePath = '';
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–≤—ã–º –ø—É—Ç–µ–º
     * @param {string} basePath - –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —ç–º–æ–¥–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '/node_modules/moodboard-futurello/')
     */
    init(basePath = '') {
        this.basePath = basePath;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∂–∏ –∏–∑ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
     * @returns {Promise<Map>} –∫–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —ç–º–æ–¥–∂–∏
     */
    async loadEmojis() {
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–¥–µ–∫—Å —ç–º–æ–¥–∂–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
            const response = await fetch(`${this.basePath}src/assets/emodji/index.json`);
            if (response.ok) {
                const emojiIndex = await response.json();
                return this.processEmojiIndex(emojiIndex);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–¥–µ–∫—Å —ç–º–æ–¥–∂–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        }

        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —ç–º–æ–¥–∂–∏
        return this.getFallbackEmojis();
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —ç–º–æ–¥–∂–∏
     * @param {Object} emojiIndex - –∏–Ω–¥–µ–∫—Å —ç–º–æ–¥–∂–∏ –∏–∑ JSON
     */
    processEmojiIndex(emojiIndex) {
        const groups = new Map();
        
        Object.entries(emojiIndex).forEach(([category, emojis]) => {
            const emojiList = emojis.map(emoji => ({
                path: `${this.basePath}src/assets/emodji/${category}/${emoji.file}`,
                url: `${this.basePath}src/assets/emodji/${category}/${emoji.file}`
            }));
            groups.set(category, emojiList);
        });

        return groups;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∂–∏
     */
    getFallbackEmojis() {
        const groups = new Map();

        // –°—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —ç–º–æ–¥–∂–∏
        const fallbackEmojis = {
            '–°–º–∞–π–ª–∏–∫–∏': [
                '1f600.png', '1f601.png', '1f602.png', '1f603.png', '1f604.png',
                '1f605.png', '1f606.png', '1f607.png', '1f608.png', '1f609.png',
                '1f60a.png', '1f60b.png', '1f60c.png', '1f60d.png', '1f60e.png',
                '1f60f.png', '1f610.png', '1f611.png', '1f612.png', '1f613.png',
                '1f614.png', '1f615.png', '1f616.png', '1f617.png', '1f618.png',
                '1f619.png', '1f61a.png', '1f61b.png', '1f61c.png', '1f61d.png',
                '1f61e.png', '1f61f.png', '1f620.png', '1f621.png', '1f622.png'
            ],
            '–ñ–µ—Å—Ç—ã': [
                '1f44d.png', '1f44e.png', '1f44f.png', '1f450.png', '1f451.png',
                '1f590.png', '270c.png', '1f91d.png', '1f64f.png', '1f44c.png'
            ],
            '–†–∞–∑–Ω–æ–µ': [
                '2764.png', '1f494.png', '1f49c.png', '1f49a.png', '1f495.png',
                '1f496.png', '1f497.png', '1f498.png', '1f499.png', '1f49b.png'
            ]
        };

        Object.entries(fallbackEmojis).forEach(([category, emojis]) => {
            const emojiList = emojis.map(file => ({
                path: `${this.basePath}src/assets/emodji/${category}/${file}`,
                url: `${this.basePath}src/assets/emodji/${category}/${file}`
            }));
            groups.set(category, emojiList);
        });

        return groups;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å–Ω—ã–π JSON —Ñ–∞–π–ª –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–º–æ–¥–∂–∏
     * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –≤ dev —Ä–µ–∂–∏–º–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–∞
     */
    async generateEmojiIndex() {
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ dev —Å—Ä–µ–¥–µ —Å bundler
        if (typeof import.meta !== 'undefined' && import.meta.glob) {
            const modules = import.meta.glob('../assets/emodji/**/*.{png,PNG}', { eager: true, as: 'url' });
            const index = {};
            
            Object.keys(modules).forEach(path => {
                const match = path.match(/\/emodji\/([^\/]+)\/([^\/]+)$/);
                if (match) {
                    const [, category, file] = match;
                    if (!index[category]) index[category] = [];
                    index[category].push({ file });
                }
            });

            console.log('üìÅ –ò–Ω–¥–µ–∫—Å —ç–º–æ–¥–∂–∏:', JSON.stringify(index, null, 2));
            return index;
        }
        
        return null;
    }
}
