import { Events } from '../core/events/Events.js';

/**
 * –ü–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤ —Ñ—Ä–µ–π–º–∞
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞–¥ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —Ñ—Ä–µ–π–º–æ–º
 */
export class FramePropertiesPanel {
    constructor(eventBus, container, core = null) {
        this.eventBus = eventBus;
        this.container = container;
        this.core = core;
        this.panel = null;
        this.currentId = null;
        
        this._attachEvents();
        this._createPanel();
    }

    _attachEvents() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.eventBus.on(Events.Tool.SelectionAdd, () => this.updateFromSelection());
        this.eventBus.on(Events.Tool.SelectionRemove, () => this.updateFromSelection());
        this.eventBus.on(Events.Tool.SelectionClear, () => this.hide());

        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
        this.eventBus.on(Events.Object.Deleted, (objectId) => {
            if (this.currentId && objectId === this.currentId) this.hide();
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (–∫–∞–∫ –≤ TextPropertiesPanel)
        this.eventBus.on(Events.Tool.DragStart, () => this.hide());
        this.eventBus.on(Events.Tool.DragUpdate, () => this.reposition());
        this.eventBus.on(Events.Tool.DragEnd, () => this.updateFromSelection());
        this.eventBus.on(Events.Tool.GroupDragUpdate, () => this.reposition());
        this.eventBus.on(Events.Tool.GroupDragStart, () => this.hide());
        this.eventBus.on(Events.Tool.GroupDragEnd, () => this.updateFromSelection());
        this.eventBus.on(Events.Tool.ResizeUpdate, () => this.reposition());
        this.eventBus.on(Events.Tool.RotateUpdate, () => this.reposition());

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –∑—É–º–µ/–ø–∞–Ω–µ
        this.eventBus.on(Events.UI.ZoomPercent, () => {
            if (this.currentId) this.reposition();
        });

        this.eventBus.on(Events.Tool.PanUpdate, () => {
            if (this.currentId) this.reposition();
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        this.eventBus.on(Events.Tool.Activated, ({ tool }) => {
            if (tool !== 'select') {
                this.hide();
            }
        });
    }

    updateFromSelection() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ñ—Ä–µ–π–º–∞
        const ids = this.core?.selectTool ? Array.from(this.core.selectTool.selectedObjects || []) : [];
        
        if (!ids || ids.length !== 1) { 
            this.hide(); 
            return; 
        }
        
        const id = ids[0];
        
        // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –µ—Å–ª–∏ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if (this.currentId === id && this.panel && this.panel.style.display !== 'none') {
            return;
        }
        
        const pixi = this.core?.pixi?.objects?.get ? this.core.pixi.objects.get(id) : null;
        const isFrame = !!(pixi && pixi._mb && pixi._mb.type === 'frame');
        
        console.log('üñºÔ∏è FramePropertiesPanel: updateFromSelection - id=', id, 'isFrame=', isFrame);
        
        if (isFrame) {
            this.showFor(id);
        } else {
            this.hide();
        }
    }

    showFor(objectId) {
        console.log('üñºÔ∏è FramePropertiesPanel: Showing panel for objectId:', objectId);
        this.currentId = objectId;
        if (this.panel) {
            this.panel.style.display = 'flex';
            this.reposition();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞
        this._updateControlsFromObject();
    }

    hide() {
        this.currentId = null;
        if (this.panel) {
            this.panel.style.display = 'none';
        }
    }

    _createPanel() {
        const panel = document.createElement('div');
        panel.className = 'frame-properties-panel';
        Object.assign(panel.style, {
            position: 'absolute',
            display: 'none',
            alignItems: 'center',
            gap: '8px',
            padding: '8px 12px',
            backgroundColor: 'white',
            border: '1px solid #e0e0e0',
            borderRadius: '8px',
            boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)',
            fontSize: '14px',
            fontFamily: 'Arial, sans-serif',
            minWidth: '280px',
            height: '60px',
            zIndex: '10000'
        });

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –¥–ª—è —Ñ—Ä–µ–π–º–∞
        this._createFrameControls(panel);

        // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ DevTools
        panel.id = 'frame-properties-panel';

        this.panel = panel;
        this.container.appendChild(panel);
    }

    _updateControlsFromObject() {
        // –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø–∞–Ω–µ–ª—å –ø—É—Å—Ç–∞—è
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ —Å –æ–±—ä–µ–∫—Ç–æ–º
    }

    reposition() {
        if (!this.panel || !this.currentId || this.panel.style.display === 'none') {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à –æ–±—ä–µ–∫—Ç –≤—Å–µ –µ—â–µ –≤—ã–¥–µ–ª–µ–Ω
        const ids = this.core?.selectTool ? Array.from(this.core.selectTool.selectedObjects || []) : [];
        if (!ids.includes(this.currentId)) {
            this.hide();
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–∞
        const posData = { objectId: this.currentId, position: null };
        this.eventBus.emit(Events.Tool.GetObjectPosition, posData);
        
        const sizeData = { objectId: this.currentId, size: null };
        this.eventBus.emit(Events.Tool.GetObjectSize, sizeData);

        if (!posData.position || !sizeData.size) {
            return;
        }

        const { x, y } = posData.position;
        const { width, height } = sizeData.size;

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–¥ —Ñ—Ä–µ–π–º–æ–º, –ø–æ —Ü–µ–Ω—Ç—Ä—É
        const panelRect = this.panel.getBoundingClientRect();
        const panelW = Math.max(1, panelRect.width || 280);
        const panelH = Math.max(1, panelRect.height || 60);
        let panelX = x + (width / 2) - (panelW / 2);
        let panelY = y - panelH - 8; // –æ—Ç—Å—Ç—É–ø 8px –Ω–∞–¥ —Ñ—Ä–µ–π–º–æ–º

        // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å —É—Ö–æ–¥–∏—Ç –∑–∞ –≤–µ—Ä—Ö, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∏–∂–µ —Ñ—Ä–µ–π–º–∞
        if (panelY < 0) {
            panelY = y + height + 8;
        }

        console.log('üñºÔ∏è FramePropertiesPanel: Positioning above frame:', {
            frameX: x, frameY: y, frameWidth: width, frameHeight: height,
            panelX, panelY
        });

        this.panel.style.left = `${Math.round(panelX)}px`;
        this.panel.style.top = `${Math.round(panelY)}px`;
        
        console.log('üñºÔ∏è FramePropertiesPanel: Panel CSS applied:', {
            left: this.panel.style.left,
            top: this.panel.style.top
        });
    }

    _createFrameControls(panel) {
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
        const titleContainer = document.createElement('div');
        Object.assign(titleContainer.style, {
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            padding: '8px 12px'
        });

        // –õ–µ–π–±–ª
        const titleLabel = document.createElement('span');
        titleLabel.textContent = '–ù–∞–∑–≤–∞–Ω–∏–µ:';
        titleLabel.style.fontSize = '12px';
        titleLabel.style.color = '#666';
        titleLabel.style.minWidth = '60px';

        // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
        const titleInput = document.createElement('input');
        titleInput.type = 'text';
        titleInput.placeholder = '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞';
        Object.assign(titleInput.style, {
            flex: '1',
            padding: '4px 8px',
            border: '1px solid #ddd',
            borderRadius: '4px',
            fontSize: '12px',
            outline: 'none'
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        titleInput.addEventListener('input', () => {
            if (this.currentId) {
                this._changeFrameTitle(titleInput.value);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        titleInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                titleInput.blur();
            }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.titleInput = titleInput;

        titleContainer.appendChild(titleLabel);
        titleContainer.appendChild(titleInput);

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
        const colorContainer = document.createElement('div');
        Object.assign(colorContainer.style, {
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            padding: '8px 12px'
        });

        // –õ–µ–π–±–ª –¥–ª—è —Ü–≤–µ—Ç–∞
        const colorLabel = document.createElement('span');
        colorLabel.textContent = '–§–æ–Ω:';
        colorLabel.style.fontSize = '12px';
        colorLabel.style.color = '#666';
        colorLabel.style.minWidth = '60px';

        // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        const colorButton = document.createElement('button');
        Object.assign(colorButton.style, {
            width: '32px',
            height: '24px',
            border: '1px solid #ccc',
            borderRadius: '4px',
            cursor: 'pointer',
            backgroundColor: '#ffffff',
            position: 'relative'
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Ü–≤–µ—Ç–∞
        colorButton.addEventListener('click', (e) => {
            e.stopPropagation();
            this._toggleColorPalette(colorButton);
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
        this.colorButton = colorButton;

        colorContainer.appendChild(colorLabel);
        colorContainer.appendChild(colorButton);

        panel.appendChild(titleContainer);
        panel.appendChild(colorContainer);

        // –°–æ–∑–¥–∞–µ–º –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤ (—Å–∫—Ä—ã—Ç—É—é)
        this._createColorPalette(panel);
    }

    _changeFrameTitle(newTitle) {
        if (!this.currentId) return;

        console.log('üñºÔ∏è FramePropertiesPanel: Changing frame title to:', newTitle);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
        this.eventBus.emit(Events.Object.StateChanged, {
            objectId: this.currentId,
            updates: { properties: { title: newTitle } }
        });
    }

    _createColorPalette(panel) {
        // –ü–∞–ª–∏—Ç—Ä–∞ –∏–∑ 6 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        const colors = [
            { name: '–ë–µ–ª—ã–π', hex: '#FFFFFF', pixi: 0xFFFFFF },
            { name: '–ì–æ–ª—É–±–æ–π', hex: '#E3F2FD', pixi: 0xE3F2FD },
            { name: '–ó–µ–ª–µ–Ω—ã–π', hex: '#E8F5E8', pixi: 0xE8F5E8 },
            { name: '–ñ–µ–ª—Ç—ã–π', hex: '#FFF8E1', pixi: 0xFFF8E1 },
            { name: '–†–æ–∑–æ–≤—ã–π', hex: '#FCE4EC', pixi: 0xFCE4EC },
            { name: '–°–µ—Ä—ã–π', hex: '#F5F5F5', pixi: 0xF5F5F5 }
        ];

        const palette = document.createElement('div');
        palette.className = 'color-palette';
        Object.assign(palette.style, {
            position: 'absolute',
            top: '100%',
            left: '0',
            display: 'none',
            flexWrap: 'wrap',
            gap: '4px',
            padding: '8px',
            backgroundColor: 'white',
            border: '1px solid #e0e0e0',
            borderRadius: '8px',
            boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)',
            zIndex: '10001',
            width: '120px'
        });

        colors.forEach(color => {
            const colorSwatch = document.createElement('div');
            Object.assign(colorSwatch.style, {
                width: '24px',
                height: '24px',
                backgroundColor: color.hex,
                border: '1px solid #ccc',
                borderRadius: '4px',
                cursor: 'pointer',
                transition: 'transform 0.1s'
            });

            colorSwatch.title = color.name;

            colorSwatch.addEventListener('click', () => {
                this._selectColor(color);
                this._hideColorPalette();
            });

            colorSwatch.addEventListener('mouseenter', () => {
                colorSwatch.style.transform = 'scale(1.1)';
            });

            colorSwatch.addEventListener('mouseleave', () => {
                colorSwatch.style.transform = 'scale(1)';
            });

            palette.appendChild(colorSwatch);
        });

        this.colorPalette = palette;
        panel.appendChild(palette);
    }

    _toggleColorPalette(button) {
        if (!this.colorPalette) return;

        const isVisible = this.colorPalette.style.display !== 'none';
        
        if (isVisible) {
            this._hideColorPalette();
        } else {
            this._showColorPalette(button);
        }
    }

    _showColorPalette(button) {
        if (!this.colorPalette) return;

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–∞–ª–∏—Ç—Ä—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∏
        const buttonRect = button.getBoundingClientRect();
        const panelRect = this.panel.getBoundingClientRect();
        
        this.colorPalette.style.left = `${buttonRect.left - panelRect.left}px`;
        this.colorPalette.style.top = `${buttonRect.bottom - panelRect.top + 4}px`;
        this.colorPalette.style.display = 'flex';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–ª–∏—Ç—Ä—ã
        setTimeout(() => {
            document.addEventListener('click', this._documentClickHandler.bind(this));
        }, 0);
    }

    _hideColorPalette() {
        if (this.colorPalette) {
            this.colorPalette.style.display = 'none';
        }
        document.removeEventListener('click', this._documentClickHandler.bind(this));
    }

    _documentClickHandler(e) {
        if (this.colorPalette && !this.colorPalette.contains(e.target) && 
            this.colorButton && !this.colorButton.contains(e.target)) {
            this._hideColorPalette();
        }
    }

    _selectColor(color) {
        if (!this.currentId) return;

        console.log('üñºÔ∏è FramePropertiesPanel: Selecting color:', color);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        this.colorButton.style.backgroundColor = color.hex;
        this.colorButton.title = `–¶–≤–µ—Ç —Ñ–æ–Ω–∞: ${color.name}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
        this.eventBus.emit(Events.Object.StateChanged, {
            objectId: this.currentId,
            updates: { backgroundColor: color.pixi }
        });
    }

    _updateControlsFromObject() {
        if (!this.currentId) return;

        const objectData = this.core.getObjectData(this.currentId);
        if (objectData) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            if (this.titleInput && objectData.properties && objectData.properties.title !== undefined) {
                this.titleInput.value = objectData.properties.title || '';
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º backgroundColor –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ –∏–ª–∏ –≤ properties
            const backgroundColor = objectData.backgroundColor || 
                                  (objectData.properties && objectData.properties.backgroundColor) || 
                                  0xFFFFFF; // –±–µ–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if (this.colorButton) {
                this._updateColorButton(backgroundColor);
            }
        }
    }

    _updateColorButton(pixiColor) {
        if (!this.colorButton) return;

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIXI —Ü–≤–µ—Ç –≤ hex —Å—Ç—Ä–æ–∫—É
        const hexColor = `#${pixiColor.toString(16).padStart(6, '0').toUpperCase()}`;
        this.colorButton.style.backgroundColor = hexColor;
        this.colorButton.title = `–¶–≤–µ—Ç —Ñ–æ–Ω–∞: ${hexColor}`;
    }

    destroy() {
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
        document.removeEventListener('click', this._documentClickHandler.bind(this));
        
        if (this.panel && this.panel.parentNode) {
            this.panel.parentNode.removeChild(this.panel);
        }
        this.panel = null;
        this.colorPalette = null;
        this.colorButton = null;
        this.titleInput = null;
        this.currentId = null;
    }
}
