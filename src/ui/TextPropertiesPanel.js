import { Events } from '../core/events/Events.js';

/**
 * TextPropertiesPanel ‚Äî –≤—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
export class TextPropertiesPanel {
    constructor(container, eventBus, core) {
        this.container = container;
        this.eventBus = eventBus;
        this.core = core;
        this.layer = null;
        this.panel = null;
        this.currentId = null;
        this.isTextEditing = false; // –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        
        this._onDocMouseDown = this._onDocMouseDown.bind(this);
    }

    attach() {
        this.layer = document.createElement('div');
        this.layer.className = 'text-properties-layer';
        Object.assign(this.layer.style, {
            position: 'absolute', 
            inset: '0', 
            pointerEvents: 'none', 
            zIndex: 20 // –ú–µ–Ω—å—à–µ —á–µ–º —É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –Ω–æ –≤—ã—à–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        });
        this.container.appendChild(this.layer);

        // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.eventBus.on(Events.Tool.SelectionAdd, () => this.updateFromSelection());
        this.eventBus.on(Events.Tool.SelectionRemove, () => this.updateFromSelection());
        this.eventBus.on(Events.Tool.SelectionClear, () => this.hide());
        this.eventBus.on(Events.Tool.DragUpdate, () => this.reposition());
        this.eventBus.on(Events.Tool.GroupDragUpdate, () => this.reposition());
        this.eventBus.on(Events.Tool.ResizeUpdate, () => this.reposition());
        this.eventBus.on(Events.Tool.RotateUpdate, () => this.reposition());
        this.eventBus.on(Events.UI.ZoomPercent, () => this.reposition());
        this.eventBus.on(Events.Tool.PanUpdate, () => this.reposition());
        this.eventBus.on(Events.Object.Deleted, ({ objectId }) => {
            if (this.currentId && objectId === this.currentId) this.hide();
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        this.eventBus.on(Events.UI.TextEditStart, () => {
            this.isTextEditing = true;
            this.hide();
        });
        this.eventBus.on(Events.UI.TextEditEnd, () => {
            this.isTextEditing = false;
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ—è–≤–ª—è–ª–∞—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            setTimeout(() => this.updateFromSelection(), 100);
        });
    }

    destroy() {
        this.hide();
        if (this.layer) this.layer.remove();
        this.layer = null;
    }

    updateFromSelection() {
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        if (this.isTextEditing) {
            this.hide();
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        const ids = this.core?.selectTool ? Array.from(this.core.selectTool.selectedObjects || []) : [];
        if (!ids || ids.length !== 1) { 
            this.hide(); 
            return; 
        }
        
        const id = ids[0];
        const pixi = this.core?.pixi?.objects?.get ? this.core.pixi.objects.get(id) : null;
        if (!pixi) { 
            this.hide(); 
            return; 
        }
        
        const mb = pixi._mb || {};
        if (mb.type !== 'text') { 
            this.hide(); 
            return; 
        }
        
        this.currentId = id;
        this.showFor(id);
    }

    showFor(id) {
        if (!this.layer) return;
        
        if (!this.panel) {
            this.panel = this._createPanel();
            this.layer.appendChild(this.panel);
            document.addEventListener('mousedown', this._onDocMouseDown, true);
        }
        
        this.panel.style.display = 'flex';
        this.reposition();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞
        this._updateControlsFromObject();
    }

    hide() {
        this.currentId = null;
        if (this.panel) {
            this.panel.style.display = 'none';
        }
        document.removeEventListener('mousedown', this._onDocMouseDown, true);
    }

    _createPanel() {
        const panel = document.createElement('div');
        panel.className = 'text-properties-panel';
        Object.assign(panel.style, {
            position: 'absolute',
            pointerEvents: 'auto',
            display: 'flex',
            flexDirection: 'row',
            alignItems: 'center',
            gap: '12px',
            padding: '8px 16px',
            backgroundColor: 'white',
            border: '1px solid #e0e0e0',
            borderRadius: '8px',
            boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)',
            fontSize: '14px',
            fontFamily: 'Arial, sans-serif',
            minWidth: '250px',
            height: '44px'
        });

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
        this._createFontControls(panel);

        return panel;
    }

    _createFontControls(panel) {
        // –õ–µ–π–±–ª –¥–ª—è —à—Ä–∏—Ñ—Ç–∞
        const fontLabel = document.createElement('span');
        fontLabel.textContent = '–®—Ä–∏—Ñ—Ç:';
        fontLabel.style.fontSize = '12px';
        fontLabel.style.color = '#666';
        fontLabel.style.fontWeight = '500';
        panel.appendChild(fontLabel);

        // –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤
        this.fontSelect = document.createElement('select');
        this.fontSelect.className = 'font-select';
        Object.assign(this.fontSelect.style, {
            border: '1px solid #ddd',
            borderRadius: '4px',
            padding: '4px 8px',
            fontSize: '13px',
            backgroundColor: 'white',
            cursor: 'pointer',
            minWidth: '140px'
        });

        // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
        const fonts = [
            { value: 'Arial, sans-serif', name: 'Arial' },
            { value: 'Helvetica, sans-serif', name: 'Helvetica' },
            { value: 'Georgia, serif', name: 'Georgia' },
            { value: 'Times New Roman, serif', name: 'Times New Roman' },
            { value: 'Courier New, monospace', name: 'Courier New' },
            { value: 'Verdana, sans-serif', name: 'Verdana' },
            { value: 'Tahoma, sans-serif', name: 'Tahoma' },
            { value: 'Impact, sans-serif', name: 'Impact' },
            { value: 'Comic Sans MS, cursive', name: 'Comic Sans MS' },
            { value: 'Trebuchet MS, sans-serif', name: 'Trebuchet MS' }
        ];

        fonts.forEach(font => {
            const option = document.createElement('option');
            option.value = font.value;
            option.textContent = font.name;
            option.style.fontFamily = font.value;
            this.fontSelect.appendChild(option);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞
        this.fontSelect.addEventListener('change', (e) => {
            this._changeFontFamily(e.target.value);
        });

        panel.appendChild(this.fontSelect);
    }

    _changeFontFamily(fontFamily) {
        if (!this.currentId) return;

        console.log('üîß TextPropertiesPanel: Changing font family to:', fontFamily);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ StateManager
        this.eventBus.emit(Events.Object.StateChanged, {
            objectId: this.currentId,
            updates: {
                fontFamily: fontFamily
            }
        });

        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this._updateTextAppearance(this.currentId, { fontFamily });
    }

    _updateTextAppearance(objectId, properties) {
        // –û–±–Ω–æ–≤–ª—è–µ–º HTML —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ HtmlTextLayer
        const htmlElement = document.querySelector(`[data-id="${objectId}"]`);
        if (htmlElement) {
            if (properties.fontFamily) {
                htmlElement.style.fontFamily = properties.fontFamily;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º PIXI –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        const pixiData = { objectId, pixiObject: null };
        this.eventBus.emit(Events.Tool.GetObjectPixi, pixiData);
        const pixiObject = pixiData.pixiObject;
        
        if (pixiObject && pixiObject._mb) {
            if (!pixiObject._mb.properties) {
                pixiObject._mb.properties = {};
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞
            Object.assign(pixiObject._mb.properties, properties);
        }

        // –ü–æ–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (this.core && this.core.state) {
            this.core.state.markDirty();
        }
    }

    _updateControlsFromObject() {
        if (!this.currentId || !this.fontSelect) return;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
        const pixiData = { objectId: this.currentId, pixiObject: null };
        this.eventBus.emit(Events.Tool.GetObjectPixi, pixiData);
        const pixiObject = pixiData.pixiObject;

        if (pixiObject && pixiObject._mb && pixiObject._mb.properties) {
            const properties = pixiObject._mb.properties;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤ —Å–µ–ª–µ–∫—Ç–µ
            if (properties.fontFamily) {
                this.fontSelect.value = properties.fontFamily;
            } else {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
                this.fontSelect.value = 'Arial, sans-serif';
            }
        } else {
            // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            this.fontSelect.value = 'Arial, sans-serif';
        }
    }

    reposition() {
        if (!this.panel || !this.currentId || this.panel.style.display === 'none') return;

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–∞
        const posData = { objectId: this.currentId, position: null };
        const sizeData = { objectId: this.currentId, size: null };
        this.eventBus.emit(Events.Tool.GetObjectPosition, posData);
        this.eventBus.emit(Events.Tool.GetObjectSize, sizeData);

        if (!posData.position || !sizeData.size) return;

        // –ü–æ–ª—É—á–∞–µ–º –∑—É–º –∏ –ø–æ–∑–∏—Ü–∏—é –º–∏—Ä–∞
        const worldLayer = this.core?.pixi?.worldLayer;
        const scale = worldLayer?.scale?.x || 1;
        const worldX = worldLayer?.x || 0;
        const worldY = worldLayer?.y || 0;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        const screenX = posData.position.x * scale + worldX;
        const screenY = posData.position.y * scale + worldY;
        const objectWidth = sizeData.size.width * scale;

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–¥ –æ–±—ä–µ–∫—Ç–æ–º
        const panelX = screenX + (objectWidth / 2) - (this.panel.offsetWidth / 2);
        const panelY = screenY - this.panel.offsetHeight - 10; // 10px –æ—Ç—Å—Ç—É–ø –æ—Ç –æ–±—ä–µ–∫—Ç–∞

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const containerRect = this.container.getBoundingClientRect();
        const finalX = Math.max(10, Math.min(panelX, containerRect.width - this.panel.offsetWidth - 10));
        const finalY = Math.max(10, panelY);

        this.panel.style.left = `${finalX}px`;
        this.panel.style.top = `${finalY}px`;
    }

    _onDocMouseDown(e) {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –Ω–µ—ë –∏ –≤–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if (!this.panel || !e.target) return;
        
        // –ï—Å–ª–∏ –∫–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ –ø–∞–Ω–µ–ª–∏ - –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º
        if (this.panel.contains(e.target)) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–ª–∏–∫–Ω—É–ª–∏ –ª–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–±—ä–µ–∫—Ç—É
        const rect = this.container.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        this.hide();
    }
}
