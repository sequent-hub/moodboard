import { Events } from '../core/events/Events.js';

/**
 * HtmlTextLayer ‚Äî —Ä–∏—Å—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ HTML-—ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–≤–µ—Ä—Ö PIXI –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á—ë—Ç–∫–æ—Å—Ç–∏
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é/—Ä–∞–∑–º–µ—Ä/–º–∞—Å—à—Ç–∞–± —Å –º–∏—Ä–æ–º (worldLayer) –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤
 */
export class HtmlTextLayer {
    constructor(container, eventBus, core) {
        this.container = container; // DOM-—ç–ª–µ–º–µ–Ω—Ç, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è canvas
        this.eventBus = eventBus;
        this.core = core; // CoreMoodBoard, –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ pixi/state
        this.layer = null;
        this.idToEl = new Map();
    }

    attach() {
        // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–π –ø–æ–≤–µ—Ä—Ö –∫–∞–Ω–≤—ã
        this.layer = document.createElement('div');
        this.layer.className = 'moodboard-html-layer';
        Object.assign(this.layer.style, {
            position: 'absolute',
            inset: '0',
            overflow: 'hidden',
            pointerEvents: 'none',
            zIndex: 10, // –≤—ã—à–µ canvas, –Ω–∏–∂–µ —Ç—É–ª–±–∞—Ä–æ–≤
        });
        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ä—è–¥–æ–º —Å canvas (–≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ)
        this.container.appendChild(this.layer);

        // –ü–æ–¥–ø–∏—Å–∫–∏
        this.eventBus.on(Events.Object.Created, ({ objectId, objectData }) => {
            if (!objectData) return;
            if (objectData.type === 'text' || objectData.type === 'simple-text') {
                this._ensureTextEl(objectId, objectData);
                this.updateOne(objectId);
            }
        });
        this.eventBus.on(Events.Object.Deleted, ({ objectId }) => {
            this._removeTextEl(objectId);
        });
        this.eventBus.on(Events.Object.TransformUpdated, ({ objectId }) => {
            this.updateOne(objectId);
        });

        // –ü—Ä—è—Ç–∞—Ç—å HTML-—Ç–µ–∫—Å—Ç –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (textarea)
        this.eventBus.on(Events.UI.TextEditStart, ({ objectId }) => {
            const el = this.idToEl.get(objectId);
            if (el) el.style.visibility = 'hidden';
        });
        this.eventBus.on(Events.UI.TextEditEnd, ({ objectId }) => {
            const el = this.idToEl.get(objectId);
            if (el) el.style.visibility = '';
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç SelectTool
        this.eventBus.on(Events.Tool.HideObjectText, ({ objectId }) => {
            console.log(`üîç HtmlTextLayer: —Å–∫—Ä—ã–≤–∞—é —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId}`);
            const el = this.idToEl.get(objectId);
            if (el) {
                el.style.visibility = 'hidden';
                console.log(`üîç HtmlTextLayer: —Ç–µ–∫—Å—Ç ${objectId} —Å–∫—Ä—ã—Ç (visibility: hidden)`);
            } else {
                console.warn(`‚ùå HtmlTextLayer: HTML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        this.eventBus.on(Events.Tool.ShowObjectText, ({ objectId }) => {
            console.log(`üîç HtmlTextLayer: –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId}`);
            const el = this.idToEl.get(objectId);
            if (el) {
                el.style.visibility = '';
                console.log(`üîç HtmlTextLayer: —Ç–µ–∫—Å—Ç ${objectId} –ø–æ–∫–∞–∑–∞–Ω (visibility: visible)`);
            } else {
                console.warn(`‚ùå HtmlTextLayer: HTML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        this.eventBus.on(Events.Tool.UpdateObjectContent, ({ objectId, content }) => {
            console.log(`üîç HtmlTextLayer: –æ–±–Ω–æ–≤–ª—è—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId}:`, content);
            const el = this.idToEl.get(objectId);
            if (el && typeof content === 'string') {
                el.textContent = content;
                console.log(`üîç HtmlTextLayer: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${objectId}:`, content);
            } else {
                console.warn(`‚ùå HtmlTextLayer: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è ${objectId}:`, { el: !!el, content });
            }
        });

        // –ù–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑—É–º–∞/–ø—ç–Ω–∞ ‚Äî –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this.eventBus.on(Events.UI.ZoomPercent, () => this.updateAll());
        this.eventBus.on(Events.Tool.PanUpdate, () => this.updateAll());
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏/—Ä–µ—Å–∞–π–∑–µ/–ø–æ–≤–æ—Ä–æ—Ç–µ
        this.eventBus.on(Events.Tool.DragUpdate, ({ object }) => this.updateOne(object));
        this.eventBus.on(Events.Tool.ResizeUpdate, ({ object }) => this.updateOne(object));
        this.eventBus.on(Events.Tool.RotateUpdate, ({ object }) => this.updateOne(object));
        this.eventBus.on(Events.Tool.GroupDragUpdate, ({ objects }) => {
            const ids = Array.isArray(objects) ? objects : [];
            ids.forEach(id => this.updateOne(id));
        });
        this.eventBus.on(Events.Tool.GroupResizeUpdate, ({ objects }) => {
            const ids = Array.isArray(objects) ? objects : [];
            ids.forEach(id => this.updateOne(id));
        });
        this.eventBus.on(Events.Tool.GroupRotateUpdate, ({ objects }) => {
            const ids = Array.isArray(objects) ? objects : [];
            ids.forEach(id => this.updateOne(id));
        });

        // –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
        this.rebuildFromState();
        this.updateAll();

        // –•–µ–ª–ø–µ—Ä: –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä—É—á–µ–∫ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º HTML –±–ª–æ–∫
        const world = this.core?.pixi?.worldLayer || this.core?.pixi?.app?.stage;
        if (world) {
            world.on('child:updated', () => this.updateAll()); // –Ω–∞ —Å–ª—É—á–∞–π –≤–Ω–µ—à–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        }
    }

    destroy() {
        if (this.layer) this.layer.remove();
        this.layer = null;
        this.idToEl.clear();
    }

    rebuildFromState() {
        if (!this.core?.state) return;
        const objs = this.core.state.state.objects || [];
        console.log(`üîç HtmlTextLayer: rebuildFromState, –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:`, objs.length);
        
        objs.forEach((o) => {
            if (o.type === 'text' || o.type === 'simple-text') {
                console.log(`üîç HtmlTextLayer: —Å–æ–∑–¥–∞—é HTML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞:`, o);
                this._ensureTextEl(o.id, o);
            }
        });
        this.updateAll();
    }

    _ensureTextEl(objectId, objectData) {
        if (!this.layer || !objectId) return;
        if (this.idToEl.has(objectId)) return;
        
        console.log(`üîç HtmlTextLayer: —Å–æ–∑–¥–∞—é HTML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞ ${objectId}:`, objectData);
        
        const el = document.createElement('div');
        el.className = 'mb-text';
        el.dataset.id = objectId;
        Object.assign(el.style, {
            position: 'absolute',
            transformOrigin: 'top left',
            color: '#111',
            whiteSpace: 'pre-wrap',
            pointerEvents: 'none', // –≤—Å—ë –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ PIXI
            userSelect: 'none',
        });
        const content = objectData.content || objectData.properties?.content || '';
        el.textContent = content;
        // –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ dataset
        const fs = objectData.fontSize || objectData.properties?.fontSize || 16;
        const bw = Math.max(1, objectData.width || objectData.properties?.baseW || 160);
        const bh = Math.max(1, objectData.height || objectData.properties?.baseH || 36);
        el.dataset.baseFontSize = String(fs);
        el.dataset.baseW = String(bw);
        el.dataset.baseH = String(bh);
        this.layer.appendChild(el);
        this.idToEl.set(objectId, el);
        
        console.log(`üîç HtmlTextLayer: HTML-—ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ DOM:`, el);
    }

    _removeTextEl(objectId) {
        const el = this.idToEl.get(objectId);
        if (el) el.remove();
        this.idToEl.delete(objectId);
    }

    updateAll() {
        if (!this.core?.pixi) return;
        for (const id of this.idToEl.keys()) this.updateOne(id);
    }

    updateOne(objectId) {
        const el = this.idToEl.get(objectId);
        if (!el || !this.core) return;
        
        console.log(`üîç HtmlTextLayer: –æ–±–Ω–æ–≤–ª—è—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ ${objectId}`);
        
        const world = this.core.pixi.worldLayer || this.core.pixi.app.stage;
        const s = world?.scale?.x || 1;
        const tx = world?.x || 0;
        const ty = world?.y || 0;
        const res = (this.core?.pixi?.app?.renderer?.resolution) || 1;
        const obj = (this.core.state.state.objects || []).find(o => o.id === objectId);
        if (!obj) return;
        const x = obj.position?.x || 0;
        const y = obj.position?.y || 0;
        const w = obj.width || 0;
        const h = obj.height || 0;
        const angle = obj.rotation || obj.transform?.rotation || 0;

        // –ß—ë—Ç–∫–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞: –º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π font-size, —É—á–∏—Ç—ã–≤–∞—è –∑—É–º –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        const baseFS = parseFloat(el.dataset.baseFontSize || '16') || 16;
        const baseW = parseFloat(el.dataset.baseW || '160') || 160;
        const baseH = parseFloat(el.dataset.baseH || '36') || 36;
        const scaleX = w && baseW ? (w / baseW) : 1;
        const scaleY = h && baseH ? (h / baseH) : 1;
        const sObj = Math.min(scaleX, scaleY);
        const sCss = s / res;
        const fontSizePx = Math.max(1, baseFS * sObj * sCss);
        el.style.fontSize = `${fontSizePx}px`;

        // –ü–æ–∑–∏—Ü–∏—è –∏ –≥–∞–±–∞—Ä–∏—Ç—ã –≤ —ç–∫—Ä–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        const left = (tx + s * x) / res;
        const top = (ty + s * y) / res;
        el.style.left = `${left}px`;
        el.style.top = `${top}px`;
        if (w && h) {
            el.style.width = `${Math.max(1, (w * s) / res)}px`;
            el.style.height = `${Math.max(1, (h * s) / res)}px`;
        }
        // –ü–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ top-left
        if (angle) {
            el.style.transform = `rotate(${angle}deg)`;
        } else {
            el.style.transform = '';
        }
        // –¢–µ–∫—Å—Ç
        const content = obj.content || obj.properties?.content;
        if (typeof content === 'string') {
            el.textContent = content;
            console.log(`üîç HtmlTextLayer: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ updateOne –¥–ª—è ${objectId}:`, content);
        }
        
        console.log(`üîç HtmlTextLayer: –ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${objectId}:`, {
            left: `${left}px`,
            top: `${top}px`,
            width: `${Math.max(1, (w * s) / res)}px`,
            height: `${Math.max(1, (h * s) / res)}px`,
            fontSize: `${fontSizePx}px`,
            content: content,
            visibility: el.style.visibility,
            textContent: el.textContent
        });
    }
}


