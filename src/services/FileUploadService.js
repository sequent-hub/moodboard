/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 */
export class FileUploadService {
    constructor(apiClient, options = {}) {
        this.apiClient = apiClient;
        this.uploadEndpoint = '/api/files/upload';
        this.deleteEndpoint = '/api/files';
        this.options = {
            csrfToken: null, // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
            csrfTokenSelector: 'meta[name="csrf-token"]', // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ DOM
            requireCsrf: true, // –¢—Ä–µ–±–æ–≤–∞—Ç—å –ª–∏ CSRF —Ç–æ–∫–µ–Ω
            ...options
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç CSRF —Ç–æ–∫–µ–Ω –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     * @private
     */
    _getCsrfToken() {
        // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ –æ–ø—Ü–∏—è—Ö
        if (this.options.csrfToken) {
            return this.options.csrfToken;
        }

        // 2. –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ DOM
        if (typeof document !== 'undefined') {
            const tokenElement = document.querySelector(this.options.csrfTokenSelector);
            if (tokenElement) {
                return tokenElement.getAttribute('content');
            }
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        if (typeof window !== 'undefined' && window.csrfToken) {
            return window.csrfToken;
        }

        // 4. –ï—Å–ª–∏ CSRF –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        if (!this.options.requireCsrf) {
            return null;
        }

        return null;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     * @param {File|Blob} file - —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {string} name - –∏–º—è —Ñ–∞–π–ª–∞
     * @returns {Promise<{id: string, url: string, size: number, name: string}>}
     */
    async uploadFile(file, name = null) {
        try {
            // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
            const formData = new FormData();
            formData.append('file', file);
            formData.append('name', name || file.name || 'file');

            // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
            const csrfToken = this._getCsrfToken();
            
            if (this.options.requireCsrf && !csrfToken) {
                throw new Error('CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ <meta name="csrf-token" content="{{ csrf_token() }}"> –≤ HTML –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ –æ–ø—Ü–∏—è—Ö.');
            }

            const headers = {
                'X-Requested-With': 'XMLHttpRequest'
            };

            // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (csrfToken) {
                headers['X-CSRF-TOKEN'] = csrfToken;
            }

            const response = await fetch(this.uploadEndpoint, {
                method: 'POST',
                headers,
                credentials: 'same-origin',
                body: formData
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                throw new Error(errorData?.message || `HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
            }

            return {
                id: result.data.fileId || result.data.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º fileId –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ, id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                fileId: result.data.fileId || result.data.id, // –î–æ–±–∞–≤–ª—è–µ–º fileId –¥–ª—è —è–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                url: result.data.url,
                size: result.data.size,
                name: result.data.name,
                type: result.data.type
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
     * @param {string} fileId - ID —Ñ–∞–π–ª–∞
     * @param {Object} metadata - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Promise<Object>}
     */
    async updateFileMetadata(fileId, metadata) {
        try {
            const csrfToken = this._getCsrfToken();
            
            if (this.options.requireCsrf && !csrfToken) {
                throw new Error('CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ <meta name="csrf-token" content="{{ csrf_token() }}"> –≤ HTML –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ –æ–ø—Ü–∏—è—Ö.');
            }

            const headers = {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
            };

            // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (csrfToken) {
                headers['X-CSRF-TOKEN'] = csrfToken;
            }

            const response = await fetch(`${this.deleteEndpoint}/${fileId}`, {
                method: 'PUT',
                headers,
                credentials: 'same-origin',
                body: JSON.stringify(metadata)
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                throw new Error(errorData?.message || `HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞');
            }

            return result.data;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param {string} fileId - ID —Ñ–∞–π–ª–∞
     */
    async deleteFile(fileId) {
        try {
            const csrfToken = this._getCsrfToken();
            
            const headers = {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
            };

            // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (csrfToken) {
                headers['X-CSRF-TOKEN'] = csrfToken;
            }

            const response = await fetch(`${this.deleteEndpoint}/${fileId}`, {
                method: 'DELETE',
                headers,
                credentials: 'same-origin'
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                throw new Error(errorData?.message || `HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            return result.success;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
     * @param {string} fileId - ID —Ñ–∞–π–ª–∞  
     */
    async getFileInfo(fileId) {
        try {
            const response = await fetch(`${this.deleteEndpoint}/${fileId}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin'
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            return result.data;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
     * @param {string} fileId - ID —Ñ–∞–π–ª–∞
     */
    getDownloadUrl(fileId) {
        return `${this.deleteEndpoint}/${fileId}/download`;
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param {string} fileId - ID —Ñ–∞–π–ª–∞ 
     * @param {string} fileName - –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
     */
    async downloadFile(fileId, fileName = null) {
        try {
            const downloadUrl = this.getDownloadUrl(fileId);
            
            console.log('üì• FileUploadService: –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:', {
                fileId,
                fileName,
                downloadUrl,
                userAgent: navigator.userAgent,
                isSecureContext: window.isSecureContext
            });
            
            // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ fetch + blob (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)
            try {
                console.log('üîÑ –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ fetch...');
                
                const response = await fetch(downloadUrl, {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    credentials: 'same-origin'
                });
                
                console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
                    status: response.status,
                    statusText: response.statusText,
                    contentType: response.headers.get('content-type'),
                    contentLength: response.headers.get('content-length'),
                    contentDisposition: response.headers.get('content-disposition')
                });
                
                if (!response.ok) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—à–∏–±–∫—É –æ—Ç Laravel
                    let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
                    
                    try {
                        const errorData = await response.json();
                        console.error('üö® –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
                        
                        if (errorData.message) {
                            errorMessage = `${errorMessage} - ${errorData.message}`;
                        }
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
                        if (errorData.success === false) {
                            alert(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${errorData.message || '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
                        }
                    } catch (jsonError) {
                        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON –æ—à–∏–±–∫—É:', jsonError);
                    }
                    
                    throw new Error(errorMessage);
                }
                
                // –ü–æ–ª—É—á–∞–µ–º blob —Ñ–∞–π–ª–∞
                const blob = await response.blob();
                console.log('üì¶ –ü–æ–ª—É—á–µ–Ω blob:', {
                    size: blob.size,
                    type: blob.type
                });
                
                // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è blob
                const blobUrl = window.URL.createObjectURL(blob);
                
                // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                const link = document.createElement('a');
                link.href = blobUrl;
                link.download = fileName || `file_${fileId}`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM, –∫–ª–∏–∫–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
                window.URL.revokeObjectURL(blobUrl);
                
                console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω —á–µ—Ä–µ–∑ fetch/blob:', fileName || fileId);
                return true;
                
            } catch (fetchError) {
                console.warn('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ fetch:', fetchError);
                
                // –ú–µ—Ç–æ–¥ 2: Fallback - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
                console.log('üîÑ –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ...');
                
                try {
                    const newWindow = window.open(downloadUrl, '_blank');
                    if (newWindow) {
                        console.log('‚úÖ –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ');
                        return true;
                    } else {
                        throw new Error('Popup –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±—Ä–∞—É–∑–µ—Ä–æ–º');
                    }
                } catch (windowError) {
                    console.warn('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ:', windowError);
                    
                    // –ú–µ—Ç–æ–¥ 3: –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞
                    console.log('üîÑ –ú–µ—Ç–æ–¥ 3: –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É...');
                    
                    const link = document.createElement('a');
                    link.href = downloadUrl;
                    if (fileName) {
                        link.download = fileName;
                    }
                    link.target = '_blank';
                    
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    
                    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
                    return true;
                }
            }

        } catch (error) {
            console.error('‚ùå FileUploadService: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É
            if (confirm(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: ${error.message}\n\n–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ?`)) {
                window.open(this.getDownloadUrl(fileId), '_blank');
            }
            
            throw error;
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {Promise<{deletedCount: number, errors: Array}>}
     */
    async cleanupUnusedFiles() {
        try {
            const csrfToken = this._getCsrfToken();
            
            const headers = {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
            };

            // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (csrfToken) {
                headers['X-CSRF-TOKEN'] = csrfToken;
            }

            const response = await fetch(`${this.deleteEndpoint}/cleanup`, {
                method: 'POST',
                headers,
                credentials: 'same-origin'
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                throw new Error(errorData?.message || `HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.success) {
                const data = result.data || {};
                return {
                    deletedCount: data.deleted_count || 0,
                    errors: data.errors || []
                };
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    static canPreview(mimeType) {
        const previewableTypes = [
            'image/',
            'text/',
            'application/pdf',
            'application/json'
        ];
        
        return previewableTypes.some(type => mimeType.startsWith(type));
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É —Ñ–∞–π–ª–∞ –ø–æ MIME —Ç–∏–ø—É
     */
    static getFileIcon(mimeType) {
        const iconMap = {
            'application/pdf': 'pdf',
            'application/msword': 'doc',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'doc',
            'application/vnd.ms-excel': 'xls',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'xls',
            'application/vnd.ms-powerpoint': 'ppt',
            'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'ppt',
            'application/zip': 'archive',
            'application/x-rar-compressed': 'archive',
            'application/x-7z-compressed': 'archive',
            'text/': 'text',
            'image/': 'image',
            'video/': 'video',
            'audio/': 'audio'
        };

        for (const [type, icon] of Object.entries(iconMap)) {
            if (mimeType.startsWith(type)) {
                return icon;
            }
        }

        return 'file';
    }
}
