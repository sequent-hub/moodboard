// –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç –ø–∞–∫–µ—Ç–∞ - –≥–æ—Ç–æ–≤—ã–π MoodBoard —Å UI
export { MoodBoard } from './moodboard/MoodBoard.js';

/**
 * –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï —ç–º–æ–¥–∂–∏ –¥–ª—è Vite/bundled –≤–µ—Ä—Å–∏–π
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –∞—Å—Å–µ—Ç–∞–º –ø–∞–∫–µ—Ç–∞
 */
export function fixEmojiPaths(packageName = null) {
    if (packageName) {
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–∞–∫–µ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        window.MOODBOARD_BASE_PATH = `${window.location.origin}/node_modules/${packageName}/`;
        console.log('üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —ç–º–æ–¥–∂–∏:', window.MOODBOARD_BASE_PATH);
    } else {
        // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è –ø–∞–∫–µ—Ç–∞
        const detectedPackage = '@sequent-org/moodboard';
        window.MOODBOARD_BASE_PATH = `${window.location.origin}/node_modules/${detectedPackage}/`;
        console.log('üîß –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —ç–º–æ–¥–∂–∏:', window.MOODBOARD_BASE_PATH);
    }
    
    return window.MOODBOARD_BASE_PATH;
}

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ CSS –¥–ª—è –ø–∞–Ω–µ–ª–µ–π
 * –ù–∞—Ö–æ–¥–∏—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —à–∏—Ä–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π
 */
export function diagnosePanelConflicts() {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å—Ç–∏–ª–µ–π –ø–∞–Ω–µ–ª–µ–π...');
    
    const panel = document.querySelector('.text-properties-panel, .frame-properties-panel');
    if (!panel) {
        console.log('‚ùå –ü–∞–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ.');
        return;
    }
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–∞ –ø–∞–Ω–µ–ª—å:', panel.className);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ —Å—Ç–∏–ª–∏
    const computedStyle = getComputedStyle(panel);
    console.log('üìè –¢–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –ø–∞–Ω–µ–ª–∏:');
    console.log('  - width:', computedStyle.width);
    console.log('  - min-width:', computedStyle.minWidth);
    console.log('  - max-width:', computedStyle.maxWidth);
    console.log('  - height:', computedStyle.height);
    console.log('  - padding:', computedStyle.padding);
    console.log('  - display:', computedStyle.display);
    console.log('  - position:', computedStyle.position);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º inline —Å—Ç–∏–ª–∏
    if (panel.style.cssText) {
        console.log('‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ inline —Å—Ç–∏–ª–∏ –Ω–∞ –ø–∞–Ω–µ–ª–∏:', panel.style.cssText);
    } else {
        console.log('‚úÖ Inline —Å—Ç–∏–ª–µ–π –Ω–µ—Ç');
    }
    
    // –ò—â–µ–º –≤—Å–µ CSS –ø—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø–∞–Ω–µ–ª—å
    console.log('üîç –ü–æ–∏—Å–∫ CSS –ø—Ä–∞–≤–∏–ª, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –ø–∞–Ω–µ–ª—å...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    const suspiciousProperties = ['width', 'min-width', 'max-width', 'height', 'padding', 'display'];
    
    suspiciousProperties.forEach(prop => {
        const value = computedStyle.getPropertyValue(prop);
        console.log(`üìå ${prop}: ${value}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        const priority = computedStyle.getPropertyPriority(prop);
        if (priority) {
            console.log(`   ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority}`);
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    let parent = panel.parentElement;
    let level = 1;
    console.log('üîó –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
    while (parent && level <= 5) {
        const parentStyles = getComputedStyle(parent);
        console.log(`  ${level}. ${parent.tagName}${parent.className ? '.' + parent.className : ''}`);
        console.log(`     width: ${parentStyles.width}, display: ${parentStyles.display}`);
        parent = parent.parentElement;
        level++;
    }
    
    // –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ CSS –∫–ª–∞—Å—Å—ã
    console.log('‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:');
    
    const possibleConflicts = [
        'bootstrap', 'tailwind', 'flex', 'grid', 'container', 'row', 'col',
        'w-', 'width', 'min-w', 'max-w', 'panel', 'modal', 'popup'
    ];
    
    const allClasses = panel.className.split(' ');
    const parentClasses = panel.parentElement?.className?.split(' ') || [];
    
    [...allClasses, ...parentClasses].forEach(cls => {
        possibleConflicts.forEach(conflict => {
            if (cls.includes(conflict)) {
                console.log(`üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å: "${cls}" (—Å–æ–¥–µ—Ä–∂–∏—Ç "${conflict}")`);
            }
        });
    });
    
    return {
        element: panel,
        computedStyle: computedStyle,
        currentWidth: computedStyle.width,
        currentMinWidth: computedStyle.minWidth,
        hasInlineStyles: !!panel.style.cssText
    };
}

/**
 * –•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –ø–∞–Ω–µ–ª–µ–π
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ width –∏ min-width, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–µ
 */
export function surgicalPanelFix() {
    console.log('üîß –•–ò–†–£–†–ì–ò–ß–ï–°–ö–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–∞–Ω–µ–ª–µ–π...');
    
    const targetPanels = document.querySelectorAll(`
        .text-properties-panel, 
        .frame-properties-panel, 
        .note-properties-panel,
        .file-properties-panel,
        .moodboard-file-properties-panel
    `);
    
    if (targetPanels.length === 0) {
        console.log('‚ùå –ü–∞–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    targetPanels.forEach((panel, index) => {
        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å ${index + 1}: ${panel.className}`);
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const beforeWidth = getComputedStyle(panel).width;
        const beforeMinWidth = getComputedStyle(panel).minWidth;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (panel.classList.contains('text-properties-panel') || 
            panel.classList.contains('frame-properties-panel')) {
            panel.style.setProperty('min-width', '320px', 'important');
            panel.style.setProperty('width', 'auto', 'important');
        } else if (panel.classList.contains('note-properties-panel')) {
            panel.style.setProperty('min-width', '280px', 'important');
            panel.style.setProperty('width', 'auto', 'important');
        } else if (panel.classList.contains('file-properties-panel') || 
                   panel.classList.contains('moodboard-file-properties-panel')) {
            panel.style.setProperty('min-width', '250px', 'important');
            panel.style.setProperty('width', 'auto', 'important');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setTimeout(() => {
            const afterWidth = getComputedStyle(panel).width;
            const afterMinWidth = getComputedStyle(panel).minWidth;
            
            console.log(`üìè –ü–∞–Ω–µ–ª—å ${index + 1} —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`);
            console.log(`   –î–æ:  width: ${beforeWidth}, min-width: ${beforeMinWidth}`);
            console.log(`   –ü–æ—Å–ª–µ: width: ${afterWidth}, min-width: ${afterMinWidth}`);
            
            if (parseInt(afterMinWidth) >= 250) {
                console.log(`‚úÖ –ü–∞–Ω–µ–ª—å ${index + 1} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
            } else {
                console.log(`‚ùå –ü–∞–Ω–µ–ª—å ${index + 1} –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã`);
            }
        }, 50);
    });
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ bundler
export { initMoodBoardNoBundler, quickInitMoodBoard, injectCriticalStyles, forceInjectPanelStyles } from './initNoBundler.js';
export { StyleLoader } from './utils/styleLoader.js';
export { EmojiLoaderNoBundler } from './utils/emojiLoaderNoBundler.js';

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∂–∏ (PNG data URL)
export { 
    getInlinePngEmojiUrl,
    getAvailableInlinePngEmojis,
    hasInlinePngEmoji
} from './utils/inlinePngEmojis.js';

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö SVG —ç–º–æ–¥–∂–∏ (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏)
export { 
    addInlineSvgEmoji, 
    bulkAddInlineSvgEmojis, 
    getAvailableInlineEmojis,
    isInlineSvgEmoji,
    getInlineEmojiByCode
} from './utils/inlineSvgEmojis.js';

/**
 * –°–£–ü–ï–†-–ê–ì–†–ï–°–°–ò–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏ CSS
 */
export function forceFixPanelStyles() {
    console.log('üí™ –°–£–ü–ï–†-–ê–ì–†–ï–°–°–ò–í–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π (–¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏)...');
    
    const superForcedCSS = `
        /* –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–´–ï —Å—Ç–∏–ª–∏ –ø–∞–Ω–µ–ª–µ–π */
        .text-properties-panel,
        div.text-properties-panel,
        [class*="text-properties-panel"] {
            min-width: 320px !important;
            max-width: none !important;
            width: auto !important;
            height: 36px !important;
            padding: 12px 22px !important;
            margin: 0 !important;
            background: #ffffff !important;
            background-color: #ffffff !important;
            border: 1px solid #e0e0e0 !important;
            border-radius: 9999px !important;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12) !important;
            display: flex !important;
            flex-direction: row !important;
            align-items: center !important;
            gap: 8px !important;
            font-size: 13px !important;
            font-family: 'Roboto', Arial, sans-serif !important;
            position: absolute !important;
            pointer-events: auto !important;
            z-index: 10001 !important;
            box-sizing: border-box !important;
            transform: none !important;
            opacity: 1 !important;
            visibility: visible !important;
        }
        
        .frame-properties-panel,
        div.frame-properties-panel,
        [class*="frame-properties-panel"] {
            min-width: 320px !important;
            max-width: none !important;
            width: auto !important;
            height: 36px !important;
            padding: 12px 32px !important;
            margin: 0 !important;
            background: #ffffff !important;
            background-color: #ffffff !important;
            border: 1px solid #e0e0e0 !important;
            border-radius: 9999px !important;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12) !important;
            display: inline-flex !important;
            align-items: center !important;
            gap: 8px !important;
            font-size: 13px !important;
            font-family: 'Roboto', Arial, sans-serif !important;
            position: absolute !important;
            pointer-events: auto !important;
            z-index: 10001 !important;
            box-sizing: border-box !important;
            transform: none !important;
            opacity: 1 !important;
            visibility: visible !important;
        }
        
        .note-properties-panel,
        div.note-properties-panel,
        [class*="note-properties-panel"] {
            min-width: 280px !important;
            max-width: none !important;
            width: auto !important;
            height: 40px !important;
            padding: 8px 40px !important;
            margin: 0 !important;
            background: white !important;
            background-color: white !important;
            border: 1px solid #e0e0e0 !important;
            border-radius: 9999px !important;
            box-shadow: 0 6px 24px rgba(0, 0, 0, 0.16) !important;
            display: inline-flex !important;
            flex-direction: row !important;
            align-items: center !important;
            gap: 8px !important;
            font-size: 12px !important;
            font-family: Arial, sans-serif !important;
            position: absolute !important;
            pointer-events: auto !important;
            z-index: 10000 !important;
            box-sizing: border-box !important;
            backdrop-filter: blur(4px) !important;
            transform: none !important;
            opacity: 1 !important;
            visibility: visible !important;
        }
    `;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏
    const existingStyles = document.querySelectorAll('#moodboard-universal-panel-fix, #moodboard-super-force-panel-fix');
    existingStyles.forEach(style => style.remove());

    const style = document.createElement('style');
    style.id = 'moodboard-super-force-panel-fix';
    style.textContent = superForcedCSS;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü head –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    document.head.appendChild(style);
    
    console.log('üí™ –°—É–ø–µ—Ä-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏
    setTimeout(() => {
        const panels = document.querySelectorAll('.text-properties-panel, .frame-properties-panel, .note-properties-panel');
        panels.forEach((panel, index) => {
            const computedStyle = getComputedStyle(panel);
            const width = parseInt(computedStyle.minWidth);
            console.log(`üìè –ü–∞–Ω–µ–ª—å ${index + 1}: minWidth = ${width}px`);
        });
    }, 200);
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –ø–∞–Ω–µ–ª–µ–π
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±–æ–π –≤–µ—Ä—Å–∏–µ–π MoodBoard (bundled –∏ no-bundler)
 */
export function fixPanelStyles() {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –ø–∞–Ω–µ–ª–µ–π MoodBoard (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)...');
    
    const forcedPanelCSS = `
        /* –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–∞–Ω–µ–ª–µ–π */
        .text-properties-panel {
            min-width: 320px !important;
            width: auto !important;
            height: 36px !important;
            padding: 12px 22px !important;
            background-color: #ffffff !important;
            border: 1px solid #e0e0e0 !important;
            border-radius: 9999px !important;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12) !important;
            display: flex !important;
            flex-direction: row !important;
            align-items: center !important;
            gap: 8px !important;
            font-size: 13px !important;
            font-family: 'Roboto', Arial, sans-serif !important;
            position: absolute !important;
            pointer-events: auto !important;
            z-index: 1001 !important;
        }
        
        .frame-properties-panel {
            min-width: 320px !important;
            width: auto !important;
            height: 36px !important;
            padding: 12px 32px !important;
            background-color: #ffffff !important;
            border: 1px solid #e0e0e0 !important;
            border-radius: 9999px !important;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12) !important;
            display: inline-flex !important;
            align-items: center !important;
            gap: 8px !important;
            font-size: 13px !important;
            font-family: 'Roboto', Arial, sans-serif !important;
            position: absolute !important;
            pointer-events: auto !important;
            z-index: 1001 !important;
        }
        
        .note-properties-panel {
            min-width: 280px !important;
            width: auto !important;
            height: 36px !important;
            padding: 12px 22px !important;
            background-color: #ffffff !important;
            border: 1px solid #e0e0e0 !important;
            border-radius: 9999px !important;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12) !important;
            display: inline-flex !important;
            align-items: center !important;
            gap: 8px !important;
            font-size: 13px !important;
            font-family: 'Roboto', Arial, sans-serif !important;
            position: absolute !important;
            pointer-events: auto !important;
            z-index: 1001 !important;
        }
        
        .file-properties-panel, .moodboard-file-properties-panel {
            min-width: 250px !important;
            width: auto !important;
            height: 36px !important;
            padding: 8px 12px !important;
            background-color: #ffffff !important;
            border: 1px solid #e5e7eb !important;
            border-radius: 8px !important;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06) !important;
            display: flex !important;
            flex-direction: row !important;
            align-items: center !important;
            gap: 8px !important;
            font-size: 14px !important;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif !important;
            position: absolute !important;
            pointer-events: auto !important;
            z-index: 1000 !important;
        }
    `;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —Å—Ç–∏–ª–∏
    if (document.getElementById('moodboard-universal-panel-fix')) {
        console.log('‚ö†Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–∞–Ω–µ–ª–µ–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        return;
    }

    const style = document.createElement('style');
    style.id = 'moodboard-universal-panel-fix';
    style.textContent = forcedPanelCSS;
    document.head.appendChild(style);
    
    console.log('‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–∞–Ω–µ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 100ms
    setTimeout(() => {
        const panel = document.querySelector('.text-properties-panel, .frame-properties-panel, .note-properties-panel');
        if (panel) {
            const computedStyle = getComputedStyle(panel);
            const width = parseInt(computedStyle.minWidth);
            console.log(`üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–Ω–µ–ª–∏: minWidth = ${width}px`);
            
            if (width >= 250) {
                console.log('‚úÖ –°—Ç–∏–ª–∏ –ø–∞–Ω–µ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
            } else {
                console.log('‚ö†Ô∏è –ü–∞–Ω–µ–ª—å –≤—Å–µ –µ—â–µ —É–∑–∫–∞—è, –≤–æ–∑–º–æ–∂–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã CSS');
            }
        }
    }, 100);
}
