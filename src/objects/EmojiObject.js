import * as PIXI from 'pixi.js';

/**
 * –ö–ª–∞—Å—Å –æ–±—ä–µ–∫—Ç–∞ ¬´–≠–º–æ–¥–∂–∏¬ª
 * –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–º–∞–π–ª —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
 */
export class EmojiObject {
    /**
     * @param {Object} objectData
     *  - properties.content: —Å—Ç—Ä–æ–∫–∞-—ç–º–æ–¥–∂–∏
     *  - properties.fontSize: –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
     *  - width/height: —Ü–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—Ä–µ—Å–∞–π–∑–µ)
     */
    constructor(objectData = {}) {
        this.objectData = objectData;
        this.content = objectData.properties?.content || 'üôÇ';
        this.baseFontSize = objectData.properties?.fontSize || 48;

        const style = new PIXI.TextStyle({
            fontFamily: 'Segoe UI Emoji, Apple Color Emoji, Noto Color Emoji, Arial',
            fontSize: this.baseFontSize
        });

        this.text = new PIXI.Text(this.content, style);
        // –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: —è–∫–æ—Ä—å –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É, —á—Ç–æ–±—ã –ø–æ–∑–∏—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ state.position
        if (typeof this.text.anchor?.set === 'function') {
            this.text.anchor.set(0, 0);
        }

        // –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≥–ª–∏—Ñ–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        const bounds = this.text.getLocalBounds();
        this.baseW = Math.max(1, bounds.width || 1);
        this.baseH = Math.max(1, bounds.height || 1);

        // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º –º–∞—Å—à—Ç–∞–±–æ–º
        const targetW = objectData.width || this.baseW;
        const targetH = objectData.height || this.baseH;
        this._applyUniformScaleToFit(targetW, targetH);

        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–≤–∏–∂–∫–∞
        this.text._mb = {
            ...(this.text._mb || {}),
            type: 'emoji',
            properties: {
                content: this.content,
                fontSize: this.baseFontSize,
                baseW: this.baseW,
                baseH: this.baseH
            }
        };
    }

    getPixi() {
        return this.text;
    }

    setContent(content) {
        this.content = content;
        this.text.text = content;
        const b = this.text.getLocalBounds();
        this.baseW = Math.max(1, b.width || 1);
        this.baseH = Math.max(1, b.height || 1);
    }

    setFontSize(fontSize) {
        this.baseFontSize = fontSize;
        this.text.style = new PIXI.TextStyle({
            fontFamily: 'Segoe UI Emoji, Apple Color Emoji, Noto Color Emoji, Arial',
            fontSize: this.baseFontSize
        });
        const b = this.text.getLocalBounds();
        this.baseW = Math.max(1, b.width || 1);
        this.baseH = Math.max(1, b.height || 1);
    }

    /** –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã –±–µ–∑ —Å–¥–≤–∏–≥–∞ –ø–æ–∑–∏—Ü–∏–∏ */
    updateSize(size) {
        if (!size) return;
        const t = this.text;
        const prev = { x: t.x, y: t.y, rot: t.rotation, px: t.pivot?.x || 0, py: t.pivot?.y || 0 };
        const w = Math.max(1, size.width || 1);
        const h = Math.max(1, size.height || 1);
        this._applyUniformScaleToFit(w, h);
        t.pivot.set(prev.px, prev.py);
        t.x = prev.x;
        t.y = prev.y;
        t.rotation = prev.rot;
    }

    _applyUniformScaleToFit(targetW, targetH) {
        const sx = targetW / (this.baseW || 1);
        const sy = targetH / (this.baseH || 1);
        const s = Math.min(sx, sy);
        this.text.scale.set(s, s);
    }
}


